<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>blog</title>
<link>https://noklam.github.io/blog/index.html</link>
<atom:link href="https://noklam.github.io/blog/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.3.450</generator>
<lastBuildDate>Tue, 21 Jan 2025 00:00:00 GMT</lastBuildDate>
<item>
  <title>Is Python a pass-by-reference or pass-by-value?</title>
  <link>https://noklam.github.io/blog/posts/python_pass_by_value/2025-01-21-Is-Python-Pass-By-Reference-or-Pass-By-Value.html</link>
  <description><![CDATA[ 




<p>I remember this question when I first started to learn Python. It was not very clear to me as at the time I found answer that support both side. After a few years, I got my answer when I was learning more about the Golang. The conclusion is clear as explained in <a href="https://learning.oreilly.com/library/view/learning-go/9781492077206/">Chapter 6, Learning go</a>.</p>
<blockquote class="blockquote">
<p>… the following scenarios are true in Java, Python, JavaScript, and Ruby: - If you pass an instance of a class to a function and you change the value of a field, the change is reflected in the variable that was passed in. - If you reassign the parameter, the change is not reflected in the variable that was passed in. - If you pass nil/null/None for a parameter value, setting the parameter itself to a new value doesn’t modify the variable in the calling function. Some people explain this behavior by saying that class instances are passed by reference in these languages. This is untrue. If they were being passed by reference, scenarios two and three would change the variable in the calling function. These languages are always pass-by-value, just as in Go.</p>
</blockquote>
<p>A simplified Python example to illustrate this behavior</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Foo:</span>
<span id="cb1-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, x):</span>
<span id="cb1-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> inner1(f):</span>
<span id="cb1-6">    f.x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> inner2(f):</span>
<span id="cb1-9">    f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Foo(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">99</span>)</span>
<span id="cb1-10"></span>
<span id="cb1-11">f <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Foo(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb1-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(f.x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-13"></span>
<span id="cb1-14">inner1(f)</span>
<span id="cb1-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(f.x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-16"></span>
<span id="cb1-17">inner2(f)</span>
<span id="cb1-18"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(f.x, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1 

0 

0 
</code></pre>
</div>
</div>
<p>At first, the instance <code>f</code> store a value <code>x=1</code>, this get mutated to <code>0</code> by <code>inner1</code>. But then the <code>inner2</code> did not change the value and <code>f.x</code> remains to <code>0</code> at the end.</p>
<p>Another common example could be demonstrated with Python dictionary</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> mutate(d):</span>
<span id="cb3-2">    d[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">99</span></span>
<span id="cb3-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> d</span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> unchange(d):</span>
<span id="cb3-6">    d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">999</span>}</span>
<span id="cb3-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> d</span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Original dictionary is updated</span></span>
<span id="cb3-10">dictionary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>}</span>
<span id="cb3-11">mutate(dictionary)</span>
<span id="cb3-12"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(dictionary)</span>
<span id="cb3-13"></span>
<span id="cb3-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Dictionary is not updated</span></span>
<span id="cb3-15">dictionary <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>}</span>
<span id="cb3-16">unchange(dictionary)</span>
<span id="cb3-17"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(dictionary)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'a': 99}
{'a': 1}</code></pre>
</div>
</div>
<p>Why is this happening? It seems that sometimes a function can change the input, but sometime it copies an input instead.</p>
<blockquote class="blockquote">
<p>What you are seeing is that every instance of a class in these languages is implemented as a pointer. When a class instance is passed to a function or method, the value being copied is the pointer to the instance.</p>
</blockquote>
<p>This is probably why it is confusing to someone who started with Python, as pointer is a distant concept to Python User. I am not going into details to explain what a Pointer is, the intuition is that a pointer is an address that points to the actual data which exist in physical memory. So when you pass an object to a function (technically, everything is an object in Python), you are passing the address of an object. When you update an attribute of the object, the address is still pointing to a correct address, thus it mutates the original input even outside of the scope of the function. In contrast, if you are creating a new dictionary (even though it has the same variable name), it is a new address that does not affect the original variable.</p>



 ]]></description>
  <category>python</category>
  <guid>https://noklam.github.io/blog/posts/python_pass_by_value/2025-01-21-Is-Python-Pass-By-Reference-or-Pass-By-Value.html</guid>
  <pubDate>Tue, 21 Jan 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Kedro + Logfire is Easy (One Configuration Change only!)</title>
  <link>https://noklam.github.io/blog/posts/kedro_logfire/2024-12-01-kedro-with-logfire.html</link>
  <description><![CDATA[ 




<p>Full code example on GitHub: https://github.com/noklam/kedro-logfire-example</p>
<p>I started exploring observability tools lately and naturally I encounter Logfire, an Python observability library that is built by the Pydantic team. I was wondering how hard it is to integrate Kedro with it and whether it needs a seperate plugin. To my surprise, it’s pretty easy to get started.</p>
<p>The only thing you need is to update the <code>logging.yml</code> (make sure you choose <code>logging</code> when you start a new project), otherwise you can grab it from the <a href="https://github.com/kedro-org/kedro-starters/blob/main/spaceflights-pandas/%7B%7B%20cookiecutter.repo_name%20%7D%7D/conf/logging.yml">template <code>logging.yml</code></a>.</p>
<p>````diff handlers: … + logfire: + class: logfire.LogfireLoggingHandler</p>
<ul>
<li>rich:</li>
<li>class: kedro.logging.RichHandler</li>
<li>rich_tracebacks: True</li>
<li><h1 id="advance-options-for-customisation.">Advance options for customisation.</h1></li>
<li><h1 id="see-httpsdocs.kedro.orgenstablelogginglogging.htmlproject-side-logging-configuration">See https://docs.kedro.org/en/stable/logging/logging.html#project-side-logging-configuration</h1></li>
<li><h1 id="tracebacks_show_locals-false">tracebacks_show_locals: False</h1></li>
</ul>
<pre><code>
Once you have configure the logging setting, you can start a run with:

```bash
kedro run</code></pre>
<p>Then you may see the log messages in the console. (You will see a different link, make sure you also create an account on Logfire and authenticate first)</p>
<pre class="log"><code>Logfire project URL: https://logfire.pydantic.dev/noklam/kedrologfireexample
16:10:10.321 Using synchronous mode for loading and saving data. Use the --async flag for potential performance gains. https://docs.kedro.org/en/stable/nodes_and_pipelines/run_a_pipeline.html#load-and-save-asynchronously</code></pre>
<p>It works quite seemlessly and I can see live log on Logfire platform immediately. <img src="https://noklam.github.io/blog/posts/kedro_logfire/logfire-kedro.png" class="img-fluid" alt="logfire-kedro.png"></p>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>It’s quite easy to get started with Logfire and Kedro. Next time I’d like to dive deeper into Logfire’s features.</p>


</section>

 ]]></description>
  <category>python</category>
  <category>kedro</category>
  <category>logfire</category>
  <guid>https://noklam.github.io/blog/posts/kedro_logfire/2024-12-01-kedro-with-logfire.html</guid>
  <pubDate>Sun, 01 Dec 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>(WIP) - Integrating Iceberg with Kedro for data versioning</title>
  <link>https://noklam.github.io/blog/posts/pyiceberg/2024-11-18-PyIcebergDataset.html</link>
  <description><![CDATA[ 




<div class="cell" data-execution_count="227">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>load_ext autoreload</span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>autoreload <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> kedro.io <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AbstractVersionedDataset</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> rich.pretty</span>
<span id="cb1-5">rich.pretty.install()</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span></code></pre></div>
</div>
<div class="cell" data-execution_count="228">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>pip install pyiceberg</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Note: you may need to restart the kernel to use updated packages.</code></pre>
</div>
</div>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>curl https:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>d37ci6vzurychx.cloudfront.net<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>trip<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>yellow_tripdata_2023<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">01.</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">parquet</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>o <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>tmp<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>yellow_tripdata_2023<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">01.</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">parquet</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100 45.4M  100 45.4M    0     0  6605k      0  0:00:07  0:00:07 --:--:--  9.8M</code></pre>
</div>
</div>
<div class="cell" data-execution_count="264">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pyiceberg.catalog.sql <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SqlCatalog</span>
<span id="cb6-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyiceberg</span>
<span id="cb6-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pyiceberg.table <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Table</span>
<span id="cb6-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> kedro.io.core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AbstractDataset, DatasetError</span>
<span id="cb6-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyarrow <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pa</span>
<span id="cb6-6"></span>
<span id="cb6-7"></span>
<span id="cb6-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> PyIcebergDataset(AbstractDataset):</span>
<span id="cb6-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(</span>
<span id="cb6-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, table_name, namespace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"default"</span>, table_type<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pandas"</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs</span>
<span id="cb6-11">    ):</span>
<span id="cb6-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._table: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> Table <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb6-13">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._table_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> table_name</span>
<span id="cb6-14">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._namespace <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> namespace</span>
<span id="cb6-15">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.table_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> table_type</span>
<span id="cb6-16"></span>
<span id="cb6-17">        warehouse_path <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/tmp/warehouse"</span></span>
<span id="cb6-18">        catalog <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SqlCatalog(</span>
<span id="cb6-19">            namespace,</span>
<span id="cb6-20">            <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>{</span>
<span id="cb6-21">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"uri"</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"sqlite:///</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>warehouse_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/pyiceberg_catalog.db"</span>,</span>
<span id="cb6-22">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"warehouse"</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"file://</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>warehouse_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb6-23">            },</span>
<span id="cb6-24">        )</span>
<span id="cb6-25"></span>
<span id="cb6-26">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.catalog <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> catalog</span>
<span id="cb6-27"></span>
<span id="cb6-28">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">TODO</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">: If table cannot be create, assume it's not created yet and not raise error</span></span>
<span id="cb6-29">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb6-30">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._table <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.catalog.load_table(</span>
<span id="cb6-31">                <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>_namespace<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>_table_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb6-32">            )</span>
<span id="cb6-33">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span>:</span>
<span id="cb6-34">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb6-35"></span>
<span id="cb6-36">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> save(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data, version<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb6-37">        arrow_table <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pa.Table.from_pandas(data)</span>
<span id="cb6-38">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._table:</span>
<span id="cb6-39">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create the table first</span></span>
<span id="cb6-40">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.catalog.create_namespace_if_not_exists(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._namespace)</span>
<span id="cb6-41">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._table <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.catalog.create_table(</span>
<span id="cb6-42">                <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>_namespace<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>_table_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, schema<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>arrow_table.schema</span>
<span id="cb6-43">            )</span>
<span id="cb6-44"></span>
<span id="cb6-45">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.table_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pandas"</span>:</span>
<span id="cb6-46">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._table.overwrite(arrow_table)</span>
<span id="cb6-47">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb6-48">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">NotImplementedError</span></span>
<span id="cb6-49"></span>
<span id="cb6-50">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _describe(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb6-51">        ...</span>
<span id="cb6-52"></span>
<span id="cb6-53">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> load(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, snapshot_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb6-54">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._table:</span>
<span id="cb6-55">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> DatasetError(</span>
<span id="cb6-56">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Iceberg Table not exist yet, make sure you use the `save` method to create a table first."</span></span>
<span id="cb6-57">            )</span>
<span id="cb6-58"></span>
<span id="cb6-59">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.table_type <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pandas"</span>:</span>
<span id="cb6-60">            data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._table.scan(snapshot_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>snapshot_id).to_pandas()</span>
<span id="cb6-61">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> data</span>
<span id="cb6-62"></span>
<span id="cb6-63">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Shortcut to iceberg table `inspect` module</span></span>
<span id="cb6-64">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> entries(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb6-65">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._table.entries()</span>
<span id="cb6-66"></span>
<span id="cb6-67">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> partitions(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb6-68">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._table.partitions()</span>
<span id="cb6-69"></span>
<span id="cb6-70">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> snapshots(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb6-71">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._table.snapshots()</span>
<span id="cb6-72"></span>
<span id="cb6-73">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> manifests(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb6-74">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._table.manifests()</span>
<span id="cb6-75"></span>
<span id="cb6-76">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> history(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb6-77">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._table.history()</span>
<span id="cb6-78"></span>
<span id="cb6-79">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> files(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb6-80">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._table.files()</span>
<span id="cb6-81"></span>
<span id="cb6-82">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> schema(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb6-83">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._table.schema()</span>
<span id="cb6-84"></span>
<span id="cb6-85">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> latest_version(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb6-86">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._table.last_sequence_number</span></code></pre></div>
</div>
<section id="first-create-a-table" class="level1">
<h1>First create a table</h1>
<div class="cell" data-execution_count="250">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PyIcebergDataset(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"taxi_dataset"</span>)</span>
<span id="cb7-2">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_parquet(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/tmp/yellow_tripdata_2023-01.parquet"</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Downcast timestamp for compatability https://github.com/apache/iceberg-python/issues/1045#issuecomment-2445205707</span></span>
<span id="cb8-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb8-3">os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PYICEBERG_DOWNCAST_NS_TIMESTAMP_TO_US_ON_WRITE'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'true'</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="251">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">dataset.save(df)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Iceberg does not yet support 'ns' timestamp precision. Downcasting to 'us'.
Iceberg does not yet support 'ns' timestamp precision. Downcasting to 'us'.
Iceberg does not yet support 'ns' timestamp precision. Downcasting to 'us'.
Iceberg does not yet support 'ns' timestamp precision. Downcasting to 'us'.
/Users/Nok_Lam_Chan/miniconda3/envs/kedro/lib/python3.10/site-packages/pyiceberg/table/__init__.py:651: UserWarning: Delete operation did not match any records
  warnings.warn("Delete operation did not match any records")
Iceberg does not yet support 'ns' timestamp precision. Downcasting to 'us'.
Iceberg does not yet support 'ns' timestamp precision. Downcasting to 'us'.</code></pre>
</div>
</div>
<div class="cell" data-execution_count="254">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">dataset._table.last_sequence_number</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="254">
<div class="ansi-escaped-output">
<pre><span class="ansi-cyan-fg ansi-bold">1</span></pre>
</div>
</div>
</div>
<section id="load-data" class="level2">
<h2 class="anchored" data-anchor-id="load-data">Load Data</h2>
<div class="cell" data-execution_count="255">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset.load()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="256">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">data.head()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="256">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">VendorID</th>
<th data-quarto-table-cell-role="th">tpep_pickup_datetime</th>
<th data-quarto-table-cell-role="th">tpep_dropoff_datetime</th>
<th data-quarto-table-cell-role="th">passenger_count</th>
<th data-quarto-table-cell-role="th">trip_distance</th>
<th data-quarto-table-cell-role="th">RatecodeID</th>
<th data-quarto-table-cell-role="th">store_and_fwd_flag</th>
<th data-quarto-table-cell-role="th">PULocationID</th>
<th data-quarto-table-cell-role="th">DOLocationID</th>
<th data-quarto-table-cell-role="th">payment_type</th>
<th data-quarto-table-cell-role="th">fare_amount</th>
<th data-quarto-table-cell-role="th">extra</th>
<th data-quarto-table-cell-role="th">mta_tax</th>
<th data-quarto-table-cell-role="th">tip_amount</th>
<th data-quarto-table-cell-role="th">tolls_amount</th>
<th data-quarto-table-cell-role="th">improvement_surcharge</th>
<th data-quarto-table-cell-role="th">total_amount</th>
<th data-quarto-table-cell-role="th">congestion_surcharge</th>
<th data-quarto-table-cell-role="th">airport_fee</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>2</td>
<td>2023-01-01 00:32:10</td>
<td>2023-01-01 00:40:36</td>
<td>1.0</td>
<td>0.97</td>
<td>1.0</td>
<td>N</td>
<td>161</td>
<td>141</td>
<td>2</td>
<td>9.3</td>
<td>1.00</td>
<td>0.5</td>
<td>0.00</td>
<td>0.0</td>
<td>1.0</td>
<td>14.30</td>
<td>2.5</td>
<td>0.00</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>2</td>
<td>2023-01-01 00:55:08</td>
<td>2023-01-01 01:01:27</td>
<td>1.0</td>
<td>1.10</td>
<td>1.0</td>
<td>N</td>
<td>43</td>
<td>237</td>
<td>1</td>
<td>7.9</td>
<td>1.00</td>
<td>0.5</td>
<td>4.00</td>
<td>0.0</td>
<td>1.0</td>
<td>16.90</td>
<td>2.5</td>
<td>0.00</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>2</td>
<td>2023-01-01 00:25:04</td>
<td>2023-01-01 00:37:49</td>
<td>1.0</td>
<td>2.51</td>
<td>1.0</td>
<td>N</td>
<td>48</td>
<td>238</td>
<td>1</td>
<td>14.9</td>
<td>1.00</td>
<td>0.5</td>
<td>15.00</td>
<td>0.0</td>
<td>1.0</td>
<td>34.90</td>
<td>2.5</td>
<td>0.00</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>1</td>
<td>2023-01-01 00:03:48</td>
<td>2023-01-01 00:13:25</td>
<td>0.0</td>
<td>1.90</td>
<td>1.0</td>
<td>N</td>
<td>138</td>
<td>7</td>
<td>1</td>
<td>12.1</td>
<td>7.25</td>
<td>0.5</td>
<td>0.00</td>
<td>0.0</td>
<td>1.0</td>
<td>20.85</td>
<td>0.0</td>
<td>1.25</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>2</td>
<td>2023-01-01 00:10:29</td>
<td>2023-01-01 00:21:19</td>
<td>1.0</td>
<td>1.43</td>
<td>1.0</td>
<td>N</td>
<td>107</td>
<td>79</td>
<td>1</td>
<td>11.4</td>
<td>1.00</td>
<td>0.5</td>
<td>3.28</td>
<td>0.0</td>
<td>1.0</td>
<td>19.68</td>
<td>2.5</td>
<td>0.00</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="overwrite-data" class="level2">
<h2 class="anchored" data-anchor-id="overwrite-data">Overwrite data</h2>
<div class="cell" data-execution_count="257">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">dataset.save(data)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>Iceberg does not yet support 'ns' timestamp precision. Downcasting to 'us'.
Iceberg does not yet support 'ns' timestamp precision. Downcasting to 'us'.
Iceberg does not yet support 'ns' timestamp precision. Downcasting to 'us'.
Iceberg does not yet support 'ns' timestamp precision. Downcasting to 'us'.</code></pre>
</div>
</div>
<div class="cell" data-execution_count="258">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">dataset._table.last_sequence_number</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="258">
<div class="ansi-escaped-output">
<pre><span class="ansi-cyan-fg ansi-bold">3</span></pre>
</div>
</div>
</div>
<p>Interestingly, the sequence number increase by 2 instead of 1. After some investigation, I couldn’t find any documentation that explains this in details. But there are some hints in this docstring of <code>overwrite</code> method.</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode md code-with-copy"><code class="sourceCode markdown"><span id="cb17-1"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Shorthand for overwriting the table with a PyArrow table.</span></span>
<span id="cb17-2"></span>
<span id="cb17-3"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        An overwrite may produce zero or more snapshots based on the operation:</span></span>
<span id="cb17-4"></span>
<span id="cb17-5"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            - DELETE: In case existing Parquet files can be dropped completely.</span></span>
<span id="cb17-6"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            - REPLACE: In case existing Parquet files need to be rewritten.</span></span>
<span id="cb17-7"><span class="in" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            - APPEND: In case new data is being inserted into the table.</span></span></code></pre></div>
<p>In this case, it seems to perform two operations <code>DELETE</code> and <code>APPEND</code>, thus two snapshots. We can inspect the snapshot history.</p>
</section>
<section id="inspecting-snapshots" class="level2">
<h2 class="anchored" data-anchor-id="inspecting-snapshots">Inspecting Snapshots</h2>
<div class="cell" data-execution_count="259">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">dataset._table.snapshots()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="259">
<div class="ansi-escaped-output">
<pre><span class="ansi-bold">[</span>
    <span class="ansi-magenta-fg ansi-bold">Snapshot</span><span class="ansi-bold">(</span>
        <span class="ansi-yellow-fg">snapshot_id</span>=<span class="ansi-cyan-fg ansi-bold">8697304666575148681</span>,
        <span class="ansi-yellow-fg">parent_snapshot_id</span>=<span style="font-style:italic" class="ansi-magenta-fg">None</span>,
        <span class="ansi-yellow-fg">sequence_number</span>=<span class="ansi-cyan-fg ansi-bold">1</span>,
        <span class="ansi-yellow-fg">timestamp_ms</span>=<span class="ansi-cyan-fg ansi-bold">1731930320934</span>,
        <span class="ansi-yellow-fg">manifest_list</span>=<span class="ansi-green-fg">'file:///tmp/warehouse/default.db/taxi_dataset/metadata/snap-8697304666575148681-0-1f0a39a1-5d17-459d-8031-ab8fb52b5e5d.avro'</span>,
        <span class="ansi-yellow-fg">summary</span>=<span class="ansi-magenta-fg ansi-bold">Summary</span><span class="ansi-bold">(</span><span class="ansi-yellow-fg">operation</span>=<span class="ansi-magenta-fg">Operation</span>.APPEND<span class="ansi-bold">)</span>,
        <span class="ansi-yellow-fg">schema_id</span>=<span class="ansi-cyan-fg ansi-bold">0</span>
    <span class="ansi-bold">)</span>,
    <span class="ansi-magenta-fg ansi-bold">Snapshot</span><span class="ansi-bold">(</span>
        <span class="ansi-yellow-fg">snapshot_id</span>=<span class="ansi-cyan-fg ansi-bold">3459262658777849345</span>,
        <span class="ansi-yellow-fg">parent_snapshot_id</span>=<span class="ansi-cyan-fg ansi-bold">8697304666575148681</span>,
        <span class="ansi-yellow-fg">sequence_number</span>=<span class="ansi-cyan-fg ansi-bold">2</span>,
        <span class="ansi-yellow-fg">timestamp_ms</span>=<span class="ansi-cyan-fg ansi-bold">1731930437601</span>,
        <span class="ansi-yellow-fg">manifest_list</span>=<span class="ansi-green-fg">'file:///tmp/warehouse/default.db/taxi_dataset/metadata/snap-3459262658777849345-0-112bd0f2-7a28-48b2-8e81-607215460f8c.avro'</span>,
        <span class="ansi-yellow-fg">summary</span>=<span class="ansi-magenta-fg ansi-bold">Summary</span><span class="ansi-bold">(</span><span class="ansi-yellow-fg">operation</span>=<span class="ansi-magenta-fg">Operation</span>.DELETE<span class="ansi-bold">)</span>,
        <span class="ansi-yellow-fg">schema_id</span>=<span class="ansi-cyan-fg ansi-bold">0</span>
    <span class="ansi-bold">)</span>,
    <span class="ansi-magenta-fg ansi-bold">Snapshot</span><span class="ansi-bold">(</span>
        <span class="ansi-yellow-fg">snapshot_id</span>=<span class="ansi-cyan-fg ansi-bold">8535010037908857370</span>,
        <span class="ansi-yellow-fg">parent_snapshot_id</span>=<span class="ansi-cyan-fg ansi-bold">3459262658777849345</span>,
        <span class="ansi-yellow-fg">sequence_number</span>=<span class="ansi-cyan-fg ansi-bold">3</span>,
        <span class="ansi-yellow-fg">timestamp_ms</span>=<span class="ansi-cyan-fg ansi-bold">1731930438271</span>,
        <span class="ansi-yellow-fg">manifest_list</span>=<span class="ansi-green-fg">'file:///tmp/warehouse/default.db/taxi_dataset/metadata/snap-8535010037908857370-0-2bca8b47-b166-4ab8-99ee-81178d28f1d2.avro'</span>,
        <span class="ansi-yellow-fg">summary</span>=<span class="ansi-magenta-fg ansi-bold">Summary</span><span class="ansi-bold">(</span><span class="ansi-yellow-fg">operation</span>=<span class="ansi-magenta-fg">Operation</span>.APPEND<span class="ansi-bold">)</span>,
        <span class="ansi-yellow-fg">schema_id</span>=<span class="ansi-cyan-fg ansi-bold">0</span>
    <span class="ansi-bold">)</span>
<span class="ansi-bold">]</span></pre>
</div>
</div>
</div>
<p>You can see that there are consecutive snapshots like this. Now let’s load the data to confirm this.</p>
<pre><code>summary=Summary(operation=Operation.DELETE),
summary=Summary(operation=Operation.APPEND),</code></pre>
<p>Let’s grab the snapshot_id and load the data.</p>
</section>
<section id="load-iceberg-table-with-snapshot_id" class="level2">
<h2 class="anchored" data-anchor-id="load-iceberg-table-with-snapshot_id">Load Iceberg table with snapshot_id</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset.load(snapshot_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3459262658777849345</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>TypeError: PyIcebergDataset.load() got an unexpected keyword argument 'snapshot_id'</code></pre>
</div>
</div>
<div class="cell" data-execution_count="263">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">dataset.load??</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>'__main__.PyIcebergDataset' is a subclass of AbstractDataset and it must implement the '_describe' method following the signature of AbstractDataset's '_describe'.</code></pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>Signature: dataset.load(snapshot_id=None) -&gt; None
Docstring:
Loads data by delegation to the provided load method.

Returns:
    Data returned by the provided load method.

Raises:
    DatasetError: When underlying load method raises error.
Source:   
    def load(self, snapshot_id=None):
        if not self._table:
            raise DatasetError(
                "Iceberg Table not exist yet, make sure you use the `save` method to create a table first."
            )

        if self.table_type == "pandas":
            data = self._table.scan(snapshot_id=snapshot_id).to_pandas()
        return data
File:      /var/folders/qq/wpp9vnws3sqcv6v3td68qcpm0000gp/T/ipykernel_46934/2093655639.py
Type:      method</code></pre>
</div>
</div>
<p>This is weird, I suspect this is due to how we wrap the <code>load</code> and <code>save</code> method. In general datasets use <code>_load_args</code> and <code>_save_args</code>, but it’s not convenient when you are actually developing interactively so I really want to just pass. For now I bypass this with internal method</p>
<div class="cell" data-execution_count="268">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset._table.scan(snapshot_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3459262658777849345</span>).to_pandas()</span>
<span id="cb25-2">_</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="268">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">VendorID</th>
<th data-quarto-table-cell-role="th">tpep_pickup_datetime</th>
<th data-quarto-table-cell-role="th">tpep_dropoff_datetime</th>
<th data-quarto-table-cell-role="th">passenger_count</th>
<th data-quarto-table-cell-role="th">trip_distance</th>
<th data-quarto-table-cell-role="th">RatecodeID</th>
<th data-quarto-table-cell-role="th">store_and_fwd_flag</th>
<th data-quarto-table-cell-role="th">PULocationID</th>
<th data-quarto-table-cell-role="th">DOLocationID</th>
<th data-quarto-table-cell-role="th">payment_type</th>
<th data-quarto-table-cell-role="th">fare_amount</th>
<th data-quarto-table-cell-role="th">extra</th>
<th data-quarto-table-cell-role="th">mta_tax</th>
<th data-quarto-table-cell-role="th">tip_amount</th>
<th data-quarto-table-cell-role="th">tolls_amount</th>
<th data-quarto-table-cell-role="th">improvement_surcharge</th>
<th data-quarto-table-cell-role="th">total_amount</th>
<th data-quarto-table-cell-role="th">congestion_surcharge</th>
<th data-quarto-table-cell-role="th">airport_fee</th>
</tr>
</thead>
<tbody>
</tbody>
</table>

</div>
</div>
</div>
<p>It looks like an empty table after <code>DELETE</code>, let’s check the other snapshot.</p>
<div class="cell" data-execution_count="269">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dataset._table.scan(snapshot_id<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8535010037908857370</span>).to_pandas()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="270">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">_.head()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="270">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">VendorID</th>
<th data-quarto-table-cell-role="th">tpep_pickup_datetime</th>
<th data-quarto-table-cell-role="th">tpep_dropoff_datetime</th>
<th data-quarto-table-cell-role="th">passenger_count</th>
<th data-quarto-table-cell-role="th">trip_distance</th>
<th data-quarto-table-cell-role="th">RatecodeID</th>
<th data-quarto-table-cell-role="th">store_and_fwd_flag</th>
<th data-quarto-table-cell-role="th">PULocationID</th>
<th data-quarto-table-cell-role="th">DOLocationID</th>
<th data-quarto-table-cell-role="th">payment_type</th>
<th data-quarto-table-cell-role="th">fare_amount</th>
<th data-quarto-table-cell-role="th">extra</th>
<th data-quarto-table-cell-role="th">mta_tax</th>
<th data-quarto-table-cell-role="th">tip_amount</th>
<th data-quarto-table-cell-role="th">tolls_amount</th>
<th data-quarto-table-cell-role="th">improvement_surcharge</th>
<th data-quarto-table-cell-role="th">total_amount</th>
<th data-quarto-table-cell-role="th">congestion_surcharge</th>
<th data-quarto-table-cell-role="th">airport_fee</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>2</td>
<td>2023-01-01 00:32:10</td>
<td>2023-01-01 00:40:36</td>
<td>1.0</td>
<td>0.97</td>
<td>1.0</td>
<td>N</td>
<td>161</td>
<td>141</td>
<td>2</td>
<td>9.3</td>
<td>1.00</td>
<td>0.5</td>
<td>0.00</td>
<td>0.0</td>
<td>1.0</td>
<td>14.30</td>
<td>2.5</td>
<td>0.00</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>2</td>
<td>2023-01-01 00:55:08</td>
<td>2023-01-01 01:01:27</td>
<td>1.0</td>
<td>1.10</td>
<td>1.0</td>
<td>N</td>
<td>43</td>
<td>237</td>
<td>1</td>
<td>7.9</td>
<td>1.00</td>
<td>0.5</td>
<td>4.00</td>
<td>0.0</td>
<td>1.0</td>
<td>16.90</td>
<td>2.5</td>
<td>0.00</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>2</td>
<td>2023-01-01 00:25:04</td>
<td>2023-01-01 00:37:49</td>
<td>1.0</td>
<td>2.51</td>
<td>1.0</td>
<td>N</td>
<td>48</td>
<td>238</td>
<td>1</td>
<td>14.9</td>
<td>1.00</td>
<td>0.5</td>
<td>15.00</td>
<td>0.0</td>
<td>1.0</td>
<td>34.90</td>
<td>2.5</td>
<td>0.00</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>1</td>
<td>2023-01-01 00:03:48</td>
<td>2023-01-01 00:13:25</td>
<td>0.0</td>
<td>1.90</td>
<td>1.0</td>
<td>N</td>
<td>138</td>
<td>7</td>
<td>1</td>
<td>12.1</td>
<td>7.25</td>
<td>0.5</td>
<td>0.00</td>
<td>0.0</td>
<td>1.0</td>
<td>20.85</td>
<td>0.0</td>
<td>1.25</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>2</td>
<td>2023-01-01 00:10:29</td>
<td>2023-01-01 00:21:19</td>
<td>1.0</td>
<td>1.43</td>
<td>1.0</td>
<td>N</td>
<td>107</td>
<td>79</td>
<td>1</td>
<td>11.4</td>
<td>1.00</td>
<td>0.5</td>
<td>3.28</td>
<td>0.0</td>
<td>1.0</td>
<td>19.68</td>
<td>2.5</td>
<td>0.00</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
</section>
<section id="questions" class="level1">
<h1>Questions</h1>
<ul>
<li>What does it means when we said ” if we can use Iceberg to map a single version number to code, parameters, and I/O data within Kedro and how it aligns with Kedro’s workflow.” Versioning code &amp; parameters sounds more like versioning artifacts.</li>
<li>How to efficiently version data? <code>overwrite</code> is a completely re-write. For SQL engine this is implemented by the engine that utilise API like <code>append</code>, <code>replace</code>. With pandas/polars it is unclear if it’s possible. (Maybe be possible if it’s using something like <code>ibis</code>)</li>
<li>Incremental pipeline (and incremental data)</li>
<li>Version non-table type, i.e.&nbsp;parameters, code(?), Iceberg support only these three formats out of the box: Apache Parquet, Apache ORC, and Apache Avro. Parquet is the first-class citizen and the only format that people use in practice.</li>
</ul>


</section>

 ]]></description>
  <category>python</category>
  <category>kedro</category>
  <guid>https://noklam.github.io/blog/posts/pyiceberg/2024-11-18-PyIcebergDataset.html</guid>
  <pubDate>Mon, 18 Nov 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Achieve (Almost) dependencies-free Kedro Viz Pipeline</title>
  <link>https://noklam.github.io/blog/posts/kedro-viz-parser/2024-07-08-parsing-kedro-pipeline-as-ast.html</link>
  <description><![CDATA[ 




<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ast</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> logging</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> defaultdict</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Dict, Iterable, List</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> kedro.pipeline.modular_pipeline <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pipeline <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> ModularPipeline</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> kedro.pipeline.pipeline <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Node, Pipeline</span>
<span id="cb1-9"></span>
<span id="cb1-10">logger <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logging.getLogger(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span>)</span></code></pre></div>
</div>
<section id="the-problem" class="level1">
<h1>The Problem</h1>
<p>Kedro viz is a visualisation tools for Kedro. It creates an interactive flow chart that visualize Kedro’s pipeline in a web app. One of the issue is that Kedro-Viz requires loading a Kedro project, this creates frictions as Kedro-Viz is often used for onboarding and installing all dependencies correctly could be a big challenge.</p>
<p>(note: It’s available in <code>kedro-viz</code> now as <code>kedro viz --lite</code>)</p>
</section>
<section id="solution" class="level1">
<h1>Solution</h1>
<p>If we focus only on the interactive flowchart of Kedro-Viz, it’s possible to get rid of the dependencies, and the key is to use Abstract Syntax Tree (AST) to parse Kedro pipeline instead actually loading the module.</p>
</section>
<section id="how-this-work" class="level1">
<h1>How this work?</h1>
<section id="python-as-an-interpreted-language" class="level2">
<h2 class="anchored" data-anchor-id="python-as-an-interpreted-language">Python as an Interpreted Language</h2>
<p>Python is often considered as “interpreted” rather than “compiled”. In fact, compilation still happens in Python but it’s a lot simpler compare to other language like C++.</p>
<p>The things that happens is usually</p>
<p>Parsing a text file -&gt; AST -&gt; Bytecode (i.e.&nbsp;the .pyc file) -&gt; Machine code</p>
<p>Before this, we need to understand what <code>AST</code> is and how can we leverage the <code>ast</code> Python library. AST is a data structure that represent your code in a tree-like structure. For example, consider the snippet below:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A simple time program</span></span>
<span id="cb2-4">start_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb2-5">time.sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb2-6">now <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb2-7"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time spent:"</span>, now <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start_time)</span></code></pre></div>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">snippet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""import time</span></span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"># A simple time program</span></span>
<span id="cb3-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">start_time = time.time()</span></span>
<span id="cb3-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">time.sleep(1)</span></span>
<span id="cb3-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">now = time.time()</span></span>
<span id="cb3-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">print("Time spent:", now - start_time)"""</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="104">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ast</span>
<span id="cb4-2"></span>
<span id="cb4-3">parsed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ast.parse(snippet)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="105">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(parsed.body)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[&lt;ast.Import object at 0x127acdea0&gt;, &lt;ast.Assign object at 0x127acd960&gt;, &lt;ast.Expr object at 0x127c2ee00&gt;, &lt;ast.Assign object at 0x127c2ed40&gt;, &lt;ast.Expr object at 0x1270ba020&gt;]</code></pre>
</div>
</div>
<p>We can use a library called <code>ast.dump</code> to visualise the tree better.</p>
<div class="cell" data-scrolled="true" data-execution_count="106">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(ast.dump(parsed, indent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Module(
    body=[
        Import(
            names=[
                alias(name='time')]),
        Assign(
            targets=[
                Name(id='start_time', ctx=Store())],
            value=Call(
                func=Attribute(
                    value=Name(id='time', ctx=Load()),
                    attr='time',
                    ctx=Load()),
                args=[],
                keywords=[])),
        Expr(
            value=Call(
                func=Attribute(
                    value=Name(id='time', ctx=Load()),
                    attr='sleep',
                    ctx=Load()),
                args=[
                    Constant(value=1)],
                keywords=[])),
        Assign(
            targets=[
                Name(id='now', ctx=Store())],
            value=Call(
                func=Attribute(
                    value=Name(id='time', ctx=Load()),
                    attr='time',
                    ctx=Load()),
                args=[],
                keywords=[])),
        Expr(
            value=Call(
                func=Name(id='print', ctx=Load()),
                args=[
                    Constant(value='Time spent:'),
                    BinOp(
                        left=Name(id='now', ctx=Load()),
                        op=Sub(),
                        right=Name(id='start_time', ctx=Load()))],
                keywords=[]))],
    type_ignores=[])</code></pre>
</div>
</div>
<p>For example, this is corresponding to <code>start_time = time.time()</code></p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">        Assign(</span>
<span id="cb9-2">            targets<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[</span>
<span id="cb9-3">                Name(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'start_time'</span>, ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Store())],</span>
<span id="cb9-4">            value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Call(</span>
<span id="cb9-5">                func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Attribute(</span>
<span id="cb9-6">                    value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Name(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'time'</span>, ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Load()),</span>
<span id="cb9-7">                    attr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'time'</span>,</span>
<span id="cb9-8">                    ctx<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>Load()),</span>
<span id="cb9-9">                args<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[],</span>
<span id="cb9-10">                keywords<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[]))</span>
<span id="cb9-11">    </span></code></pre></div>
<p>There is one thing that is missing from the snippet, which is the comment. As the interpreter does not care about this information, so it is thrown away during the process. If you care about preserving comments, you may consider <code>CST</code> or other parser which keep the information.</p>
</section>
</section>
<section id="problem---create-flowchart-with-missing-dependencies" class="level1">
<h1>Problem - Create flowchart with missing dependencies</h1>
<p>Consider this pipeline which requires <code>spark</code> as a dependency.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># from nodes.py</span></span>
<span id="cb10-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> spark</span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> my_spark_etl_func():</span>
<span id="cb10-5">    spark...</span></code></pre></div>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># from pipeline.py</span></span>
<span id="cb11-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> kedro.pipeline <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pipeline, node</span>
<span id="cb11-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> .nodes <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> my_spark_etl_func</span>
<span id="cb11-4"></span>
<span id="cb11-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> create_pipeline():</span>
<span id="cb11-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> pipeline(node(my_spark_etl_func,</span>
<span id="cb11-7">                         inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dataset_1"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dataset_2"</span>],</span>
<span id="cb11-8">                         outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output_dataset_1"</span>]</span>
<span id="cb11-9">                        )</span>
<span id="cb11-10">                   )</span></code></pre></div>
<section id="parsing-with-ast" class="level2">
<h2 class="anchored" data-anchor-id="parsing-with-ast">Parsing with AST</h2>
<p>From kedro viz perspective, this is the problematic part because this will cause a <code>ImportError</code>:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> .nodes <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> my_spark_etl_func</span></code></pre></div>
<p>As Kedro-viz does not execute these function, it would be nice if we can parse the second part out and ignore the rest of the file. This is where <code>ast</code> will be useful.</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> create_pipeline():</span>
<span id="cb13-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> pipeline(node(my_spark_etl_func,</span>
<span id="cb13-3">                         inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dataset_1"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dataset_2"</span>],</span>
<span id="cb13-4">                         outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output_dataset_1"</span>]</span>
<span id="cb13-5">                        )</span>
<span id="cb13-6">                   )</span></code></pre></div>
</section>
</section>
<section id="implement-a-kedropipelinefinder-to-find-the-pipeline-defintion" class="level1">
<h1>Implement a KedroPipelineFinder to find the pipeline defintion</h1>
<div class="cell" data-execution_count="194">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">kedro_pipeline_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""from kedro.pipeline import pipeline, node</span></span>
<span id="cb14-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">from .nodes import my_spark_etl_func</span></span>
<span id="cb14-3"></span>
<span id="cb14-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">def create_pipeline():</span></span>
<span id="cb14-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    return pipeline(node(my_spark_etl_func,</span></span>
<span id="cb14-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                         inputs=["dataset_1","dataset_2"],</span></span>
<span id="cb14-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                         outputs=["output_dataset_1"]</span></span>
<span id="cb14-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                        )</span></span>
<span id="cb14-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">                   )"""</span></span></code></pre></div>
</div>
<p><code>ast</code> library provides an useful class <code>ast.NodeVisitor</code>, instead of implementing the entire AST, you only need to implement the relevant part that you care. It implement a method called <code>ast.visit</code>, and you only need to implement the relevant part in your class, i.e.&nbsp;<code>visit_&lt;class_name&gt;</code>. You can find the full list of <code>&lt;class_name&gt;</code> in the <a href="https://docs.python.org/3/library/ast.html#abstract-grammar">AST Grammar</a>.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> FunctionDefPrinter(ast.NodeVisitor):</span>
<span id="cb15-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     def generic_visit(self, node):</span></span>
<span id="cb15-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         print(type(node).__name__)</span></span>
<span id="cb15-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         super().generic_visit(node)</span></span>
<span id="cb15-5"></span>
<span id="cb15-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> visit_Import(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, node):</span>
<span id="cb15-7">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(node.names)</span>
<span id="cb15-8">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"print everytime something is imported"</span>)</span>
<span id="cb15-9"></span>
<span id="cb15-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#         print(dir(node))</span></span>
<span id="cb15-11">v <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FunctionDefPrinter()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="169">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">parsed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ast.parse(snippet)</span>
<span id="cb16-2">v.visit(parsed)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[&lt;ast.alias object at 0x132fec1c0&gt;]
print everytime something is imported</code></pre>
</div>
</div>
<section id="step-1---parsing-function-that-has-a-name-create_pipeline" class="level2">
<h2 class="anchored" data-anchor-id="step-1---parsing-function-that-has-a-name-create_pipeline">Step 1 - Parsing function that has a name <code>create_pipeline</code></h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> KedroPipelineFinder(ast.NodeVisitor):</span>
<span id="cb18-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb18-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pipeline_def <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb18-4"></span>
<span id="cb18-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> generic_visit(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, node):</span>
<span id="cb18-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> ast.NodeVisitor.generic_visit(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,node):</span>
<span id="cb18-7">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Got something!"</span>)</span>
<span id="cb18-8"></span>
<span id="cb18-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> visit_FunctionDef(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, node):</span>
<span id="cb18-10">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> node.name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"create_pipeline"</span>:</span>
<span id="cb18-11">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"found a create_pipeline()"</span>)</span>
<span id="cb18-12">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pipeline_def.append(node)</span>
<span id="cb18-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#             return node</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="209">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">kpf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> KedroPipelineFinder()</span>
<span id="cb19-2">parsed <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ast.parse(kedro_pipeline_text)</span>
<span id="cb19-3">kpf.visit(parsed)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>found a create_pipeline()</code></pre>
</div>
</div>
<div class="cell" data-execution_count="178">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">create_pipeline_def <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parsed.body[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="191">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(ast.dump(create_pipeline_def, indent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>FunctionDef(
    name='create_pipeline',
    args=arguments(
        posonlyargs=[],
        args=[],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
    body=[
        Return(
            value=Call(
                func=Name(id='pipeline', ctx=Load()),
                args=[
                    Call(
                        func=Name(id='node', ctx=Load()),
                        args=[
                            Name(id='my_spark_etl_func', ctx=Load())],
                        keywords=[
                            keyword(
                                arg='inputs',
                                value=List(
                                    elts=[
                                        Constant(value='dataset_1'),
                                        Constant(value='dataset_2')],
                                    ctx=Load())),
                            keyword(
                                arg='outputs',
                                value=List(
                                    elts=[
                                        Constant(value='output_dataset_1')],
                                    ctx=Load()))])],
                keywords=[]))],
    decorator_list=[])</code></pre>
</div>
</div>
</section>
<section id="step-2---build-kedro-pipeline-object" class="level2">
<h2 class="anchored" data-anchor-id="step-2---build-kedro-pipeline-object">Step 2 - Build Kedro Pipeline object</h2>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> KedroPipelineBuilder(ast.NodeVisitor):</span>
<span id="cb24-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, pipeline_def: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>):</span>
<span id="cb24-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.pipeline_def <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline_def</span>
<span id="cb24-4"></span>
<span id="cb24-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> build(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, node):</span>
<span id="cb24-6">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.generic_visit(node)</span>
<span id="cb24-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> ...</span>
<span id="cb24-8"></span>
<span id="cb24-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> visit_Call(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, node):</span>
<span id="cb24-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Assume it is return from a create_pipeline</span></span>
<span id="cb24-11"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        def create_pipeline():</span></span>
<span id="cb24-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">           return pipeline(node(...), node(...), node(...)) or</span></span>
<span id="cb24-13"></span>
<span id="cb24-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">         pipeline object that is imported from other module won't be captured.</span></span>
<span id="cb24-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">       """</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="184">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">create_pipeline_def</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="184">
<pre><code>&lt;ast.FunctionDef at 0x132fb3b20&gt;</code></pre>
</div>
</div>
<div class="cell" data-execution_count="188">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">create_pipeline_def.body[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].value</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="188">
<pre><code>&lt;ast.Call at 0x132fb3bb0&gt;</code></pre>
</div>
</div>
<div class="cell" data-execution_count="220">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">call <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_pipeline_def.body[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].value</span></code></pre></div>
</div>
<div class="cell" data-execution_count="224">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(call.args)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[&lt;ast.Call object at 0x132fb24a0&gt;]</code></pre>
</div>
</div>
<div class="cell" data-execution_count="226">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">call_args <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> call.args</span></code></pre></div>
</div>
<div class="cell" data-execution_count="230">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">i <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="231">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">call_arg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> call_args[i]</span></code></pre></div>
</div>
<div class="cell" data-execution_count="236">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">fun_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> call_arg.args[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span></span></code></pre></div>
</div>
<div class="cell" data-execution_count="238">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">call_arg.args[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="238">
<pre><code>&lt;ast.Name at 0x132fb2a70&gt;</code></pre>
</div>
</div>
<div class="cell" data-execution_count="243">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">ast.unparse(create_pipeline_def)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="243">
<pre><code>"def create_pipeline():\n    return pipeline(node(my_spark_etl_func, inputs=['dataset_1', 'dataset_2'], outputs=['output_dataset_1']))"</code></pre>
</div>
</div>
<div class="cell" data-execution_count="241">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(ast.dump(call_arg, indent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Call(
   func=Name(id='node', ctx=Load()),
   args=[
      Name(id='my_spark_etl_func', ctx=Load())],
   keywords=[
      keyword(
         arg='inputs',
         value=List(
            elts=[
               Constant(value='dataset_1'),
               Constant(value='dataset_2')],
            ctx=Load())),
      keyword(
         arg='outputs',
         value=List(
            elts=[
               Constant(value='output_dataset_1')],
            ctx=Load()))])</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1">inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> call_arg.args</span></code></pre></div>
</div>
<div class="cell" data-execution_count="217">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(ast.dump(create_pipeline_def, indent<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>FunctionDef(
  name='create_pipeline',
  args=arguments(
    posonlyargs=[],
    args=[],
    kwonlyargs=[],
    kw_defaults=[],
    defaults=[]),
  body=[
    Return(
      value=Call(
        func=Name(id='pipeline', ctx=Load()),
        args=[
          Call(
            func=Name(id='node', ctx=Load()),
            args=[
              Name(id='my_spark_etl_func', ctx=Load())],
            keywords=[
              keyword(
                arg='inputs',
                value=List(
                  elts=[
                    Constant(value='dataset_1'),
                    Constant(value='dataset_2')],
                  ctx=Load())),
              keyword(
                arg='outputs',
                value=List(
                  elts=[
                    Constant(value='output_dataset_1')],
                  ctx=Load()))])],
        keywords=[]))],
  decorator_list=[])</code></pre>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>python</category>
  <category>kedro</category>
  <guid>https://noklam.github.io/blog/posts/kedro-viz-parser/2024-07-08-parsing-kedro-pipeline-as-ast.html</guid>
  <pubDate>Sun, 07 Jul 2024 23:00:00 GMT</pubDate>
</item>
<item>
  <title>miniKedro - A minimal Kedro implementation</title>
  <link>https://noklam.github.io/blog/posts/mini_kedro/2024-05-31-miniKedro-in-fify-lines-of-codes.html</link>
  <description><![CDATA[ 




<p>Reimplementing something is one of the best way to learn. Kedro is a data science &amp; data engineer pipeline library at heart. Under the hood, there are few core components such as <code>ConfigLoader</code>, <code>DataCatalog</code>. You may not notice these classes because the framework allows you to use them implicitly without the need to understand how it actually works.</p>
<p>In this blog post, I am going to re-implement Kedro in 50 lines of code. I will start with the classic <code>spaceflights</code> tutorial, By the end of the blog post, you will have an overview of how Kedro works internally.</p>
<section id="installation" class="level2">
<h2 class="anchored" data-anchor-id="installation">Installation</h2>
<p>First, clone this repository and install the module and its dependencies in editable mode - <code>git clone https://github.com/noklam/miniKedro.git</code> - <code>pip install -e .</code></p>
<p>The repository is a simplified version of <code>spaceflights</code>, confirm that you can actually run the pipeline with this command: <code>kedro run</code></p>
</section>
<section id="running-the-pipeline-as-a-script" class="level2">
<h2 class="anchored" data-anchor-id="running-the-pipeline-as-a-script">Running the pipeline as a script</h2>
<p>The goal of this tutorial is replicate the feature of Kedro by slowly introduce new components. We will start with a pure Python script <code>run.py</code> that doesn’t have any Kedro dependencies.</p>
<p>Execute this script with <code>python run.py</code></p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb1-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Start Pipeline"</span>)</span>
<span id="cb1-3">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> minikedro.pipelines.data_processing.nodes <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> (</span>
<span id="cb1-4">        create_model_input_table,</span>
<span id="cb1-5">        preprocess_companies,</span>
<span id="cb1-6">        preprocess_shuttles,</span>
<span id="cb1-7">    )</span>
<span id="cb1-8">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> rich.logging <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> RichHandler</span>
<span id="cb1-9">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> logging</span>
<span id="cb1-10">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-11"></span>
<span id="cb1-12">    logging.basicConfig(</span>
<span id="cb1-13">        level<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>logging.INFO,</span>
<span id="cb1-14">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">format</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%(asctime)s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> - </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%(name)s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> - </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%(levelname)s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> - </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%(message)s</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>,</span>
<span id="cb1-15">        handlers<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[RichHandler()],</span>
<span id="cb1-16">    )</span>
<span id="cb1-17">    logger <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logging.getLogger(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minikedro"</span>)</span>
<span id="cb1-18"></span>
<span id="cb1-19">    companies <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/01_raw/companies.csv"</span>)</span>
<span id="cb1-20">    reviews <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/01_raw/reviews.csv"</span>)</span>
<span id="cb1-21">    shuttles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_excel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/01_raw/shuttles.xlsx"</span>)</span>
<span id="cb1-22"></span>
<span id="cb1-23">    logger.info(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Running preprocess_companies"</span>)</span>
<span id="cb1-24">    processed_companies <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> preprocess_companies(companies)</span>
<span id="cb1-25">    logger.info(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Running preprocess_companies"</span>)</span>
<span id="cb1-26">    processed_shuttles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> preprocess_shuttles(shuttles)</span>
<span id="cb1-27">    logger.info(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Running create_model_input_table"</span>)</span>
<span id="cb1-28">    model_input_table <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_model_input_table(</span>
<span id="cb1-29">        processed_shuttles, processed_companies, reviews</span>
<span id="cb1-30">    )</span></code></pre></div>
<p>Note that we are still importing from <code>minikedro.pipelines.data_processing.nodes</code>, this is not cheating because it is just a collections of Python function and they can be used outside of Kedro pipeline. Let’s focus on this block of code first:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">    companies <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/01_raw/companies.csv"</span>)</span>
<span id="cb2-2">    reviews <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/01_raw/reviews.csv"</span>)</span>
<span id="cb2-3">    shuttles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_excel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data/01_raw/shuttles.xlsx"</span>)</span>
<span id="cb2-4"></span>
<span id="cb2-5">    logger.info(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Running preprocess_companies"</span>)</span>
<span id="cb2-6">    processed_companies <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> preprocess_companies(companies)</span>
<span id="cb2-7">    logger.info(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Running preprocess_companies"</span>)</span>
<span id="cb2-8">    processed_shuttles <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> preprocess_shuttles(shuttles)</span>
<span id="cb2-9">    logger.info(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Running create_model_input_table"</span>)</span>
<span id="cb2-10">    model_input_table <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_model_input_table(</span>
<span id="cb2-11">        processed_shuttles, processed_companies, reviews</span>
<span id="cb2-12">    )</span></code></pre></div>
<p>The code is actually decently structured already, the first 3 lines of code prepare the data, after that there is a few function calls to chain these functions together.</p>
</section>
<section id="start-of-the-journey---step-1-extract-data-configuration" class="level2">
<h2 class="anchored" data-anchor-id="start-of-the-journey---step-1-extract-data-configuration">Start of the Journey - Step 1: Extract data configuration</h2>
<p>You can find the scripts and corresponding code in https://github.com/noklam/miniKedro/blob/main/run_v1.py. For step two, simply change the <code>v1</code> to <code>v2</code></p>
<p>This is the change: <img src="https://noklam.github.io/blog/posts/mini_kedro/images/diff_v1.png" class="img-fluid" alt="diff v1"></p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> UserDict</span>
<span id="cb3-2"></span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> ConfigLoader(UserDict): ...</span></code></pre></div>
<p>First, we extract the configuration into a dictionary, and introduce a dictionary-like class called <code>ConfigLoader</code></p>
</section>
<section id="step-2---replace-shared-config-with-templated-value" class="level2">
<h2 class="anchored" data-anchor-id="step-2---replace-shared-config-with-templated-value">Step 2 - Replace shared config with templated value</h2>
<p>After extracting the configuration into <code>config</code>, notice that many of the filepath shared a similar pattern. It may make sense to extract that as a variable <code>_base_folder</code> so that it can be easily configure to be something else later (i.e.&nbsp;a s3 bucket).</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://noklam.github.io/blog/posts/mini_kedro/images/diff_v2.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">diff_v2</figcaption>
</figure>
</div>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> ConfigLoader(UserDict):</span>
<span id="cb4-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>):</span>
<span id="cb4-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> OmegaConf.create(data)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># New</span></span></code></pre></div>
<p>We introduce <code>OmegaConf</code> to support template value like <code>${_base_folder}</code> The idea is simple, all the value of <code>${_base_folder}</code> will be substituted as <code>data</code>. Kedro also support a lot more advance configuration feature, which you can find in the <a href="https://docs.kedro.org/en/stable/configuration/advanced_configuration.html">documentation</a>.</p>
</section>
<section id="step-3---introducing-datacatalog" class="level2">
<h2 class="anchored" data-anchor-id="step-3---introducing-datacatalog">Step 3 - Introducing <code>DataCatalog</code></h2>
<p>The next thing that we will do is to introduce the <code>DataCatalog</code> class. The <code>DataCatalog</code> class and <code>Dataset</code>. A <code>Dataset</code> is something that can <code>save</code> and <code>load</code>, and a <code>DataCatalog</code> is a container of a collections of <code>Dataset</code>(s). Here we leverage the fact that Kedro already has a lot of existing data connectors in <code>kedro-datasets</code>.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> AbstractDataset:</span>
<span id="cb5-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> load(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb5-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">NotImplementedError</span></span>
<span id="cb5-4"></span>
<span id="cb5-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> save(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, data):</span>
<span id="cb5-6">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">NotImplementedError</span></span>
<span id="cb5-7"></span>
<span id="cb5-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> DataCatalog:</span>
<span id="cb5-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, config_catalog: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>):</span>
<span id="cb5-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.datasets <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb5-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> dataset_name, config <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> config_catalog.items():</span>
<span id="cb5-12">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(dataset_name, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> dataset_name.startswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>):</span>
<span id="cb5-13">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">continue</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># skip template value</span></span>
<span id="cb5-14">            module <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> config.pop(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pandas.CSVDataset</span></span>
<span id="cb5-15"></span>
<span id="cb5-16">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># CSVDataset(**config) in code</span></span>
<span id="cb5-17">            mod, dataset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> module.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># pandas, CSVDataset</span></span>
<span id="cb5-18">            mod <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> importlib.import_module(</span>
<span id="cb5-19">                <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"kedro_datasets.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>mod<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb5-20">            )  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># kedro_datasets.pandas (module)</span></span>
<span id="cb5-21">            class_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">getattr</span>(mod, dataset)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># kedro_datasets.pandas.CSVDataset</span></span>
<span id="cb5-22">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.datasets[dataset_name] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> class_(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>config)</span>
<span id="cb5-23"></span>
<span id="cb5-24">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> load(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, dataset_name):</span>
<span id="cb5-25">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.datasets[dataset_name].load()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># CSVDataset.load()</span></span></code></pre></div>
<p>We introduced quite a lot of code here, but most of them are just parsing logic. What’s happening here is that the <code>DataCatalog</code> takes some configurations, and instantiate <code>Dataset</code> class from it.</p>
<p>We can now replaced all the <code>pd</code> call with the <code>DataCatalog</code> instead: <img src="https://noklam.github.io/blog/posts/mini_kedro/images/diff_v3.png" class="img-fluid" alt="diff_v3"></p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;plaintext&quot;}">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Step 4 - Saving data with `DataCatalog`</span></span>
<span id="cb6-2"></span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>[diff_v4](images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>diff_v4.png)</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;plaintext&quot;}">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Step 5 - Extracting configuration again, this time for the functions</span></span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>[diff_v5](images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>diff_v5.png)</span></code></pre></div>
</div>
</section>
<section id="step-6---iterating-through-the-steps" class="level2">
<h2 class="anchored" data-anchor-id="step-6---iterating-through-the-steps">Step 6 - Iterating through the <code>steps</code></h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://noklam.github.io/blog/posts/mini_kedro/images/diff_v6.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">diff_v6</figcaption>
</figure>
</div>
</section>
<section id="step-7---pipeline-and-node-as-a-thin-wrapper" class="level2">
<h2 class="anchored" data-anchor-id="step-7---pipeline-and-node-as-a-thin-wrapper">Step 7 - <code>pipeline</code> and <code>node</code> as a thin wrapper</h2>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;plaintext&quot;}">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Step 8 - Replace functions with `node` and `pipeline`</span></span>
<span id="cb8-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>[diff_v8](images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>diff_v8.png)</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;plaintext&quot;}">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Step 9 - Extend Kedro with Hooks</span></span>
<span id="cb9-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>[diff_v9](images<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>diff_v9.png)</span></code></pre></div>
</div>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>We finish this with <a href="https://github.com/noklam/miniKedro/blob/main/src/minikedro/v9/__init__.py">about 50 lines of code</a> (ignore newline), and a library that looks very similar to Kedro. We have implemented a few components like: - <a href="https://docs.kedro.org/en/stable/configuration/index.html"><code>ConfigLoader</code></a> - <a href="https://docs.kedro.org/en/stable/data/index.html"><code>DataCatalog</code></a> - <a href="https://docs.kedro.org/en/stable/hooks/index.html"><code>Hook</code></a> - <a href="https://docs.kedro.org/en/stable/nodes_and_pipelines/index.html"><code>pipeline</code> and <code>node</code></a></p>


</section>

 ]]></description>
  <category>python</category>
  <category>kedro</category>
  <category>databricks</category>
  <guid>https://noklam.github.io/blog/posts/mini_kedro/2024-05-31-miniKedro-in-fify-lines-of-codes.html</guid>
  <pubDate>Thu, 30 May 2024 23:00:00 GMT</pubDate>
</item>
<item>
  <title>How to save or load data using Kedro classes directly?</title>
  <link>https://noklam.github.io/blog/posts/kedro_data_catalog/2024-03-26-Kedro-Catalog-Explained.html</link>
  <description><![CDATA[ 




<p>The first answer that you may get is to use the data catalog, but what really is data catalog? Some may say it is the <code>catalog.yml</code>, other may mentions the <code>DataCatalog</code> class. They are both true but it lacks a bit of context.</p>
<p>Let’s focus on “how” to load or save data in a Kedro Project.</p>
<section id="create-a-kedro-node" class="level2">
<h2 class="anchored" data-anchor-id="create-a-kedro-node">Create a Kedro Node</h2>
<p>First, we need a Python function that takes some inputs and outputs:</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> dummy_func():</span>
<span id="cb1-4">    df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame([{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"foo"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bar"</span>}])</span>
<span id="cb1-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># df.to_csv("my_data.csv") # You don't need to save it explicitly</span></span>
<span id="cb1-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> df</span></code></pre></div>
</div>
<p>This function takes no input but produces a DataFrame, how does Kedro know how to save this data? In Kedro, it uses <code>Node</code> instead of function. A Node is a Python function + inputs + outputs. The inputs and outputs is merely a name of the data rather than the actual object.</p>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> kedro.pipeline <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> node, pipeline</span>
<span id="cb2-2"></span>
<span id="cb2-3">dummy_node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node(func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dummy_func, inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my_data"</span>)</span></code></pre></div>
</div>
<p>You can call the node directly, but it’s not necessary because it is handled by Kedro Runner and Kedro Pipeline.</p>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">dummy_func()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="6">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">foo</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>bar</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> dummy_node()</span>
<span id="cb4-2">result</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="7">
<pre><code>{'my_data':    foo
 0  bar}</code></pre>
</div>
</div>
<p>It saves the DataFrame inside a dictionary with the key “my_data” (the outputs defined in node).</p>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my_data"</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="14">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">foo</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>bar</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">pd.testing.assert_frame_equal(result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my_data"</span>], dummy_func()) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># assertion pass</span></span></code></pre></div>
</div>
</section>
<section id="using-the-datacatalog-class-in-a-python-file" class="level2">
<h2 class="anchored" data-anchor-id="using-the-datacatalog-class-in-a-python-file">Using the <code>DataCatalog</code> class in a Python file</h2>
<p>The last step is to save it as a file, which is where the <a href="https://docs.kedro.org/en/latest/data/data_catalog.html"><code>DataCatalog</code> or <code>catalog.yml</code></a> comes into the picture.</p>
<div class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> kedro.io <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DataCatalog</span>
<span id="cb8-2"></span>
<span id="cb8-3">catalog_config <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my_data"</span>:</span>
<span id="cb8-4">                        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pandas.CSVDataset"</span>,</span>
<span id="cb8-5">                         <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"filepath"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my_csv.csv"</span>}</span>
<span id="cb8-6">                        }</span>
<span id="cb8-7">catalog <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataCatalog.from_config(catalog_config)</span>
<span id="cb8-8">catalog.save( <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my_data"</span>, result[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my_data"</span>])</span></code></pre></div>
</div>
<p>We can check if the data is saved correctly:</p>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my_csv.csv"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">foo</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>bar</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Or use DataCatalog</span></span>
<span id="cb10-2">catalog.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my_data"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">foo</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>bar</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="construct-the-datacatalog-class-with-catalog.yml" class="level2">
<h2 class="anchored" data-anchor-id="construct-the-datacatalog-class-with-catalog.yml">Construct the <code>DataCatalog</code> class with <code>catalog.yml</code></h2>
<p>Going back to this, <code>catalog.yml</code> is merely <code>catalog_config</code> but written in YAML.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">catalog_config <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my_data"</span>:</span>
<span id="cb11-2">                        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pandas.CSVDataset"</span>,</span>
<span id="cb11-3">                         <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"filepath"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my_csv.csv"</span>}</span>
<span id="cb11-4">                        }</span>
<span id="cb11-5">catalog <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataCatalog.from_config(catalog_config)</span></code></pre></div>
</div>
<p>We can replace the dictionary with <code>catalog.yml</code>.</p>
<div class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Usually defined in a catalog.yml file</span></span>
<span id="cb12-2">catalog_yml <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb12-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">my_data:</span></span>
<span id="cb12-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  type: pandas.CSVDataset</span></span>
<span id="cb12-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  filepath: my_csv.csv</span></span>
<span id="cb12-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb12-7"></span>
<span id="cb12-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> yaml</span>
<span id="cb12-9">catalog_config <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> yaml.safe_load(catalog_yml)</span>
<span id="cb12-10">new_catalog <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataCatalog.from_config(catalog_config)</span></code></pre></div>
</div>
</section>
<section id="summary" class="level1">
<h1>Summary</h1>
<p>These abstractions are usually hidden from the end users. You do not need to use the <code>DataCatalog</code> if you are working with a Kedro Project. Behind the scenes, this is what happens.</p>
<ol type="1">
<li>Function signature (and outputs) are mapped according to the node definition.</li>
<li><code>DataCatalog</code> loads the data according to their name, and look that up from <code>catalog.yml</code> to figure out whether it should be load from a CSV or a parquet file</li>
</ol>
<section id="bonus---kedro-runner" class="level2">
<h2 class="anchored" data-anchor-id="bonus---kedro-runner">Bonus - Kedro Runner</h2>
<p>There is one important component missing in this article, the <a href="https://docs.kedro.org/en/stable/nodes_and_pipelines/run_a_pipeline.html#runners">Kedro Runner</a>. During a <code>kedro run</code>, the <code>Runner</code> decide the order of executing the node, request data from <code>DataCatalog</code>, and save data with <code>DataCatalog</code>. The pseudocode of a <code>kedro run</code> is roughly like this:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> node <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> nodes:</span>
<span id="cb13-2">    run_node(node, catalog)</span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run_node(node, catalog):</span>
<span id="cb13-5">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Prepare Data</span></span>
<span id="cb13-6">    inputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb13-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> name <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> node.inputs:</span>
<span id="cb13-8">        inputs[name] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> catalog.load(name)</span>
<span id="cb13-9"></span>
<span id="cb13-10">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Execute Node</span></span>
<span id="cb13-11">    outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node.run(inputs)</span>
<span id="cb13-12"></span>
<span id="cb13-13">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Save Data</span></span>
<span id="cb13-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> name <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> node.outputs:</span>
<span id="cb13-15">        catalog.save(outputs[name], name)</span></code></pre></div>


</section>
</section>

 ]]></description>
  <category>python</category>
  <category>kedro</category>
  <guid>https://noklam.github.io/blog/posts/kedro_data_catalog/2024-03-26-Kedro-Catalog-Explained.html</guid>
  <pubDate>Tue, 26 Mar 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Kedro Pipeline (1) - Slicing Pipeline Effortlessly 🍕</title>
  <link>https://noklam.github.io/blog/posts/kedro-pipeline-slicing-pipeline/2024-03-06-Kedro-Pipeline-Slicing-Pipeline.html</link>
  <description><![CDATA[ 




<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> kedro.pipeline <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pipeline, node</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> kedro.pipeline.node <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Node</span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> foo():</span>
<span id="cb1-4">   <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bar"</span></span></code></pre></div>
</div>
<section id="kedro-node-and-pipelines" class="level1">
<h1>Kedro Node and Pipelines</h1>
<p>Kedro introduces the concepts of Nodes and Pipelines. A basic understanding of these concepts is assumed. However, if you’re unfamiliar, you can refer to the Nodes and Pipelines documentation for more details.</p>
<p>In essence, a Kedro Node acts as a thin wrapper around a Python function, specifying its inputs and outputs. On the other hand, a Pipeline is essentially a collection of Nodes that are strung together. When a pipeline is executed, Kedro resolves the dependencies between nodes to determine the correct order of execution.</p>
<p>While Kedro is primarily designed for data and machine learning applications, it can be utilized for executing any sequential tasks, including parallel processing if needed.</p>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">node_a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node(func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>foo, inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output_a"</span>)</span>
<span id="cb2-2">first_pipeline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline([])</span>
<span id="cb2-3">node_a, first_pipeline</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<pre><code>(Node(foo, None, 'output_a', None), Pipeline([]))</code></pre>
</div>
</div>
<p><code>pipeline</code> is a factory method that expects a list of <code>Node</code> and produce the <code>Pipeline</code> object. In this example, we have an empty <code>Pipeline</code>. Below is another valid example:</p>
<div class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">pipeline([node_a])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="26">
<pre><code>Pipeline([
Node(foo, None, 'output_a', None)
])</code></pre>
</div>
</div>
<section id="node-uniqueness" class="level2">
<h2 class="anchored" data-anchor-id="node-uniqueness">Node Uniqueness</h2>
<p>The pipeline in Kedro automatically validates Node instances. Specifically, nodes cannot produce the same output (though they can share the same input), and there cannot be duplicate nodes within the pipeline. This validation is crucial to ensure that the pipeline forms an executable Directed Acyclic Graph (DAG), allowing for proper execution and preventing any cyclic dependencies.</p>
<div class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">pipeline([node_a, node_a])</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>ValueError: Pipeline nodes must have unique names. The following node names appear more than once:

Free nodes:
  - foo(None) -&gt; [output_a]

You can name your nodes using the last argument of 'node()'.</code></pre>
</div>
</div>
<p>On the other hand, <code>Node</code> are considered equal if they have the same <code>inputs</code>, <code>outputs</code>and <code>function</code> (and node name if provided, it is an optional argument)</p>
<div class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">node_b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node(foo, inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output_a"</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">node_b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> node_a</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="34">
<pre><code>True</code></pre>
</div>
</div>
<p>Internally, it is comparing the <code>name</code> attribute, which is a combination of namespace, function name, inputs and outputs. This is not important to most Kedro users and are only used by Kedro internally.</p>
<div class="cell" data-execution_count="42">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">node_a.name</span>
<span id="cb11-2"></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="42">
<pre><code>'foo(None) -&gt; [output_a]'</code></pre>
</div>
</div>
<div class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">Node.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__str__</span>??</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Signature: Node.__str__(self)
Docstring: Return str(self).
Source:   
    def __str__(self):
        def _set_to_str(xset):
            return f"[{','.join(xset)}]"

        out_str = _set_to_str(self.outputs) if self._outputs else "None"
        in_str = _set_to_str(self.inputs) if self._inputs else "None"

        prefix = self._name + ": " if self._name else ""
        return prefix + f"{self._func_name}({in_str}) -&gt; {out_str}"
File:      ~/miniconda3/envs/blog/lib/python3.10/site-packages/kedro/pipeline/node.py
Type:      function</code></pre>
</div>
</div>
</section>
<section id="pipeline-arithmetic" class="level2">
<h2 class="anchored" data-anchor-id="pipeline-arithmetic">Pipeline Arithmetic</h2>
<p>The closest analogy to <code>Pipeline</code> is the Python <code>set</code>. They share simliary characteristics: - The elements cannot be repeated. - Pipelines can be added or subtracted</p>
<div class="cell" data-execution_count="53">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">pipeline([node_a]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pipeline([node_a])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="53">
<pre><code>Pipeline([
Node(foo, None, 'output_a', None)
])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="59">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node(foo, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>)</span>
<span id="cb17-2">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node(foo, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>)</span>
<span id="cb17-3">c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node(foo, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>)</span>
<span id="cb17-4">d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node(foo, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>)</span>
<span id="cb17-5"></span>
<span id="cb17-6">original_set <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>])</span>
<span id="cb17-7">original_pipeline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline([a,b,c])</span></code></pre></div>
</div>
<div class="cell" data-execution_count="67">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">pipeline([a]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pipeline([b])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="67">
<pre><code>Pipeline([
Node(foo, None, 'a', None),
Node(foo, None, 'b', None)
])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="69">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">pipeline([a, b]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> pipeline([b])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="69">
<pre><code>Pipeline([
Node(foo, None, 'a', None)
])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="72">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">pipeline([a, b]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> pipeline([a])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="72">
<pre><code>Pipeline([
Node(foo, None, 'b', None)
])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="60">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">original_set<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="60">
<pre><code>{'a', 'b', 'c', 'd'}</code></pre>
</div>
</div>
<div class="cell" data-execution_count="61">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">pipeline([a,b,c])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> pipeline([b,c,d]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># nodes in both pipelines</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="61">
<pre><code>Pipeline([
Node(foo, None, 'a', None),
Node(foo, None, 'b', None),
Node(foo, None, 'c', None),
Node(foo, None, 'd', None)
])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="57">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">original_set <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="57">
<pre><code>{'b', 'c'}</code></pre>
</div>
</div>
<div class="cell" data-execution_count="62">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">pipeline([a,b,c]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> pipeline([b,c,d]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># only nodes that exist in both pipelines</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="62">
<pre><code>Pipeline([
Node(foo, None, 'b', None),
Node(foo, None, 'c', None)
])</code></pre>
</div>
</div>
<p>Pipeline arithmetic is more useful for pipeline registration i.e.&nbsp;<code>pipeline_registry.py</code>. For example, you can combine your development pipeline and inference pipeline in different way.</p>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> fake_node(name):</span>
<span id="cb32-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> node(foo, inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>name, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>name)</span>
<span id="cb32-3"></span>
<span id="cb32-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For simplicaition, let's assume each pipeline is just one single node.</span></span>
<span id="cb32-5">spark_pipeline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline([fake_node(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"spark"</span>)])</span>
<span id="cb32-6">feature_engineering <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline([fake_node(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature_engineering"</span>)])</span>
<span id="cb32-7">model_training <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline([fake_node(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"model_pipeline"</span>)])</span>
<span id="cb32-8">inference <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline([fake_node(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inference"</span>)])</span></code></pre></div>
</div>
<p>With 4 base pipelines, you can combined them in different ways. For example you want a e2e pipeline which add all of them.</p>
<div class="cell" data-execution_count="78">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">e2e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spark_pipeline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> feature_engineering <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> model_training <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> inference</span></code></pre></div>
</div>
<p>You can also have a <code>local</code> pipeline that skip only the <code>spark</code> pipeline.</p>
<div class="cell" data-execution_count="80">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">local <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> e2e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> spark_pipeline</span>
<span id="cb34-2">local</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="80">
<pre><code>Pipeline([
Node(foo, None, 'feature_engineering', 'feature_engineering'),
Node(foo, None, 'inference', 'inference'),
Node(foo, None, 'model_pipeline', 'model_pipeline')
])</code></pre>
</div>
</div>
</section>
<section id="advance-pipeline-slicing" class="level2">
<h2 class="anchored" data-anchor-id="advance-pipeline-slicing">Advance Pipeline Slicing</h2>
<p>Kedro provides an <a href="https://demo.kedro.org/">interaction visualisation</a> that you can play around with, for this post I am gonna stick with the demo project and explains concepts about Pipeline and how you can slice pipeline and compose them.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#hide</span></span>
<span id="cb36-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>load_ext kedro.ipython</span>
<span id="cb36-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>cd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>Users<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>Nok_Lam_Chan<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>kedro<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>viz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>demo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>project</span></code></pre></div>
</div>
<div class="cell" data-execution_count="38">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>reload_kedro <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>Users<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>Nok_Lam_Chan<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>kedro<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>viz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>demo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>project</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">[03/07/24 14:02:54] </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Reached after_catalog_created hook                                        <a href="file:///Users/Nok_Lam_Chan/dev/kedro/features/steps/test_plugin/plugin.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">plugin.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/dev/kedro/features/steps/test_plugin/plugin.py#15" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">15</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Kedro project modular-spaceflights                                     <a href="file:///Users/Nok_Lam_Chan/dev/kedro/kedro/ipython/__init__.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">__init__.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/dev/kedro/kedro/ipython/__init__.py#134" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">134</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Defined global variable <span style="color: #008000; text-decoration-color: #008000">'context'</span>, <span style="color: #008000; text-decoration-color: #008000">'session'</span>, <span style="color: #008000; text-decoration-color: #008000">'catalog'</span> and            <a href="file:///Users/Nok_Lam_Chan/dev/kedro/kedro/ipython/__init__.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">__init__.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/dev/kedro/kedro/ipython/__init__.py#135" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">135</span></a>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>         <span style="color: #008000; text-decoration-color: #008000">'pipelines'</span>                                                            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">               </span>
</pre>
</div>
</div>
<p>By using the <code>reload_kedro</code> inside a notebook, you can access the project <code>pipelines</code> object. Let’s say I want to filter out the <a href="https://demo.kedro.org/?pipeline_id=__default__&amp;selected_id=04ba733a">highlighted pipeline</a> like this (click on the “Create Derived Features”): <img src="https://noklam.github.io/blog/posts/kedro-pipeline-slicing-pipeline/kedro-viz-selection.png" class="img-fluid" alt="Select a node on kedro-viz"></p>
<p>To filter this with the <code>Pipeline</code> API, you need two options. <code>from-nodes</code>(downstream) and <code>to-nodes</code> (upstream).</p>
<div class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">pipelines.keys()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="39">
<div class="ansi-escaped-output">
<pre><span class="ansi-magenta-fg ansi-bold">dict_keys</span><span class="ansi-bold">(</span><span class="ansi-bold">[</span><span class="ansi-green-fg">'__default__'</span>, <span class="ansi-green-fg">'Data ingestion'</span>, <span class="ansi-green-fg">'Modelling stage'</span>, <span class="ansi-green-fg">'Feature engineering'</span>, <span class="ansi-green-fg">'Reporting stage'</span>, <span class="ansi-green-fg">'Pre-modelling'</span><span class="ansi-bold">]</span><span class="ansi-bold">)</span></pre>
</div>
</div>
</div>
<div class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">full_pipeline</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="40">
<div class="ansi-escaped-output">

<pre><span class="ansi-magenta-fg ansi-bold">Pipeline</span><span class="ansi-bold">(</span><span class="ansi-bold">[</span>
<span class="ansi-magenta-fg ansi-bold">Node</span><span class="ansi-bold">(</span>apply_types_to_companies, <span class="ansi-green-fg">'companies'</span>, <span class="ansi-green-fg">'ingestion.int_typed_companies'</span>, <span class="ansi-green-fg">'apply_types_to_companies'</span><span class="ansi-bold">)</span>,
<span class="ansi-magenta-fg ansi-bold">Node</span><span class="ansi-bold">(</span>apply_types_to_reviews, <span class="ansi-bold">[</span><span class="ansi-green-fg">'reviews'</span>, <span class="ansi-green-fg">'params:ingestion.typing.reviews.columns_as_floats'</span><span class="ansi-bold">]</span>, <span class="ansi-green-fg">'ingestion.int_typed_reviews'</span>, <span class="ansi-green-fg">'apply_types_to_reviews'</span><span class="ansi-bold">)</span>,
<span class="ansi-magenta-fg ansi-bold">Node</span><span class="ansi-bold">(</span>apply_types_to_shuttles, <span class="ansi-green-fg">'shuttles'</span>, <span class="ansi-green-fg">'ingestion.int_typed_shuttles@pandas1'</span>, <span class="ansi-green-fg">'apply_types_to_shuttles'</span><span class="ansi-bold">)</span>,
<span class="ansi-magenta-fg ansi-bold">Node</span><span class="ansi-bold">(</span>aggregate_company_data, <span class="ansi-green-fg">'ingestion.int_typed_companies'</span>, <span class="ansi-green-fg">'ingestion.prm_agg_companies'</span>, <span class="ansi-green-fg">'company_agg'</span><span class="ansi-bold">)</span>,
<span class="ansi-magenta-fg ansi-bold">Node</span><span class="ansi-bold">(</span>combine_shuttle_level_information, <span class="ansi-bold">{</span><span class="ansi-green-fg">'shuttles'</span>: <span class="ansi-green-fg">'ingestion.int_typed_shuttles@pandas2'</span>, <span class="ansi-green-fg">'reviews'</span>: <span class="ansi-green-fg">'ingestion.int_typed_reviews'</span>, <span class="ansi-green-fg">'companies'</span>: <span class="ansi-green-fg">'ingestion.prm_agg_companies'</span><span class="ansi-bold">}</span>, <span class="ansi-bold">[</span><span class="ansi-green-fg">'prm_shuttle_company_reviews'</span>, <span class="ansi-green-fg">'prm_spine_table'</span><span class="ansi-bold">]</span>, <span class="ansi-green-fg">'combine_step'</span><span class="ansi-bold">)</span>,
<span class="ansi-magenta-fg ansi-bold">Node</span><span class="ansi-bold">(</span>create_derived_features, <span class="ansi-bold">[</span><span class="ansi-green-fg">'prm_spine_table'</span>, <span class="ansi-green-fg">'prm_shuttle_company_reviews'</span>, <span class="ansi-green-fg">'params:feature_engineering.feature.derived'</span><span class="ansi-bold">]</span>, <span class="ansi-green-fg">'feature_engineering.feat_derived_features'</span>, <span class="ansi-green-fg">'create_derived_features'</span><span class="ansi-bold">)</span>,
<span class="ansi-magenta-fg ansi-bold">Node</span><span class="ansi-bold">(</span>create_feature_importance, <span class="ansi-green-fg">'prm_spine_table'</span>, <span class="ansi-green-fg">'feature_importance_output'</span>, <span style="font-style:italic" class="ansi-magenta-fg">None</span><span class="ansi-bold">)</span>,
<span class="ansi-magenta-fg ansi-bold">Node</span><span class="ansi-bold">(</span>create_static_features, <span class="ansi-bold">[</span><span class="ansi-green-fg">'prm_shuttle_company_reviews'</span>, <span class="ansi-green-fg">'params:feature_engineering.feature.static'</span><span class="ansi-bold">]</span>, <span class="ansi-green-fg">'feature_engineering.feat_static_features'</span>, <span style="font-style:italic" class="ansi-magenta-fg">None</span><span class="ansi-bold">)</span>,
<span class="ansi-magenta-fg ansi-bold">Node</span><span class="ansi-bold">(</span><span class="ansi-bold">&lt;</span><span class="ansi-bright-magenta-fg ansi-bold">lambda</span><span class="ansi-bold">&gt;</span>, <span class="ansi-green-fg">'prm_spine_table'</span>, <span class="ansi-green-fg">'ingestion.prm_spine_table_clone'</span>, <span style="font-style:italic" class="ansi-magenta-fg">None</span><span class="ansi-bold">)</span>,
<span class="ansi-magenta-fg ansi-bold">Node</span><span class="ansi-bold">(</span>create_matplotlib_chart, <span class="ansi-green-fg">'prm_shuttle_company_reviews'</span>, <span class="ansi-green-fg">'reporting.confusion_matrix'</span>, <span style="font-style:italic" class="ansi-magenta-fg">None</span><span class="ansi-bold">)</span>,
<span class="ansi-yellow-fg">...</span>
<span class="ansi-bold">]</span><span class="ansi-bold">)</span></pre>
</div>
</div>
</div>
<div class="cell" data-execution_count="42">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">node_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature_engineering.create_derived_features"</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make s|apipeline</span></span>
<span id="cb40-2">full_pipeline.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(from_nodes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[node_name], to_nodes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[node_name])</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="42">
<div class="ansi-escaped-output">

<pre><span class="ansi-magenta-fg ansi-bold">Pipeline</span><span class="ansi-bold">(</span><span class="ansi-bold">[</span>
<span class="ansi-magenta-fg ansi-bold">Node</span><span class="ansi-bold">(</span>create_derived_features, <span class="ansi-bold">[</span><span class="ansi-green-fg">'prm_spine_table'</span>, <span class="ansi-green-fg">'prm_shuttle_company_reviews'</span>, <span class="ansi-green-fg">'params:feature_engineering.feature.derived'</span><span class="ansi-bold">]</span>, <span class="ansi-green-fg">'feature_engineering.feat_derived_features'</span>, <span class="ansi-green-fg">'create_derived_features'</span><span class="ansi-bold">)</span>
<span class="ansi-bold">]</span><span class="ansi-bold">)</span></pre>
</div>
</div>
</div>
<p>This only select one node because by default the <code>filter</code> method apply both method as an <code>and</code> condition. So we need to apply the <code>filter</code> method separately.</p>
<div class="cell" data-execution_count="45">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">full_pipeline.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(from_nodes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[node_name]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> full_pipeline.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(to_nodes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[node_name])</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="45">
<div class="ansi-escaped-output">

<pre><span class="ansi-magenta-fg ansi-bold">Pipeline</span><span class="ansi-bold">(</span><span class="ansi-bold">[</span>
<span class="ansi-magenta-fg ansi-bold">Node</span><span class="ansi-bold">(</span>apply_types_to_companies, <span class="ansi-green-fg">'companies'</span>, <span class="ansi-green-fg">'ingestion.int_typed_companies'</span>, <span class="ansi-green-fg">'apply_types_to_companies'</span><span class="ansi-bold">)</span>,
<span class="ansi-magenta-fg ansi-bold">Node</span><span class="ansi-bold">(</span>apply_types_to_reviews, <span class="ansi-bold">[</span><span class="ansi-green-fg">'reviews'</span>, <span class="ansi-green-fg">'params:ingestion.typing.reviews.columns_as_floats'</span><span class="ansi-bold">]</span>, <span class="ansi-green-fg">'ingestion.int_typed_reviews'</span>, <span class="ansi-green-fg">'apply_types_to_reviews'</span><span class="ansi-bold">)</span>,
<span class="ansi-magenta-fg ansi-bold">Node</span><span class="ansi-bold">(</span>apply_types_to_shuttles, <span class="ansi-green-fg">'shuttles'</span>, <span class="ansi-green-fg">'ingestion.int_typed_shuttles@pandas1'</span>, <span class="ansi-green-fg">'apply_types_to_shuttles'</span><span class="ansi-bold">)</span>,
<span class="ansi-magenta-fg ansi-bold">Node</span><span class="ansi-bold">(</span>aggregate_company_data, <span class="ansi-green-fg">'ingestion.int_typed_companies'</span>, <span class="ansi-green-fg">'ingestion.prm_agg_companies'</span>, <span class="ansi-green-fg">'company_agg'</span><span class="ansi-bold">)</span>,
<span class="ansi-magenta-fg ansi-bold">Node</span><span class="ansi-bold">(</span>combine_shuttle_level_information, <span class="ansi-bold">{</span><span class="ansi-green-fg">'shuttles'</span>: <span class="ansi-green-fg">'ingestion.int_typed_shuttles@pandas2'</span>, <span class="ansi-green-fg">'reviews'</span>: <span class="ansi-green-fg">'ingestion.int_typed_reviews'</span>, <span class="ansi-green-fg">'companies'</span>: <span class="ansi-green-fg">'ingestion.prm_agg_companies'</span><span class="ansi-bold">}</span>, <span class="ansi-bold">[</span><span class="ansi-green-fg">'prm_shuttle_company_reviews'</span>, <span class="ansi-green-fg">'prm_spine_table'</span><span class="ansi-bold">]</span>, <span class="ansi-green-fg">'combine_step'</span><span class="ansi-bold">)</span>,
<span class="ansi-magenta-fg ansi-bold">Node</span><span class="ansi-bold">(</span>create_derived_features, <span class="ansi-bold">[</span><span class="ansi-green-fg">'prm_spine_table'</span>, <span class="ansi-green-fg">'prm_shuttle_company_reviews'</span>, <span class="ansi-green-fg">'params:feature_engineering.feature.derived'</span><span class="ansi-bold">]</span>, <span class="ansi-green-fg">'feature_engineering.feat_derived_features'</span>, <span class="ansi-green-fg">'create_derived_features'</span><span class="ansi-bold">)</span>,
<span class="ansi-magenta-fg ansi-bold">Node</span><span class="ansi-bold">(</span>joiner, <span class="ansi-bold">[</span><span class="ansi-green-fg">'prm_spine_table'</span>, <span class="ansi-green-fg">'feature_engineering.feat_static_features'</span>, <span class="ansi-green-fg">'feature_engineering.feat_derived_features'</span><span class="ansi-bold">]</span>, <span class="ansi-green-fg">'model_input_table'</span>, <span style="font-style:italic" class="ansi-magenta-fg">None</span><span class="ansi-bold">)</span>,
<span class="ansi-magenta-fg ansi-bold">Node</span><span class="ansi-bold">(</span>split_data, <span class="ansi-bold">[</span><span class="ansi-green-fg">'model_input_table'</span>, <span class="ansi-green-fg">'params:split_options'</span><span class="ansi-bold">]</span>, <span class="ansi-bold">[</span><span class="ansi-green-fg">'X_train'</span>, <span class="ansi-green-fg">'X_test'</span>, <span class="ansi-green-fg">'y_train'</span>, <span class="ansi-green-fg">'y_test'</span><span class="ansi-bold">]</span>, <span style="font-style:italic" class="ansi-magenta-fg">None</span><span class="ansi-bold">)</span>,
<span class="ansi-magenta-fg ansi-bold">Node</span><span class="ansi-bold">(</span>train_model, <span class="ansi-bold">[</span><span class="ansi-green-fg">'X_train'</span>, <span class="ansi-green-fg">'y_train'</span>, <span class="ansi-green-fg">'params:train_evaluation.model_options.linear_regression'</span><span class="ansi-bold">]</span>, <span class="ansi-bold">[</span><span class="ansi-green-fg">'train_evaluation.linear_regression.regressor'</span>, <span class="ansi-green-fg">'train_evaluation.linear_regression.experiment_params'</span><span class="ansi-bold">]</span>, <span style="font-style:italic" class="ansi-magenta-fg">None</span><span class="ansi-bold">)</span>,
<span class="ansi-magenta-fg ansi-bold">Node</span><span class="ansi-bold">(</span>train_model, <span class="ansi-bold">[</span><span class="ansi-green-fg">'X_train'</span>, <span class="ansi-green-fg">'y_train'</span>, <span class="ansi-green-fg">'params:train_evaluation.model_options.random_forest'</span><span class="ansi-bold">]</span>, <span class="ansi-bold">[</span><span class="ansi-green-fg">'train_evaluation.random_forest.regressor'</span>, <span class="ansi-green-fg">'train_evaluation.random_forest.experiment_params'</span><span class="ansi-bold">]</span>, <span style="font-style:italic" class="ansi-magenta-fg">None</span><span class="ansi-bold">)</span>,
<span class="ansi-yellow-fg">...</span>
<span class="ansi-bold">]</span><span class="ansi-bold">)</span></pre>
</div>
</div>
</div>
<p>Now we get the correct filtered pipeline as expected.</p>
</section>
<section id="more-notes" class="level2">
<h2 class="anchored" data-anchor-id="more-notes">More notes</h2>
<section id="the-pipeline.filter-support-or-operator" class="level3">
<h3 class="anchored" data-anchor-id="the-pipeline.filter-support-or-operator">The <code>Pipeline.filter</code> support <code>or</code> operator</h3>
<p>While the current filter supports many options, there may be some value to wrap around the Pipeline API to support things like <code>or</code>. This is only possible if you use the Python API directly but not CLI (with the example above). maybe something similar to the <a href="https://docs.getdbt.com/reference/node-selection/graph-operators">Graph Operators in dbt</a>.</p>
<p>e.g.&nbsp;</p>
<pre><code>kedro run --select "my_model+"         # select my_model and all children
kedro run --select "+my_model"         # select my_model and all parents
kedro run --select "+my_model+"        # select my_model, and all of its parents and children</code></pre>
</section>
<section id="selecting-or-slicing-multiple-pipeline-with-kedro-run" class="level3">
<h3 class="anchored" data-anchor-id="selecting-or-slicing-multiple-pipeline-with-kedro-run">Selecting or slicing multiple pipeline with <code>kedro run</code></h3>
<p>Since Pipeline API support arithmetic, it would be quite straight forward to support things like <code>kedro run --pipeline a+b</code> or <code>kedro run --pipeline a-b</code>. Let’s have a look what’s options are available for the CLI.</p>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>kedro run <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">help</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Usage: kedro run [OPTIONS]

  Run the pipeline.

Options:
  --from-inputs TEXT         A list of dataset names which should be used as a
                             starting point.
  --to-outputs TEXT          A list of dataset names which should be used as
                             an end point.
  --from-nodes TEXT          A list of node names which should be used as a
                             starting point.
  --to-nodes TEXT            A list of node names which should be used as an
                             end point.
  -n, --nodes TEXT           Run only nodes with specified names.
  -r, --runner TEXT          Specify a runner that you want to run the
                             pipeline with. Available runners:
                             'SequentialRunner', 'ParallelRunner' and
                             'ThreadRunner'.
  --async                    Load and save node inputs and outputs
                             asynchronously with threads. If not specified,
                             load and save datasets synchronously.
  -e, --env TEXT             Kedro configuration environment name. Defaults to
                             `local`.
  -t, --tags TEXT            Construct the pipeline using only nodes which
                             have this tag attached. Option can be used
                             multiple times, what results in a pipeline
                             constructed from nodes having any of those tags.
  -lv, --load-versions TEXT  Specify a particular dataset version (timestamp)
                             for loading.
  -p, --pipeline TEXT        Name of the registered pipeline to run. If not
                             set, the '__default__' pipeline is run.
  -ns, --namespace TEXT      Name of the node namespace to run.
  -c, --config FILE          Specify a YAML configuration file to load the run
                             command arguments from. If command line arguments
                             are provided, they will override the loaded ones.
  --conf-source PATH         Path of a directory where project configuration
                             is stored.
  --params TEXT              Specify extra parameters that you want to pass to
                             the context initialiser. Items must be separated
                             by comma, keys - by colon or equals sign,
                             example: param1=value1,param2=value2. Each
                             parameter is split by the first comma, so
                             parameter values are allowed to contain colons,
                             parameter keys are not. To pass a nested
                             dictionary as parameter, separate keys by '.',
                             example: param_group.param1:value1.
  -h, --help                 Show this message and exit.</code></pre>
</div>
</div>
<p>This is what happen when you do <code>kedro run -p training -t model_a</code>, it’s a two steps flitering: 1. Apply the <code>-p</code> pipeline name to select a key from the pipeline dictionary, it’s just <code>pipelines[pipeline_name]</code>, note this mean you can only select ONE pipeline at a time. 2. The pipeline is then further filtered with <code>Pipeline.filter</code></p>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> kedro.pipeline.pipeline <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Pipeline</span>
<span id="cb45-2">Pipeline.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>??</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Signature:
Pipeline.filter(
    self,
    tags: 'Iterable[str] | None' = None,
    from_nodes: 'Iterable[str] | None' = None,
    to_nodes: 'Iterable[str] | None' = None,
    node_names: 'Iterable[str] | None' = None,
    from_inputs: 'Iterable[str] | None' = None,
    to_outputs: 'Iterable[str] | None' = None,
    node_namespace: 'str | None' = None,
) -&gt; 'Pipeline'
Source:   
    def filter(  # noqa: PLR0913
        self,
        tags: Iterable[str] | None = None,
        from_nodes: Iterable[str] | None = None,
        to_nodes: Iterable[str] | None = None,
        node_names: Iterable[str] | None = None,
        from_inputs: Iterable[str] | None = None,
        to_outputs: Iterable[str] | None = None,
        node_namespace: str | None = None,
    ) -&gt; Pipeline:
        """Creates a new ``Pipeline`` object with the nodes that meet all of the
        specified filtering conditions.

        The new pipeline object is the intersection of pipelines that meet each
        filtering condition. This is distinct from chaining multiple filters together.

        Args:
            tags: A list of node tags which should be used to lookup
                the nodes of the new ``Pipeline``.
            from_nodes: A list of node names which should be used as a
                starting point of the new ``Pipeline``.
            to_nodes:  A list of node names which should be used as an
                end point of the new ``Pipeline``.
            node_names: A list of node names which should be selected for the
                new ``Pipeline``.
            from_inputs: A list of inputs which should be used as a starting point
                of the new ``Pipeline``
            to_outputs: A list of outputs which should be the final outputs of
                the new ``Pipeline``.
            node_namespace: One node namespace which should be used to select
                nodes in the new ``Pipeline``.

        Returns:
            A new ``Pipeline`` object with nodes that meet all of the specified
                filtering conditions.

        Raises:
            ValueError: The filtered ``Pipeline`` has no nodes.

        Example:
        ::

            &gt;&gt;&gt; pipeline = Pipeline(
            &gt;&gt;&gt;     [
            &gt;&gt;&gt;         node(func, "A", "B", name="node1"),
            &gt;&gt;&gt;         node(func, "B", "C", name="node2"),
            &gt;&gt;&gt;         node(func, "C", "D", name="node3"),
            &gt;&gt;&gt;     ]
            &gt;&gt;&gt; )
            &gt;&gt;&gt; pipeline.filter(node_names=["node1", "node3"], from_inputs=["A"])
            &gt;&gt;&gt; # Gives a new pipeline object containing node1 and node3.
        """
        # Use [node_namespace] so only_nodes_with_namespace can follow the same
        # *filter_args pattern as the other filtering methods, which all take iterables.
        node_namespace_iterable = [node_namespace] if node_namespace else None

        filter_methods = {
            self.only_nodes_with_tags: tags,
            self.from_nodes: from_nodes,
            self.to_nodes: to_nodes,
            self.only_nodes: node_names,
            self.from_inputs: from_inputs,
            self.to_outputs: to_outputs,
            self.only_nodes_with_namespace: node_namespace_iterable,
        }

        subset_pipelines = {
            filter_method(*filter_args)  # type: ignore
            for filter_method, filter_args in filter_methods.items()
            if filter_args
        }

        # Intersect all the pipelines subsets. We apply each filter to the original
        # pipeline object (self) rather than incrementally chaining filter methods
        # together. Hence the order of filtering does not affect the outcome, and the
        # resultant pipeline is unambiguously defined.
        # If this were not the case then, for example,
        # pipeline.filter(node_names=["node1", "node3"], from_inputs=["A"])
        # would give different outcomes depending on the order of filter methods:
        # only_nodes and then from_inputs would give node1, while only_nodes and then
        # from_inputs would give node1 and node3.
        filtered_pipeline = Pipeline(self.nodes)
        for subset_pipeline in subset_pipelines:
            filtered_pipeline &amp;= subset_pipeline

        if not filtered_pipeline.nodes:
            raise ValueError(
                "Pipeline contains no nodes after applying all provided filters"
            )
        return filtered_pipeline
File:      ~/dev/kedro/kedro/pipeline/pipeline.py
Type:      function</code></pre>
</div>
</div>
<p>This means that, if you have tags applied across multiple pipeline, you cannot filter it by tag, unless you apply the filter in the largest pipeline that contains all nodes. What if we can support things like: <code>kedro run -p feature+training -t model_a</code>?</p>


</section>
</section>
</section>

 ]]></description>
  <category>python</category>
  <category>kedro</category>
  <category>databricks</category>
  <guid>https://noklam.github.io/blog/posts/kedro-pipeline-slicing-pipeline/2024-03-06-Kedro-Pipeline-Slicing-Pipeline.html</guid>
  <pubDate>Wed, 06 Mar 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Kedro with Databricks Assets Bundle</title>
  <link>https://noklam.github.io/blog/posts/kedro-with-databricks-asset-bundle/2024-02-21-kedro-with-databricks-asset.html</link>
  <description><![CDATA[ 




<p>(Disclaimer: This is not an official documentation).</p>
<p>This post describe the process of using Databricks Assets bundle, deploy the notebook to a Databricks workspace and runs the notebook as a Databricks Job.</p>
<section id="requirements" class="level2">
<h2 class="anchored" data-anchor-id="requirements">Requirements</h2>
<p>I test this with the following dependencies: - kedro==0.19.2 - databricks-cli==0.214.0 # Installation guide: https://docs.databricks.com/en/dev-tools/cli/install.html</p>
</section>
<section id="create-a-project-with-kedro-and-databricks-asset-bundles" class="level2">
<h2 class="anchored" data-anchor-id="create-a-project-with-kedro-and-databricks-asset-bundles">Create a project with Kedro and Databricks Asset Bundles</h2>
<p>First, I create a new kedro project which contains a spark pipeline that are ready to run in databricks with <code>kedro new -s databricks-iris</code>. The workflow of using Databricks worksapce to develop Kedro project is documented <a href="https://docs.kedro.org/en/stable/deployment/databricks/databricks_notebooks_development_workflow.html">here</a>.</p>
<p>Next, you need to have the Databricks CLI installed, run this command to create a Databricks Assets Bundle template.</p>
<p><code>databricks bundle init</code>, it will prompt you for a few things. For testing purpose, I answer <code>yes</code> for all questions. The resulting folder look like this: <img src="https://noklam.github.io/blog/posts/kedro-with-databricks-asset-bundle/bundle-folder.png" class="img-fluid" alt="bundle folder structure"></p>
<p>This create yet another project template. Both <code>kedro new</code> and <code>databricks bundle init</code> assume you are creating new project. Since we have a Kedro project already, you don’t need the project related files. i.e.&nbsp;<code>requirements-dev.txt</code>, <code>setup.py</code> and <code>src/&lt;project_name&gt;</code>. You can then move everythin from a Kedro project inside the <code>bundle_example</code> folder so that they share the same root level. i.e.&nbsp;<code>pyproject.toml</code> (create by Kedro) should be in the same level as <code>databricks.yml</code></p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">`</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">databricks</span> bundle deploy <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-t</span> dev<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">`</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Error:</span> terraform apply: exit status 1</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Error:</span> cannot create job: default auth: cannot configure default credentials, please check https://docs.databricks.com/en/dev-tools/auth.html#databricks-client-unified-authentication to configure credentials for your preferred authentication method. Config: host=https://adb-4127266075722018.18.azuredatabricks.net. Env: DATABRICKS_HOST</span>
<span id="cb1-5"></span>
<span id="cb1-6">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">with</span> databricks_job.my_project_job,</span>
<span id="cb1-7">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">on</span> bundle.tf.json line 77, in resource.databricks_job.my_project_job:</span>
<span id="cb1-8">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">77:</span>       }</span></code></pre></div>
</section>
<section id="create-the-developer-token" class="level2">
<h2 class="anchored" data-anchor-id="create-the-developer-token">Create the Developer Token</h2>
<p>I try to submit a job immediately after creating the bundles, the error suggests that I need to create a developer token to submit job to Databricks locally. Go to Databricks workspace -&gt; User Settings -&gt; Developer -&gt; Generate New</p>
<p>Run in terminal: <code>export DATABRICKS_TOKEN=&lt;your-token&gt;</code></p>
</section>
<section id="submit-the-job" class="level2">
<h2 class="anchored" data-anchor-id="submit-the-job">Submit the job</h2>
<p>After this, I run <code>databricks bundle deploy -t dev</code> again and I see this in my workspace.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://noklam.github.io/blog/posts/kedro-with-databricks-asset-bundle/workspace-bundle.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">workspace-budnle</figcaption>
</figure>
</div>
<p>If you name your bundle <code>my_project</code>, you should see a <code>my_project_job.yml</code>. You will need to update the <code>tasks</code> and the <code>notebook_path</code> to the targeted notebook. <code>databricks bundle run -t dev my_project_job</code></p>
<p>For example:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb2-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tasks</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">task_key</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> notebook_task</span></span>
<span id="cb2-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">job_cluster_key</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> job_cluster</span></span>
<span id="cb2-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">notebook_task</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">notebook_path</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ../src/notebook.ipynb</span></span></code></pre></div>
<p>After this, I can submit a job and see this on Databricks. Unfortunately I cannot get it running because I have permission issue to create a Databricks Job, but I can see the job request on the UI.</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;plaintext&quot;}">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Summary</span></span>
<span id="cb3-2">Although there are <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> much documentation on the Internet yet, it<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'s fairly easy to combine the two. It would be nice to automate some of the manual steps, but it is challenging because both takes a template approach and it'</span>s always hard to merge them automatically.</span></code></pre></div>
</div>
</section>
<section id="appendix" class="level1">
<h1>Appendix:</h1>
<section id="the-databricks-asset-bundle-use-entrypoints-for-deployment." class="level3">
<h3 class="anchored" data-anchor-id="the-databricks-asset-bundle-use-entrypoints-for-deployment.">The databricks asset bundle use <code>entrypoints</code> for deployment.</h3>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">   entry_points<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{</span>
<span id="cb4-2">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"packages"</span>: [</span>
<span id="cb4-3">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"main=my_project.main:main"</span></span>
<span id="cb4-4">        ]</span>
<span id="cb4-5">    },</span></code></pre></div>


</section>
</section>

 ]]></description>
  <category>python</category>
  <category>kedro</category>
  <category>databricks</category>
  <guid>https://noklam.github.io/blog/posts/kedro-with-databricks-asset-bundle/2024-02-21-kedro-with-databricks-asset.html</guid>
  <pubDate>Wed, 21 Feb 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Enhancing Debugging experience with Jupyter Magic</title>
  <link>https://noklam.github.io/blog/posts/enhance-debugging-experience-with-jupyter-magic/2024-02-20-Enhance-debugging-experience-with-jupyter-magic.html</link>
  <description><![CDATA[ 




<section id="overview" class="level1">
<h1>Overview</h1>
<p>The blog will cover the development of a new feature focused on enhancing the debugging experience for Kedro, a Python framework for building reproducible, maintainable, and modular data pipelines. This feature aims to streamline the debugging process by leveraging Jupyter notebooks and the <code>inspect</code> module to quickly restore the context of errors encountered within Kedro pipelines.</p>
</section>
<section id="motivation" class="level1">
<h1>Motivation</h1>
<p>Debugging complex data pipelines can be challenging, especially when errors occur deep within the pipeline. Traditional debugging methods often involve many manual steps, which can be cumbersome and time-consuming. By introducing a feature that integrates seamlessly with Kedro and Jupyter notebooks, it provides a more interactive debugging experience, we aim to improve the productivity and efficiency of Kedro users.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://noklam.github.io/blog/posts/enhance-debugging-experience-with-jupyter-magic/jupyter-load-node.gif" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">jupyter-debug-magic</figcaption>
</figure>
</div>
</section>
<section id="requirements-constraints" class="level1">
<h1>Requirements &amp; Constraints</h1>
<p>Functional Requirements: - Seamless integration with Jupyter notebooks - a line magic or cell magic - Automate steps to generate the code to run a Kedro Node.</p>
<p>Nice to have: - Able to usein IPython terminal, can be used with debugger.</p>
<section id="whats-in-scope-out-of-scope" class="level2">
<h2 class="anchored" data-anchor-id="whats-in-scope-out-of-scope">What’s in-scope &amp; out-of-scope?</h2>
<p>In-scope: - Integration of the feature with Jupyter notebooks. - Mapping of node inputs to function inputs using the inspect module. Out-of-scope: - Two way conversion between Notebook and source code. - Handle nested function definitions - that is a user defined function calling another user defined function which could be arbitary level of depth.</p>
</section>
<section id="methodology" class="level2">
<h2 class="anchored" data-anchor-id="methodology">Methodology</h2>
<section id="problem-statement" class="level3">
<h3 class="anchored" data-anchor-id="problem-statement">Problem Statement</h3>
<p>The challenge lies in mapping Kedro specific components to generate code that can be explored interactively in notebook to provide a seamless debugging experience. There are few key components that need to be mapped: - Generate code cell in Notebook - Loading the “Datasets” from a Kedro <code>DataCatalog</code> - Mapping Kedro Node’s to Python function. - A way to execute the code in the notebook - Import statements</p>
<section id="generate-code-cell-in-notebook" class="level4">
<h4 class="anchored" data-anchor-id="generate-code-cell-in-notebook">Generate Code cell in Notebook</h4>
<p>Originall</p>
</section>
<section id="kedro-node-and-python-function" class="level4">
<h4 class="anchored" data-anchor-id="kedro-node-and-python-function">Kedro Node and Python Function</h4>
<p>Kedro Node is a thin wrapper around Python function, with optional metadata such as <code>name</code> or <code>tags</code> to organise the node in a meaningful way. They are not too important for this particular feature, but useful for filtering pipeline. Kedro has a first party plugin <a href="https://github.com/kedro-org/kedro-viz"><code>kedro-viz</code></a> that provide an <a href="https://demo.kedro.org">interactive visualiation</a> of your pipeline.</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> kedro.pipeline <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> node</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> foo(a,b):</span>
<span id="cb1-4">    c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="cb1-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> c</span>
<span id="cb1-6"></span>
<span id="cb1-7">node(foo, inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"transaction_data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"customer_data"</span>], outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output_data"</span>], name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my_node"</span>, tags<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"s"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>Node(foo, ['data_a', 'data_b'], ['output_data'], 'my_node')</code></pre>
</div>
</div>
<p>You can see how close the node resembles a typical Python function. The <code>inputs</code> and <code>outputs</code> refer to the name of a dataset of the Kedro <code>DataCatalog</code>. It is basically the key value of the definition of a dataset, which is ususally defined in YAML format.</p>
<p>This is an example of the definition of a dataset:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transaction_data</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">type</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pandas.CSVDataset</span></span>
<span id="cb3-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filepath</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> data/01_raw/my_raw_data.csv</span></span></code></pre></div>
<p><code>DataCatalog</code> handles the I/O for Kedro Pipeline, the node only need to declares what data does it needs. The requirements here is that we need to map the inputs to dataset name properly. i.e. - transaction_data -&gt; a - customer_data -&gt; b</p>
<p>To run this in a notebook, we need to load the data and call the function.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> catalog.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"transaction_data"</span>)</span>
<span id="cb4-2">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> catalog.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"customer_data"</span>)</span>
<span id="cb4-3"></span>
<span id="cb4-4">foo(a, b)</span></code></pre></div>
<p>It’s fairly easy to map this particular example, but it becomes tricker if we need to handle <code>*args</code>, <code>**kwargs</code>, optional arguments and more. This is the syntax that <a href="https://docs.kedro.org/en/latest/nodes_and_pipelines/nodes.html#node-definition-syntax">Kedro Node support</a>.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> bar(a, b, c, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb5-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bar"</span></span></code></pre></div>
<p>Consider this function, both node definitions below are valid: - <code>node(bar, ["transaction_data", "customer_data", "sales_data", "salary_data"], ["output_data"])</code> - <code>node(bar, ["transaction_data", "customer_data", "sales_data"], ["output_data"])</code></p>
<p>The solution of this is using <code>inspect</code> module to get the information about the function signature and node, and map it carefully with <code>inspect.Signature.bind</code>.</p>
</section>
<section id="executing-the-code-in-a-notebook" class="level4">
<h4 class="anchored" data-anchor-id="executing-the-code-in-a-notebook">Executing the code in a notebook</h4>
<p>There are 2 variations that we considered: 1. Code cell with the function defintion 2. Function call</p>
<p>Reusing the <code>foo</code> function mentioned earlier, with approach 1, we want to flatten it to a code cell in notebook</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> foo(a,b):</span>
<span id="cb6-2">    c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="cb6-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> c</span></code></pre></div>
<p>Notebook cell:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> catalog.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"transaction_data"</span>)</span>
<span id="cb7-2">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> catalog.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"customer_data"</span>)</span>
<span id="cb7-3"></span>
<span id="cb7-4">c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="cb7-5">c</span></code></pre></div>
<p>The benefit of this is user can split the cell to inject logic or inspecting variable easily. However, it becomes increasing challenging to retrive the function body only. <code>inspect</code> provide method to extract the definition of <code>foo</code>, which is a string representation of this:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> foo(a,b):</span>
<span id="cb8-2">    c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="cb8-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> c</span></code></pre></div>
<p>In order to make this runnable in a notebook cell, we need to handle a few things: 1. Remove the <code>def</code> line, which could be multiple lines 2. Remove the <code>return</code> statement, because it is not valid outside of function.</p>
<p>Again, it looks trivial at first, but if we start consideing multiple <code>return</code> in a function, it becomes unclear what we should do. In addition, a function could have decorator, which means removing the <code>def</code> isn’t always desired. At the end, we go with approach 2, which copy the function definition and make a call to it.</p>
<p>The notebook cell now look like this:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> catalog.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"transaction_data"</span>)</span>
<span id="cb9-2">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> catalog.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"customer_data"</span>)</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> foo(a,b): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Not necessary to copy</span></span>
<span id="cb9-5">    c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="cb9-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> c</span>
<span id="cb9-7"></span>
<span id="cb9-8">foo(a, b)</span></code></pre></div>
</section>
<section id="import-statement" class="level4">
<h4 class="anchored" data-anchor-id="import-statement">Import Statement</h4>
<p>We take a fairly simple approach for this. Using <code>inspect.getsourcefile(function)</code>, we can retrive the file that contains the function we desired. After that, we parse the file and retrive all import statements with specific keywords.</p>


</section>
</section>
</section>
</section>

 ]]></description>
  <category>python</category>
  <category>kedro</category>
  <category>jupyter</category>
  <guid>https://noklam.github.io/blog/posts/enhance-debugging-experience-with-jupyter-magic/2024-02-20-Enhance-debugging-experience-with-jupyter-magic.html</guid>
  <pubDate>Tue, 20 Feb 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Investigation of the Kedro default node names</title>
  <link>https://noklam.github.io/blog/posts/default_node_name/2024-02-08-default-node-name.html</link>
  <description><![CDATA[ 




<p><a href="https://github.com/kedro-org/kedro/issues/3575">Default node names are problematic #3575</a></p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>kedro <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>V</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>kedro, version 0.18.14</code></pre>
</div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>load_ext kedro.ipython</span>
<span id="cb3-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>reload_kedro default<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>node<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">[02/08/24 15:59:00] </span><span style="color: #800000; text-decoration-color: #800000">WARNING </span> Kedro extension was registered but couldn't find a Kedro project. Make  <a href="file:///Users/Nok_Lam_Chan/miniconda3/envs/blog/lib/python3.10/site-packages/kedro/ipython/__init__.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">__init__.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/miniconda3/envs/blog/lib/python3.10/site-packages/kedro/ipython/__init__.py#40" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">40</span></a>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>         sure you run <span style="color: #008000; text-decoration-color: #008000">'%reload_kedro &lt;project_root&gt;'</span>.                            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">              </span>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">[02/08/24 15:59:00] </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Kedro project default-node-name                                        <a href="file:///Users/Nok_Lam_Chan/miniconda3/envs/blog/lib/python3.10/site-packages/kedro/ipython/__init__.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">__init__.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/miniconda3/envs/blog/lib/python3.10/site-packages/kedro/ipython/__init__.py#108" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">108</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Defined global variable <span style="color: #008000; text-decoration-color: #008000">'context'</span>, <span style="color: #008000; text-decoration-color: #008000">'session'</span>, <span style="color: #008000; text-decoration-color: #008000">'catalog'</span> and            <a href="file:///Users/Nok_Lam_Chan/miniconda3/envs/blog/lib/python3.10/site-packages/kedro/ipython/__init__.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">__init__.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/miniconda3/envs/blog/lib/python3.10/site-packages/kedro/ipython/__init__.py#109" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">109</span></a>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>         <span style="color: #008000; text-decoration-color: #008000">'pipelines'</span>                                                            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">               </span>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">[02/08/24 15:59:08] </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Registered line magic <span style="color: #008000; text-decoration-color: #008000">'run_viz'</span>                                        <a href="file:///Users/Nok_Lam_Chan/miniconda3/envs/blog/lib/python3.10/site-packages/kedro/ipython/__init__.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">__init__.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/miniconda3/envs/blog/lib/python3.10/site-packages/kedro/ipython/__init__.py#115" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">115</span></a>
</pre>
</div>
</div>
<section id="node-names" class="level1">
<h1>Node name(s)</h1>
<ul>
<li>node.name (with namespace)</li>
<li>node.short_name</li>
<li>node._name</li>
<li>node._unique_key (hashable)</li>
<li>node._func_name</li>
</ul>
<section id="node.name-with-namespace" class="level2">
<h2 class="anchored" data-anchor-id="node.name-with-namespace">node.name (with namespace)</h2>
<ul>
<li>Needed, node, pipeline, runner (expected to be the public interface)</li>
<li>it’s using <strong>str</strong>(self)</li>
</ul>
<pre><code>@property
def name(self) -&gt; str:
    """Node's name.

    Returns:
        Node's name if provided or the name of its function.
    """
    node_name = self._name or str(self)
    if self.namespace:
        return f"{self.namespace}.{node_name}"
    return node_name</code></pre>
</section>
<section id="node.short_name" class="level2">
<h2 class="anchored" data-anchor-id="node.short_name">node.short_name</h2>
<ul>
<li>Not needed for kedro run</li>
<li>No reference in the entire codebase</li>
<li>deprecated will be a breaking change (technically) ## node._name</li>
<li>Only usage in <code>node.py</code> , not used outside</li>
</ul>
<pre class="ipython"><code>In [8]: n._unique_key
Out[8]: ('preprocess_companies_node', 'companies', 'preprocessed_companies')</code></pre>
</section>
<section id="node.unique_key-hashable" class="level2">
<h2 class="anchored" data-anchor-id="node.unique_key-hashable">node.unique_key (hashable)</h2>
<ul>
<li>Return 3 things, tuple of (node name, sorted_input, sorted_output)</li>
<li>node comparison, checking of unique node</li>
<li>hash(node) = hash(node._unique_key)</li>
<li>less than, larger than , what for? <code>__eq__</code> make sense.</li>
<li><code>__lt__</code> - <a href="https://github.com/McK-Private/private-kedro/pull/59">Private Kedro PR</a>
<ul>
<li>Doesn’t seem to be needed until I added the sorted(nodes) to ensure SequentialRunner have deterministic output ## node._func_name Usage:</li>
</ul></li>
<li><code>__str__</code></li>
<li><code>__repr__</code></li>
<li><code>short_name</code></li>
<li><code>__str__</code> and <code>__repr__</code> will call <code>node._func_name</code></li>
</ul>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipelines[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__default__"</span>].nodes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Getting the first node</span></span></code></pre></div>
</div>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__str__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>:</span>
<span id="cb7-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _set_to_str(xset: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>:</span>
<span id="cb7-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"[</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">';'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join(xset)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">]"</span></span>
<span id="cb7-4"></span>
<span id="cb7-5">    out_str <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _set_to_str(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.outputs) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._outputs <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"None"</span></span>
<span id="cb7-6">    in_str <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _set_to_str(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.inputs) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._inputs <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"None"</span></span>
<span id="cb7-7"></span>
<span id="cb7-8">    prefix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">": "</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._name <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb7-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> prefix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>_func_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>in_str<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">) -&gt; </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>out_str<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span></code></pre></div>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"></span>
<span id="cb8-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _set_to_str(xset: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>:</span>
<span id="cb8-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"[</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">';'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join(xset)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">]"</span></span>
<span id="cb8-4"></span>
<span id="cb8-5"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n</span>
<span id="cb8-6">out_str <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _set_to_str(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.outputs) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._outputs <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"None"</span></span>
<span id="cb8-7">in_str <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _set_to_str(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.inputs) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._inputs <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"None"</span></span>
<span id="cb8-8"></span>
<span id="cb8-9">prefix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">": "</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._name <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb8-10">prefix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>_func_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>in_str<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">) -&gt; </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>out_str<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="12">
<div class="ansi-escaped-output">
<pre><span class="ansi-green-fg">'split: split_data</span><span class="ansi-green-fg">(</span><span class="ansi-green-fg">[</span><span class="ansi-green-fg">example_iris_data;parameters</span><span class="ansi-green-fg">]</span><span class="ansi-green-fg">)</span><span class="ansi-green-fg"> -&gt; </span><span class="ansi-green-fg">[</span><span class="ansi-green-fg">X_train;X_test;y_train;y_test</span><span class="ansi-green-fg">]</span><span class="ansi-green-fg">'</span></pre>
</div>
</div>
</div>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">n.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__str__</span>??</span></code></pre></div>
</div>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">n.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__str__</span>()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="13">
<div class="ansi-escaped-output">
<pre><span class="ansi-green-fg">'split: split_data</span><span class="ansi-green-fg">(</span><span class="ansi-green-fg">[</span><span class="ansi-green-fg">example_iris_data,parameters</span><span class="ansi-green-fg">]</span><span class="ansi-green-fg">)</span><span class="ansi-green-fg"> -&gt; </span><span class="ansi-green-fg">[</span><span class="ansi-green-fg">X_train,X_test,y_train,y_test</span><span class="ansi-green-fg">]</span><span class="ansi-green-fg">'</span></pre>
</div>
</div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(n)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="5">
<div class="ansi-escaped-output">
<pre><span class="ansi-green-fg">'split: split_data</span><span class="ansi-green-fg">(</span><span class="ansi-green-fg">[</span><span class="ansi-green-fg">example_iris_data,parameters</span><span class="ansi-green-fg">]</span><span class="ansi-green-fg">)</span><span class="ansi-green-fg"> -&gt; </span><span class="ansi-green-fg">[</span><span class="ansi-green-fg">X_train,X_test,y_train,y_test</span><span class="ansi-green-fg">]</span><span class="ansi-green-fg">'</span></pre>
</div>
</div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">repr</span>(n)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="7">
<div class="ansi-escaped-output">
<pre><span class="ansi-green-fg">"Node</span><span class="ansi-green-fg">(</span><span class="ansi-green-fg">split_data, </span><span class="ansi-green-fg">[</span><span class="ansi-green-fg">'example_iris_data', 'parameters'</span><span class="ansi-green-fg">]</span><span class="ansi-green-fg">, </span><span class="ansi-green-fg">[</span><span class="ansi-green-fg">'X_train', 'X_test', 'y_train', 'y_test'</span><span class="ansi-green-fg">]</span><span class="ansi-green-fg">, 'split'</span><span class="ansi-green-fg">)</span><span class="ansi-green-fg">"</span></pre>
</div>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">Notes:</span>
<span id="cb13-2">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> Duplicate Node are checked <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> `node.name` <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> `node.unique_key`</span></code></pre></div>
</div>
</section>
</section>
<section id="observation-1" class="level1">
<h1>Observation 1</h1>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> dummy_func(x):</span>
<span id="cb14-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dummy"</span></span>
<span id="cb14-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> kedro.pipeline <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> node</span></code></pre></div>
</div>
<div class="cell" data-execution_count="53">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> format_name(node):</span>
<span id="cb15-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(node)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">repr</span>(node)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>node<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>node<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>short_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="55">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">nameless_node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node(dummy_func, inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>], outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>])</span>
<span id="cb16-2">nameless_namespace_node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node(dummy_func, inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>], outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>], namespace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nok"</span>)</span>
<span id="cb16-3">nam_node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node(dummy_func, inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>], outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>], name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dummy_name"</span>)</span>
<span id="cb16-4"></span>
<span id="cb16-5">format_name(nameless_node)</span>
<span id="cb16-6">format_name(nameless_namespace_node)</span>
<span id="cb16-7">format_name(name_node)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>str(node)='dummy_func([a]) -&gt; [b]'
repr(node)="Node(dummy_func, ['a'], ['b'], None)"
node.name='dummy_func([a]) -&gt; [b]'
node.short_name='Dummy Func'

str(node)='dummy_func([a]) -&gt; [b]'
repr(node)="Node(dummy_func, ['a'], ['b'], None)"
node.name='nok.dummy_func([a]) -&gt; [b]'
node.short_name='Dummy Func'

str(node)='dummy_name: dummy_func([a]) -&gt; [b]'
repr(node)="Node(dummy_func, ['a'], ['b'], 'dummy_name')"
node.name='dummy_name'
node.short_name='dummy_name'
</code></pre>
</div>
</div>
<ol type="1">
<li>The <code>repr</code> for namespace if wrong because it will not reconstruct the same node, and <code>namespace</code> wasn’t included in the <code>__repr__</code> at all.</li>
<li><code>short_name</code> feels very <code>kedro-viz</code> coupled and unnecessary to keep them in <code>kedro</code>. Kedro does not use this property.</li>
</ol>
<section id="observation-2" class="level2">
<h2 class="anchored" data-anchor-id="observation-2">Observation 2</h2>
<p>https://github.com/kedro-org/kedro/pull/568/files - can replace with <code>self._func_name instead of</code>_get_readable_func_name`</p>
</section>
</section>
<section id="observation-3---node.name" class="level1">
<h1>Observation 3 - node.name</h1>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__str__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>:</span>
<span id="cb18-2">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _set_to_str(xset: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>:</span>
<span id="cb18-3">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"[</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">';'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join(xset)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">]"</span></span>
<span id="cb18-4"></span>
<span id="cb18-5">        out_str <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _set_to_str(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.outputs) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._outputs <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"None"</span></span>
<span id="cb18-6">        in_str <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _set_to_str(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.inputs) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._inputs <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"None"</span></span>
<span id="cb18-7"></span>
<span id="cb18-8">        prefix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">": "</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._name <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb18-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> prefix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>_func_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>in_str<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">) -&gt; </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>out_str<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb18-10"></span>
<span id="cb18-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@property</span></span>
<span id="cb18-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> name(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>:</span>
<span id="cb18-13">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Node's name.</span></span>
<span id="cb18-14"></span>
<span id="cb18-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb18-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            Node's name if provided or the name of its function.</span></span>
<span id="cb18-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb18-18">        node_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._name <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>)</span>
<span id="cb18-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.namespace:</span>
<span id="cb18-20">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>namespace<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>node_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb18-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> node_name    </span></code></pre></div>
<p>This is an important property and must be kept unique, it’s used for filtering.</p>
<p>However in the implementation it used <code>__str__</code> which is for “printing” and create obsecure dependency. In any case, it should be reverted and <code>__str__</code> relies on <code>self.name</code> instead.</p>


</section>

 ]]></description>
  <category>python</category>
  <category>kedro</category>
  <guid>https://noklam.github.io/blog/posts/default_node_name/2024-02-08-default-node-name.html</guid>
  <pubDate>Thu, 08 Feb 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Making Powerpoint Ready Chart with matplotlib</title>
  <link>https://noklam.github.io/blog/posts/2020-04-10-Presentation-Ready-Chart.html</link>
  <description><![CDATA[ 




<blockquote class="blockquote">
<p>Are you tired with fiddling with every single python plot and you always forgot how to configure matplotlib? Start creating your own matplotlib style or just use this. [Updated on 17-07-2022]</p>
</blockquote>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://noklam.github.io/blog/posts/nb_img/powerpoint-ready-chart.png" title="Over-exaggerated title" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Large Font Size Title</figcaption>
</figure>
</div>
<p>In reality, you probably don’t need a title as big as this one. But using library defautls often is not the best choice.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#hide</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-5">matplotlib.matplotlib_fname()</span>
<span id="cb1-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>load_ext autoreload</span>
<span id="cb1-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>autoreload <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>
Bad key axes.location in file C:\Users\lrcno\miniconda3\envs\kedro\lib\site-packages\matplotlib\mpl-data\stylelib\presentation.mplstyle, line 4 ("axes.location: 'left'")
You probably need to get an updated matplotlibrc file from
https://github.com/matplotlib/matplotlib/blob/v3.5.2/matplotlibrc.template
or from the matplotlib source distribution</code></pre>
</div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#collapse-hide</span></span>
<span id="cb3-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> make_scatter_plot():</span>
<span id="cb3-3">    num_points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb3-4">    gradient <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span></span>
<span id="cb3-5">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_points))</span>
<span id="cb3-6">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randn(num_points) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> gradient</span>
<span id="cb3-7">    fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots()</span>
<span id="cb3-8">    ax.scatter(x, y)</span>
<span id="cb3-9">    ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A Simple Scatter Plot'</span>)</span>
<span id="cb3-10">    ax.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>)</span>
<span id="cb3-11">    ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>)</span>
<span id="cb3-12">    plt.show()</span>
<span id="cb3-13"></span>
<span id="cb3-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> make_line_plot():</span>
<span id="cb3-15">    num_points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb3-16">    gradient <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span></span>
<span id="cb3-17">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_points))</span>
<span id="cb3-18">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randn(num_points) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> gradient</span>
<span id="cb3-19">    fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots()</span>
<span id="cb3-20">    ax.plot(x, y, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-'</span>)</span>
<span id="cb3-21">    ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A Simple Line Chart'</span>)</span>
<span id="cb3-22">    ax.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>)</span>
<span id="cb3-23">    ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>)</span>
<span id="cb3-24">    plt.show()</span></code></pre></div>
</div>
<section id="the-problem-of-library-defaults" class="level1">
<h1>The Problem of library defaults</h1>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">make_scatter_plot()</span>
<span id="cb4-2">make_line_plot()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://noklam.github.io/blog/posts/2020-04-10-Presentation-Ready-Chart_files/figure-html/cell-4-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://noklam.github.io/blog/posts/2020-04-10-Presentation-Ready-Chart_files/figure-html/cell-4-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>Your insight is as best as your audience understand. According to <a href="https://www.anaconda.com/state-of-data-science-2021">Anaconda State of the Data Science 2021</a>, data scientist spend almost one third of their time for data visualization, report and presentation. Human perception is largely based on <strong>visual</strong>, a easy-to-read chart is much more likely to sell your idea with a custom matplotlib pyplot chart. <img src="https://noklam.github.io/blog/posts/nb_img/data_scientist_at_work.png" class="img-fluid" alt="Data Scientist at Work from"></p>
<p>There is nothing wrong with <code>matplotlib</code>, it is custom for a user sit in front of a monitor. When it comes to presentation, you really should make some adjustment for your audience. If your organization is big enough, you may also consider to create a theme that shared across the organisation to style it consistently, <a href="https://github.com/quantumblacklabs/qbstyles">qbstyle</a> is one of the examples.</p>
<p>For typical data practitioner, it’s easy to start with the following tips.</p>
</section>
<section id="apply-matplotlib-theme" class="level1">
<h1>Apply matplotlib theme</h1>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> plt.style.context(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ggplot'</span>): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Or plt.style.use('presentation') for global setting</span></span>
<span id="cb5-2">    make_scatter_plot()</span>
<span id="cb5-3">    make_line_plot()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://noklam.github.io/blog/posts/2020-04-10-Presentation-Ready-Chart_files/figure-html/cell-5-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://noklam.github.io/blog/posts/2020-04-10-Presentation-Ready-Chart_files/figure-html/cell-5-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>Much better right?</p>
<p>There is nothing wrong with the chart if you are viewing it in front of your monitor. However, this is not PowerPoint ready as the font size are too small for a presentation. Adjusting font size manually is a painful process, instead, you could have preset theme to automate this process.</p>
</section>
<section id="make-powerpoint-ready-charts" class="level1">
<h1>Make PowerPoint-ready charts</h1>
<p>Luckily, there is some easy way to prepare PowerPoint-ready charts. I created a presentation.mplstyle file as follow. This is not a perfect theme, but it’s a good starting point and you can finetune the parameters to build your custom theme.</p>
<p>Custom <code>presentation</code> theme</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">axes.titlesize : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span></span>
<span id="cb6-2">axes.labelsize : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span></span>
<span id="cb6-3">axes.location: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'left'</span></span>
<span id="cb6-4">lines.linewidth : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb6-5">lines.markersize : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb6-6">xtick.labelsize : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span></span>
<span id="cb6-7">ytick.labelsize : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span></span>
<span id="cb6-8">figure.figsize : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span></span>
<span id="cb6-9">figure.titlesize: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span></span></code></pre></div>
<p>Once we have the <code>presentation</code> theme ready, we can start composing it with the <code>ggplot</code> to build charts.</p>
<blockquote class="blockquote">
<p>Note: You need to create a <code>presentation.mplstyle</code> file and copy it to a location that <code>matplotlib</code> can find. You can follow the steps below to create your own <code>presentation.mplstyle</code></p>
</blockquote>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#hide</span></span>
<span id="cb7-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib</span>
<span id="cb7-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb7-4">style_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(matplotlib.__path__[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mpl-data/stylelib"</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># It stores under the matplotlib sub-directory mpl-data/stylelib/</span></span>
<span id="cb7-5"></span>
<span id="cb7-6">presentation_theme <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb7-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">axes.titlesize : 24</span></span>
<span id="cb7-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">axes.labelsize : 24</span></span>
<span id="cb7-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">axes.location: 'left'</span></span>
<span id="cb7-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">lines.linewidth : 3</span></span>
<span id="cb7-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">lines.markersize : 10</span></span>
<span id="cb7-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">xtick.labelsize : 18</span></span>
<span id="cb7-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">ytick.labelsize : 18</span></span>
<span id="cb7-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">figure.figsize : 10, 6</span></span>
<span id="cb7-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">figure.titlesize: 24</span></span>
<span id="cb7-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb7-17"></span>
<span id="cb7-18"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(style_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"presentation.mplstyle"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb7-19">    f.write(presentation_theme)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> plt.style.context([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'presentation'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ggplot'</span>]):</span>
<span id="cb8-2">    make_scatter_plot()</span>
<span id="cb8-3">    make_line_plot()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://noklam.github.io/blog/posts/2020-04-10-Presentation-Ready-Chart_files/figure-html/cell-7-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://noklam.github.io/blog/posts/2020-04-10-Presentation-Ready-Chart_files/figure-html/cell-7-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>If you are careful enough, you will notice the font size of the title is not correct. This is because <code>ggplot</code> theme overwrite my theme. To make it right, you just need to switch the order so that your theme will overwrite conflict settings.</p>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> plt.style.context([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ggplot'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'presentation'</span>]):</span>
<span id="cb9-2">    make_scatter_plot()</span>
<span id="cb9-3">    make_line_plot()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://noklam.github.io/blog/posts/2020-04-10-Presentation-Ready-Chart_files/figure-html/cell-8-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://noklam.github.io/blog/posts/2020-04-10-Presentation-Ready-Chart_files/figure-html/cell-8-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>I actually disable the grid in my <code>presentation</code> theme, which conflicts with <code>fivethirtyeight</code> configuration. If conflict configs exist, it resolved base on your order. See the same plot with ‘presentation’,‘fivethirtyeight’ in reverse order.</p>
<p>To give you a sense how this affect your presenation, I put it into a Powerpoint, see if you feel the difference.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://noklam.github.io/blog/posts/nb_img/ppt_low_res_01.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">ppt_low_res_01.png</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://noklam.github.io/blog/posts/nb_img/ppt_high_res_02.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">ppt_high_res_02.png</figcaption>
</figure>
</div>
<section id="avoid-low-resolution-chart" class="level2">
<h2 class="anchored" data-anchor-id="avoid-low-resolution-chart">Avoid Low Resolution Chart</h2>
<blockquote class="blockquote">
<p>Note: Believe it or not, a low resolution chart looks much less conviencing. Taking screenshot with larger charts helps you to preserve the resolution.</p>
</blockquote>
<ul>
<li>Resolution of the chart is much better</li>
<li>More obvious Title &amp; Label (Try take a few step back from your monitor, see if you can read it)</li>
</ul>
</section>
</section>
<section id="define-once-use-everywhere" class="level1">
<h1>Define Once, Use Everywhere</h1>
<p>It could be troublesome if you need to define the same file over and over in different computer/environment. You can actually use a URL. I have put my own theme in GitHub so I can always access it from anywhere.</p>
<p>https://raw.githubusercontent.com/noklam/mediumnok/master/_demo/python-viz/presentation.mplstyle</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">my_style <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://raw.githubusercontent.com/noklam/blog/master/_demo/python-viz/presentation.mplstyle'</span></span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> plt.style.context([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ggplot'</span>, my_style]):</span>
<span id="cb10-4">    make_scatter_plot()</span>
<span id="cb10-5">    make_line_plot()</span></code></pre></div>
</div>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>I hope this blog helps you to prepare Powerpoint-ready charts better, happy coding!</p>


</section>

 ]]></description>
  <category>python</category>
  <guid>https://noklam.github.io/blog/posts/2020-04-10-Presentation-Ready-Chart.html</guid>
  <pubDate>Thu, 08 Feb 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>How Kedro Config Loader works</title>
  <dc:creator>noklam </dc:creator>
  <link>https://noklam.github.io/blog/posts/kedro_config_loader/2023-11-16-kedro-config-loader-dive-deep.html</link>
  <description><![CDATA[ 




<p>Kedro offers a <a href="https://docs.kedro.org/en/stable/configuration/index.html">configuration system</a>, it involves concepts such as - environment (it can be multiple files) - variable interpolation (advance templating) - globals - custom resolvers - runtime parameters (override via CLI or programatically)</p>
<p>The official documentation has plenty of examples, so I am going to focus on explaining the internals.</p>
<section id="config-resolution-without-globals" class="level1">
<h1>Config Resolution (Without Globals)</h1>
<p>To enable all of the features, the resolution order is actually quite complicated. It involes multiple stages of merging in different scope. This diagram belows describe what happen under the hood. The key is identify two things 1. Some feature apply in local scope (it is not cross environment) 2. There are different merging strategy, some are using <code>OmegaConf</code>, some are pure dictionary merge 3. Configuration are resolved and then merge across environments. i.e.&nbsp;you cannot interpolate a value from another environment.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://noklam.github.io/blog/posts/kedro_config_loader/2023-11-16-kedro-config-loader-dive-deep_files/figure-html/1cc40560-1-image.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">image.png</figcaption>
</figure>
</div>
</section>
<section id="config-resolution-with-globals" class="level1">
<h1>Config Resolution (With Globals)</h1>


</section>

 ]]></description>
  <category>python</category>
  <category>kedro</category>
  <guid>https://noklam.github.io/blog/posts/kedro_config_loader/2023-11-16-kedro-config-loader-dive-deep.html</guid>
  <pubDate>Thu, 16 Nov 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Advance Pytest - parameterize your fixture</title>
  <link>https://noklam.github.io/blog/posts/advance_pytest/2023-11-15-advance-pytest-fixtures-with-params.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Today I encountered a little testing challenge where I need to parameterize my tests. We use <code>pytest</code> extensively for our unit tests. Particularly, I need to duplicate all my tests for a new folder structure. At first, I thought about just writing new tests, then I quickly realise that I will end up duplicating a big chunk of our tests. On the other hand, some tests only make sense for a particular structure. If you are familiar with <code>pytest</code>, you may know that you can use <code>pytest.mark.parametrize</code> for testing a matrix of inputs and outputs. This is not applicable because I want to parameterise my fixture instead of the parameters of a test.</p>
<p>After a while of Googling, I found <a href="https://docs.pytest.org/en/7.1.x/how-to/fixtures.html#parametrizing-fixtures">Parameterize fixtures</a>. It wasn’t immediately obivous to me how I can use this to apply a matrix of tests while keeping it flexible enough to use only part of the fixtures. It sounds complicated but it will make more sense as I show you more example</p>
<section id="parameterize-tests" class="level2">
<h2 class="anchored" data-anchor-id="parameterize-tests">Parameterize Tests</h2>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pytest</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@pytest.fixture</span></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> a():</span>
<span id="cb1-5">    ...</span>
<span id="cb1-6"></span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> test_foo(a):</span>
<span id="cb1-9">    ...</span></code></pre></div>
<p>If you have use <code>pytest</code> before, you will know that <code>pytest.fixture</code> is the recommended way to reuse test setup. To test a matrix of input and outputs, you may use <code>pytest.mark.parameterize</code>.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pytest</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@pytest.fixture</span></span>
<span id="cb2-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> a():</span>
<span id="cb2-5">    ...</span>
<span id="cb2-6"></span>
<span id="cb2-7">pytest.mark.parametrize(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input"</span>, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb2-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> test_foo(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>):</span>
<span id="cb2-9">    ...</span></code></pre></div>
<p>This will create 3 tests and each of them will have an input <code>1</code>, <code>2</code>, <code>3</code> respectively. However this is not applicable to my use case because I want to parameterize my fixtures instead of a test. The test requires a fairly complicated setup, which involves creating dummy files and folder. This wasn’t a problem before we only create one specific type of structure. Recently, we want to make it generic and support different types of structure, so I need to expand the tests to cover this.</p>
<p>To do this, I discovered that I can use <code>pytest.fixture</code> with a <code>params</code> argument.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@pytest.fixture</span>(params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"structure_a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"structure_b"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"structure_c"</span>])</span>
<span id="cb3-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> a(request):</span>
<span id="cb3-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> request.param</span>
<span id="cb3-4"></span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> test_a(a):</span>
<span id="cb3-7">   ...</span></code></pre></div>
<p>This also creates 3 tests, which is great! Now for most of the cases, this is fine, but some tests only make sense for <code>structure_a</code> but not the other, should I duplicate another set of fixture? This is a feasible option but it’s not ideal. Turns out I can reuse the setup logic and create a combination of fixture easily. There are two different styles to do this, essentially instead of creating the fixture directly, we keep it as a function and create the a combination of fixtures base on this <code>setup</code> function.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> setup(params):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Note this is just a function but not a fixture</span></span>
<span id="cb4-2">    ...</span></code></pre></div>
<section id="style-a---use-the-fixture-as-an-argument" class="level3">
<h3 class="anchored" data-anchor-id="style-a---use-the-fixture-as-an-argument">Style A - use the fixture as an argument</h3>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">use_all_folder_structure <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pytest.fixture(setup, params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>]), name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"use_all_folder_structure"</span>)</span>
<span id="cb5-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> test_foo_a(use_all_folder_structure):</span>
<span id="cb5-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span></code></pre></div>
</section>
<section id="style-b---use-the-fixture-as-a-decorator" class="level3">
<h3 class="anchored" data-anchor-id="style-b---use-the-fixture-as-a-decorator">Style B - use the fixture as a decorator</h3>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"></span>
<span id="cb6-2">_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pytest.fixture(setup, params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>]) ,name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"use_all_folder_structure"</span>)</span>
<span id="cb6-3">use_all_folder_structure <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pytest.mark.usefixtures(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"use_all_folder_structure"</span>,</span>
<span id="cb6-4"></span>
<span id="cb6-5">)</span>
<span id="cb6-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@use_all_folder_structure</span></span>
<span id="cb6-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> test_foo_b():</span>
<span id="cb6-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span></code></pre></div>
<p>I can easily create another fixture to run on a subset of fixture.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pytest.fixture(setup, params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>]) ,name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"use_folder_structure_a"</span>)</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@use_folder_structure_a</span></span>
<span id="cb7-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> test_bar_b():</span>
<span id="cb7-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span></code></pre></div>
</section>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>To summarisze, it is possible to apply a matrix of fixtures easily. Which style do you perfer?</p>


</section>

 ]]></description>
  <category>pytest</category>
  <guid>https://noklam.github.io/blog/posts/advance_pytest/2023-11-15-advance-pytest-fixtures-with-params.html</guid>
  <pubDate>Wed, 15 Nov 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Experimenting Rust with Python</title>
  <link>https://noklam.github.io/blog/posts/rust_learning/2023-11-11-rust-learning.html</link>
  <description><![CDATA[ 




<section id="section" class="level2">
<h2 class="anchored" data-anchor-id="section">2023-11-11</h2>
<p>As a Python only developer, I found it extremly hard to learn a new langauge particular with language like C++ or Rust that involves build steps. (Does it has debugger support like PyCharm?). I tried to learn Rust by reading the book last year, I finished a few chapters but never get to write any programme and I forgot most of it already. The only thing that stays is <a href="https://doc.rust-lang.org/book/">Rust</a> has a concept of lifetime and borrow checker.</p>
<p>I am hoping that by pushing my <a href="https://github.com/noklam/learning_rust">learning journey</a> online will give myself extra motivation. Ultimately I want to learn just enough Rust to optimise performance for Python program, it could be just simple algorithm, or if I ever learn enough I would like to write an event simulation engine (or at least learn to build one).</p>
<p>Key learning today: - <code>pyo3</code> seems to be the choice for Rust binding for Python. I checked what <code>ruff</code> <a href="https://github.com/astral-sh/ruff/blob/3e00ddce38e7847cbdfc5734226ca88eeb2c9128/pyproject.toml#L3C18-L3C25">used</a> (An insanely fast Python linter and now formatter). I prefer to stick with a good enough choice (noted that building and distributing Python package is a headache, I don’t want to spend my energy on this now) - I followed the <a href="https://pyo3.rs/v0.20.0/">PyO3 tutorial</a> to build a Rust binding for Python. - I try to follow as much as possible without forcing myself to understand everything. Building something functional first and try to break it is a better learning process for me. - Use of <code>#[pymodule]</code> and <code>maturin develop</code> to build Python package. - You can also run Python in Rust!</p>
<p>It build and install the package <code>string_sum</code>.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> import <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">string_sum</span></span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> dir<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">string_sum</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb1-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'__all__'</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'__builtins__'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'__cached__'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'__doc__'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'__file__'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'__loader__'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'__name__'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'__package__'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'__path__'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'__spec__'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'string_sum'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum_as_string'</span>]</span></code></pre></div>
<p>Questions - <code>string_sum.cpython-310-darwin.so</code>, this is the only file I find in the <code>site_package</code> alongside <code>__init__.py</code>. How do I find the interface other than doing <code>dir</code>?</p>


</section>

 ]]></description>
  <category>rust</category>
  <guid>https://noklam.github.io/blog/posts/rust_learning/2023-11-11-rust-learning.html</guid>
  <pubDate>Sat, 11 Nov 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>A Guide to Kedro Namespace Pipelines for Time Series Forecasting</title>
  <link>https://noklam.github.io/blog/posts/understand_namespace/2023-09-26-understand-kedro-namespace-pipeline.html</link>
  <description><![CDATA[ 




<section id="understanding-kedros-namespace-pipelines" class="level1">
<h1>Understanding Kedro’s Namespace Pipelines</h1>
<p>Kedro’s <a href="https://docs.kedro.org/en/0.18.0/tutorial/namespace_pipelines.html">Namespace Pipeline</a> is a powerful feature that allows for flexible pipeline reuse, especially handy for tasks like time series forecasting.</p>
<section id="getting-started" class="level2">
<h2 class="anchored" data-anchor-id="getting-started">Getting Started</h2>
<p>This blog post is based on this <a href="https://github.com/noklam/kedro_gallery/tree/master/loop-pipeline">example Kedro project</a>. Consider a basic pipeline node for monthly predictions:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> make_monthly_predictions(input_data):</span>
<span id="cb1-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fill your actual logic here!</span></span>
<span id="cb1-3">    output_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> input_data</span>
<span id="cb1-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> output_data</span></code></pre></div>
</div>
<p>Now, let’s create a simple one node pipeline using Kedro, this will be the building block of our pipelines:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> kedro.pipeline.modular_pipeline <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pipeline</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> kedro.pipeline <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> node</span>
<span id="cb2-3"></span>
<span id="cb2-4">base_pipeline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline(</span>
<span id="cb2-5">    [</span>
<span id="cb2-6">        node(</span>
<span id="cb2-7">            func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>make_monthly_predictions,</span>
<span id="cb2-8">            inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input_data"</span>],</span>
<span id="cb2-9">            outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output_data"</span>]</span>
<span id="cb2-10">        )</span>
<span id="cb2-11">    ]</span>
<span id="cb2-12">)</span></code></pre></div>
</div>
<p>It basically just call the <code>make_monthly_prediction</code>, and define what are the “inputs” and “outputs”.</p>
</section>
<section id="utilizing-namespace-for-efficiency" class="level2">
<h2 class="anchored" data-anchor-id="utilizing-namespace-for-efficiency">Utilizing Namespace for Efficiency</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://noklam.github.io/blog/posts/understand_namespace/forecast.jpg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">time series diagram</figcaption>
</figure>
</div>
<p>Now that we have our base pipeline, For time series forecasting, where predictions depend on previous results, we can efficiently handle this with [Namespace Pipelines]((https://docs.kedro.org/en/0.18.0/tutorial/namespace_pipelines.html). Start by creating a Namespace Pipeline:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">namespace_pipeline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline(</span>
<span id="cb3-2">    [</span>
<span id="cb3-3">        node(</span>
<span id="cb3-4">            func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>make_monthly_predictions,</span>
<span id="cb3-5">            inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input_data"</span>],</span>
<span id="cb3-6">            outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output_data"</span>]</span>
<span id="cb3-7">        )</span>
<span id="cb3-8">    ],</span>
<span id="cb3-9">    namespace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"namespace"</span></span>
<span id="cb3-10">)</span></code></pre></div>
</div>
<p>The <code>namespace</code> argument automatically adds a prefix to inputs and outputs. You can inspect the pipeline by printing it.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">namespace_pipeline</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Pipeline([
Node(make_monthly_predictions, ['input_data'], ['namespace.output_data'], None)
])</code></pre>
</div>
</div>
<p>If you want to keep some datasets from namespacing, you can specify the <code>inputs</code> or <code>outputs</code> argument of the <code>pipeline</code> function to overide it:</p>
<p>(https://docs.kedro.org/en/stable/nodes_and_pipelines/modular_pipelines.html#using-the-modular-pipeline-wrapper-to-provide-overrides). <img src="https://noklam.github.io/blog/posts/understand_namespace/pipeline_docstring.jpg" class="img-fluid" alt="pipeline.png"></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">namespace_pipeline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline(</span>
<span id="cb6-2">    [</span>
<span id="cb6-3">        node(</span>
<span id="cb6-4">            </span>
<span id="cb6-5">            func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>make_monthly_predictions,</span>
<span id="cb6-6">            inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input_data"</span>],</span>
<span id="cb6-7">            outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output_data"</span>]</span>
<span id="cb6-8">        )</span>
<span id="cb6-9">    ],</span>
<span id="cb6-10">    inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input_data"</span>],  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Escape from namespace</span></span>
<span id="cb6-11">    namespace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"namespace"</span></span>
<span id="cb6-12">)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">namespace_pipeline</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Pipeline([
Node(make_monthly_predictions, ['input_data'], ['namespace.output_data'], None)
])</code></pre>
</div>
</div>
</section>
<section id="building-the-time-series-pipeline" class="level2">
<h2 class="anchored" data-anchor-id="building-the-time-series-pipeline">Building the Time-Series Pipeline</h2>
<p>Now that we understand the mechanics of namespace, let’s build a time-series pipeline by iterating through months and connecting pipelines:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">months <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jan"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feb"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mar"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"apr"</span>]</span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> create_pipeline(months):</span>
<span id="cb9-4">    pipelines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb9-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(months) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb9-6">        curr, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> months[i], months[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb9-7">        pipelines.append(pipeline(base_pipeline,</span>
<span id="cb9-8">            outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output_data"</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.input_data"</span>},</span>
<span id="cb9-9">            namespace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>curr))</span>
<span id="cb9-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> pipeline(pipelines)</span>
<span id="cb9-11"></span>
<span id="cb9-12">final_pipeline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_pipeline(months)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">final_pipeline</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Pipeline([
Node(make_monthly_predictions, ['jan.input_data'], ['feb.input_data'], None),
Node(make_monthly_predictions, ['feb.input_data'], ['mar.input_data'], None),
Node(make_monthly_predictions, ['mar.input_data'], ['apr.input_data'], None)
])</code></pre>
</div>
</div>
<p>By visualizing the pipeline with <code>kedro viz</code>, you can observe the connections between each step. <img src="https://noklam.github.io/blog/posts/understand_namespace/connect.jpg" class="img-fluid" alt="connect pipeline"></p>


</section>
</section>

 ]]></description>
  <category>kedro</category>
  <guid>https://noklam.github.io/blog/posts/understand_namespace/2023-09-26-understand-kedro-namespace-pipeline.html</guid>
  <pubDate>Mon, 25 Sep 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Function overloading - singledispatch in Python with type hint</title>
  <link>https://noklam.github.io/blog/posts/python_single_dispatch/python-dispatch-typehint.html</link>
  <description><![CDATA[ 




<p>With Python&gt;=3.7, the <code>@singledispatch</code> method can now understand the type hints. It behaves like function overloading but it’s more dynamic than the static langauge.</p>
<p>Here is a quick example to demonstrate it.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> singledispatch</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@singledispatch</span></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> foo(x):</span>
<span id="cb1-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"foo"</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@foo.register</span></span>
<span id="cb2-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _(x: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>):</span>
<span id="cb2-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"It's a float"</span>)</span>
<span id="cb2-4"></span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@foo.register</span></span>
<span id="cb2-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _(x: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb2-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"It's a string now!"</span>)</span></code></pre></div>
</div>
<p>Let’s see how it works.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">foo(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>foo</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">foo(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>It's a float</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">foo(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>It's a string now!</code></pre>
</div>
</div>
<p>The function <code>foo</code> now understand the type of the argument and dispatch the corresponding functions. This is nicer than a big chunk of <code>if/else</code> statement since it’s less couple. It’s also easy to extend this. Imagine the <code>foo</code> function is import from a package, it’s easy to extend it.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Imagine `foo` was imported from a package</span></span>
<span id="cb9-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Now that you have a special type and you want to extend it from your own library, you don't need to touch the source code at all.</span></span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># from bar import foo</span></span>
<span id="cb9-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Nok:</span>
<span id="cb9-6">    ...</span>
<span id="cb9-7"></span>
<span id="cb9-8"></span>
<span id="cb9-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@foo.register</span></span>
<span id="cb9-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _(x: Nok):</span>
<span id="cb9-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Nok"</span>)</span>
<span id="cb9-12"></span>
<span id="cb9-13"></span>
<span id="cb9-14">nok <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Nok()</span>
<span id="cb9-15">foo(nok)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Nok</code></pre>
</div>
</div>
<p>This is only possible because Python is a dynamic language. In contrast, to achieve the same functionalities with monkey patching, you would need to copy the source code of the function and extend the <code>if/else</code> block.</p>
<p>Let’s dive a bit deeper to the decorator.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>([attr <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> attr <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dir</span>(foo) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> attr.startswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>)])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>['dispatch', 'register', 'registry']</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">foo.dispatch</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>&lt;function functools.singledispatch.&lt;locals&gt;.dispatch(cls)&gt;</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">foo.register</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>&lt;function functools.singledispatch.&lt;locals&gt;.register(cls, func=None)&gt;</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">foo.registry</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>mappingproxy({object: &lt;function __main__.foo(x)&gt;,
              float: &lt;function __main__._(x: float)&gt;,
              str: &lt;function __main__._(x: str)&gt;,
              __main__.Nok: &lt;function __main__._(x: __main__.Nok)&gt;,
              __main__.Nok: &lt;function __main__._(x: __main__.Nok)&gt;})</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> abc</span>
<span id="cb19-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(foo.registry, abc.Mapping)</span></code></pre></div>
</div>
<p>The <code>foo.registry</code> is the most interesting part. Basically, it’s a dictionary-like object which store the types. It behaves like</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"int"</span>:</span>
<span id="cb20-2">    do_something()</span>
<span id="cb20-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"float"</span>:</span>
<span id="cb20-4">    do_somthing_else()</span>
<span id="cb20-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb20-6">    do_this_instead()</span></code></pre></div>



 ]]></description>
  <category>python</category>
  <guid>https://noklam.github.io/blog/posts/python_single_dispatch/python-dispatch-typehint.html</guid>
  <pubDate>Wed, 16 Nov 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Mocking Python version for testing, use of Python Warning to raise error for specific Python Version</title>
  <link>https://noklam.github.io/blog/posts/python_warning/2023-07-08-python-warning-test-version-switch-mock.html</link>
  <description><![CDATA[ 




<section id="background" class="level1">
<h1>Background</h1>
<p>To release a new open bound version of library so it can be instsalled in any Python versio, while making sure that users are aware this is not supported yet. This article explains well <a href="https://iscinumpy.dev/post/bound-version-constraints/#pinning-the-python-version-is-special">Why setting upper bound for version is a bad idea</a> because it is not supported yet . TL;DR, if you cannot install it, you cannot even test if it works or not. In Python ecosystem, you relies on many libraries and it will take long time until all depedencies are updated, which in reality most likely it has not break anything at all.</p>
</section>
<section id="the-approach" class="level1">
<h1>The Approach</h1>
<p>We use <code>warnings</code> and <code>simplefilter</code>. To your surprise, <code>warnings</code> can be triggered as an <code>Exception</code> with the flag <code>-W</code>, i.e.&nbsp;<code>python my_program.py -W UserWarnings</code> or using the Python environment variable <code>PYTHONWARNINGS</code></p>
<p>See the <a href="https://docs.python.org/3/library/warnings.html#warnings.warn">standard Python Docs</a> about <code>warnings.warn</code> yourself &gt; warnings.warn(message, category=None, stacklevel=1, source=None) Issue a warning, or maybe ignore it or raise an exception.</p>
<p>(TBD, I am still working on the solution but I just need to write it down to document my state of mind lol)</p>


</section>

 ]]></description>
  <category>python</category>
  <guid>https://noklam.github.io/blog/posts/python_warning/2023-07-08-python-warning-test-version-switch-mock.html</guid>
  <pubDate>Wed, 16 Nov 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Kedro DuckDB</title>
  <link>https://noklam.github.io/blog/posts/kedro_duckdb/kedro-duckdb.html</link>
  <description><![CDATA[ 




<p>Exploring DuckDB and how can we use it with <code>kedro</code></p>
<section id="reference" class="level1">
<h1>Reference</h1>
<p>Extend the notebook from: https://colab.research.google.com/drive/1eg_TJpPQr2tyYKWjISJlX8IEAi8Qln3U?usp=sharing</p>
<section id="practical-sql-for-data-analysis" class="level2">
<h2 class="anchored" data-anchor-id="practical-sql-for-data-analysis"><strong>Practical SQL for Data Analysis</strong></h2>
<section id="what-you-can-do-together-with-pandas" class="level3">
<h3 class="anchored" data-anchor-id="what-you-can-do-together-with-pandas">What you can do <em>together with</em> Pandas</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>quiet duckdb</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sqlite3</span>
<span id="cb2-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> duckdb</span>
<span id="cb2-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span></code></pre></div>
</div>
<p><strong>Preparation</strong></p>
<p>Download the data and set up the Pandas data frames. We read the data into a Pandas DataFrame using DuckDB’s built-in Parquet reader.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>wget <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>q https:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>github.com<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>cwida<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>duckdb<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>releases<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>download<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>v1<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>lineitemsf1.snappy.parquet</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  HTTP/1.1 301 Moved Permanently
  Server: GitHub.com
  Date: Tue, 15 Nov 2022 22:34:17 GMT
  Content-Type: text/html; charset=utf-8
  Vary: X-PJAX, X-PJAX-Container, Turbo-Visit, Turbo-Frame, Accept-Encoding, Accept, X-Requested-With
  Location: https://github.com/duckdb/duckdb-data/releases/download/v1.0/lineitemsf1.snappy.parquet
  Cache-Control: no-cache
  Strict-Transport-Security: max-age=31536000; includeSubdomains; preload
  X-Frame-Options: deny
  X-Content-Type-Options: nosniff
  X-XSS-Protection: 0
  Referrer-Policy: origin-when-cross-origin, strict-origin-when-cross-origin
  Content-Security-Policy: default-src 'none'; base-uri 'self'; block-all-mixed-content; child-src github.com/assets-cdn/worker/ gist.github.com/assets-cdn/worker/; connect-src 'self' uploads.github.com objects-origin.githubusercontent.com www.githubstatus.com collector.github.com raw.githubusercontent.com api.github.com github-cloud.s3.amazonaws.com github-production-repository-file-5c1aeb.s3.amazonaws.com github-production-upload-manifest-file-7fdce7.s3.amazonaws.com github-production-user-asset-6210df.s3.amazonaws.com cdn.optimizely.com logx.optimizely.com/v1/events *.actions.githubusercontent.com wss://*.actions.githubusercontent.com online.visualstudio.com/api/v1/locations github-production-repository-image-32fea6.s3.amazonaws.com github-production-release-asset-2e65be.s3.amazonaws.com insights.github.com wss://alive.github.com; font-src github.githubassets.com; form-action 'self' github.com gist.github.com objects-origin.githubusercontent.com; frame-ancestors 'none'; frame-src viewscreen.githubusercontent.com notebooks.githubusercontent.com; img-src 'self' data: github.githubassets.com media.githubusercontent.com camo.githubusercontent.com identicons.github.com avatars.githubusercontent.com github-cloud.s3.amazonaws.com objects.githubusercontent.com objects-origin.githubusercontent.com secured-user-images.githubusercontent.com/ opengraph.githubassets.com github-production-user-asset-6210df.s3.amazonaws.com customer-stories-feed.github.com spotlights-feed.github.com *.githubusercontent.com; manifest-src 'self'; media-src github.com user-images.githubusercontent.com/ secured-user-images.githubusercontent.com/; script-src github.githubassets.com; style-src 'unsafe-inline' github.githubassets.com; worker-src github.com/assets-cdn/worker/ gist.github.com/assets-cdn/worker/
  Content-Length: 0
  X-GitHub-Request-Id: D47F:F2DE:2F3E29B:303AC52:637413E9
  HTTP/1.1 302 Found
  Server: GitHub.com
  Date: Tue, 15 Nov 2022 22:34:17 GMT
  Content-Type: text/html; charset=utf-8
  Vary: X-PJAX, X-PJAX-Container, Turbo-Visit, Turbo-Frame, Accept-Encoding, Accept, X-Requested-With
  Location: https://objects.githubusercontent.com/github-production-release-asset-2e65be/263853960/33e88e80-95cb-11ea-8bb7-2dfa0654592c?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20221115%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20221115T223417Z&amp;X-Amz-Expires=300&amp;X-Amz-Signature=07d1673053f9e8676510f46b62993e3b9b2428a17f00a613162f67690318e82f&amp;X-Amz-SignedHeaders=host&amp;actor_id=0&amp;key_id=0&amp;repo_id=263853960&amp;response-content-disposition=attachment%3B%20filename%3Dlineitemsf1.snappy.parquet&amp;response-content-type=application%2Foctet-stream
  Cache-Control: no-cache
  Strict-Transport-Security: max-age=31536000; includeSubdomains; preload
  X-Frame-Options: deny
  X-Content-Type-Options: nosniff
  X-XSS-Protection: 0
  Referrer-Policy: no-referrer-when-downgrade
  Content-Security-Policy: default-src 'none'; base-uri 'self'; block-all-mixed-content; child-src github.com/assets-cdn/worker/ gist.github.com/assets-cdn/worker/; connect-src 'self' uploads.github.com objects-origin.githubusercontent.com www.githubstatus.com collector.github.com raw.githubusercontent.com api.github.com github-cloud.s3.amazonaws.com github-production-repository-file-5c1aeb.s3.amazonaws.com github-production-upload-manifest-file-7fdce7.s3.amazonaws.com github-production-user-asset-6210df.s3.amazonaws.com cdn.optimizely.com logx.optimizely.com/v1/events *.actions.githubusercontent.com wss://*.actions.githubusercontent.com online.visualstudio.com/api/v1/locations github-production-repository-image-32fea6.s3.amazonaws.com github-production-release-asset-2e65be.s3.amazonaws.com insights.github.com wss://alive.github.com; font-src github.githubassets.com; form-action 'self' github.com gist.github.com objects-origin.githubusercontent.com; frame-ancestors 'none'; frame-src viewscreen.githubusercontent.com notebooks.githubusercontent.com; img-src 'self' data: github.githubassets.com media.githubusercontent.com camo.githubusercontent.com identicons.github.com avatars.githubusercontent.com github-cloud.s3.amazonaws.com objects.githubusercontent.com objects-origin.githubusercontent.com secured-user-images.githubusercontent.com/ opengraph.githubassets.com github-production-user-asset-6210df.s3.amazonaws.com customer-stories-feed.github.com spotlights-feed.github.com *.githubusercontent.com; manifest-src 'self'; media-src github.com user-images.githubusercontent.com/ secured-user-images.githubusercontent.com/; script-src github.githubassets.com; style-src 'unsafe-inline' github.githubassets.com; worker-src github.com/assets-cdn/worker/ gist.github.com/assets-cdn/worker/
  Content-Length: 0
  X-GitHub-Request-Id: D47F:F2DE:2F3E323:303ACEF:637413E9
  HTTP/1.1 200 OK
  Connection: keep-alive
  Content-Length: 206368635
  Content-Type: application/octet-stream
  Last-Modified: Tue, 07 Dec 2021 13:35:44 GMT
  ETag: "0x8D9B986787C89B4"
  Server: Windows-Azure-Blob/1.0 Microsoft-HTTPAPI/2.0
  x-ms-request-id: b588900b-a01e-0060-6d42-f95efa000000
  x-ms-version: 2020-04-08
  x-ms-creation-time: Tue, 17 Aug 2021 11:28:44 GMT
  x-ms-lease-status: unlocked
  x-ms-lease-state: available
  x-ms-blob-type: BlockBlob
  Content-Disposition: attachment; filename=lineitemsf1.snappy.parquet
  x-ms-server-encrypted: true
  Fastly-Restarts: 1
  Accept-Ranges: bytes
  Age: 0
  Date: Tue, 15 Nov 2022 22:34:18 GMT
  Via: 1.1 varnish
  X-Served-By: cache-lhr7337-LHR
  X-Cache: MISS
  X-Cache-Hits: 0
  X-Timer: S1668551658.108887,VS0,VE259</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>wget <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>q https:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>github.com<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>cwida<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>duckdb<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>releases<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>download<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>v1<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>orders.parquet</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>time</span>
<span id="cb6-2">lineitem <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> duckdb.query(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SELECT * FROM 'lineitemsf1.snappy.parquet'"</span>).to_df()</span>
<span id="cb6-3">orders <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> duckdb.query(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SELECT * FROM 'orders.parquet'"</span>).to_df()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: user 7.62 s, sys: 5.43 s, total: 13 s
Wall time: 14.1 s</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>time</span>
<span id="cb8-2">_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_parquet(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lineitemsf1.snappy.parquet"</span>)</span>
<span id="cb8-3">_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_parquet(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"orders.parquet"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: user 6.29 s, sys: 1.5 s, total: 7.78 s
Wall time: 5.81 s</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">con <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> duckdb.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>()</span>
<span id="cb10-2">con.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PRAGMA threads=2'</span>)</span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> timeit(fun, name):</span>
<span id="cb10-5">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb10-6">    start_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.monotonic()</span>
<span id="cb10-7">    fun()</span>
<span id="cb10-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> [name, time.monotonic() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start_time]</span>
<span id="cb10-9"></span>
<span id="cb10-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> plot_results(results, title):</span>
<span id="cb10-11">  df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame.from_dict({</span>
<span id="cb10-12">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>: [x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> results],</span>
<span id="cb10-13">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'time'</span>: [x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> results]</span>
<span id="cb10-14">  })</span>
<span id="cb10-15">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(title)</span>
<span id="cb10-16">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(df)</span></code></pre></div>
</div>
<p><strong>Ungrouped Aggregates</strong></p>
<p>This performs a simple set of ungrouped aggregates (sum, min, max, avg) over a column without any filters or other complex operations.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">ungrouped_aggregate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb11-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    SELECT SUM(l_extendedprice), MIN(l_extendedprice), MAX(l_extendedprice), AVG(l_extendedprice) FROM lineitem</span></span>
<span id="cb11-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb11-4"></span>
<span id="cb11-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> duckdb_ungrouped_aggregate(d_con):</span>
<span id="cb11-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(d_con.query(ungrouped_aggregate).to_df())</span>
<span id="cb11-7"></span>
<span id="cb11-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> duckdb_ungrouped_aggregate_1t():</span>
<span id="cb11-9">    duckdb_ungrouped_aggregate(duckdb)</span>
<span id="cb11-10"></span>
<span id="cb11-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> duckdb_ungrouped_aggregate_2t():</span>
<span id="cb11-12">    duckdb_ungrouped_aggregate(con)</span>
<span id="cb11-13"></span>
<span id="cb11-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> pandas_ungrouped_aggregate():</span>
<span id="cb11-15">  result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lineitem.groupby(</span>
<span id="cb11-16">    [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_returnflag'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_linestatus'</span>]</span>
<span id="cb11-17">  ).agg(</span>
<span id="cb11-18">    Sum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum'</span>),</span>
<span id="cb11-19">    Min<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min'</span>),</span>
<span id="cb11-20">    Max<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max'</span>),</span>
<span id="cb11-21">    Avg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean'</span>)</span>
<span id="cb11-22">  )</span>
<span id="cb11-23">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(result)</span>
<span id="cb11-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(lineitem.agg(Sum=('l_extendedprice', 'sum'), Min=('l_extendedprice', 'min'), Max=('l_extendedprice', 'max'), Avg=('l_extendedprice', 'mean')))</span></span>
<span id="cb11-25"></span>
<span id="cb11-26">ua_results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb11-27">ua_results.append(timeit(duckdb_ungrouped_aggregate_1t, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DuckDB (1T)'</span>))</span>
<span id="cb11-28">ua_results.append(timeit(duckdb_ungrouped_aggregate_2t, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DuckDB (2T)'</span>))</span>
<span id="cb11-29">ua_results.append(timeit(pandas_ungrouped_aggregate, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pandas'</span>))</span>
<span id="cb11-30">plot_results(ua_results, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Ungrouped Aggregate'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   sum(l_extendedprice)  min(l_extendedprice)  max(l_extendedprice)  \
0          2.295773e+11                 901.0              104949.5   

   avg(l_extendedprice)  
0          38255.138485  
   sum(l_extendedprice)  min(l_extendedprice)  max(l_extendedprice)  \
0          2.295773e+11                 901.0              104949.5   

   avg(l_extendedprice)  
0          38255.138485  
                                    Sum    Min       Max           Avg
l_returnflag l_linestatus                                             
A            F             5.658655e+10  904.0  104949.5  38273.129735
N            F             1.487505e+09  920.0  104049.5  38284.467761
             O             1.149352e+11  901.0  104749.5  38248.015609
R            F             5.656804e+10  904.0  104899.5  38250.854626
Ungrouped Aggregate
          name      time
0  DuckDB (1T)  0.052544
1  DuckDB (2T)  0.066239
2       Pandas  0.801278</code></pre>
</div>
</div>
<p><strong>Grouped Aggregates</strong></p>
<p>This performs the same set of aggregates, but this time grouped by two other columns (<em>l_returnflag</em> and <em>l_linestatus</em>).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">grouped_aggregate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb13-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">SELECT l_returnflag,</span></span>
<span id="cb13-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">       l_linestatus,</span></span>
<span id="cb13-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">       SUM(l_extendedprice),</span></span>
<span id="cb13-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">       MIN(l_extendedprice),</span></span>
<span id="cb13-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">       MAX(l_extendedprice),</span></span>
<span id="cb13-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">       AVG(l_extendedprice)</span></span>
<span id="cb13-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">FROM lineitem</span></span>
<span id="cb13-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">GROUP BY l_returnflag,</span></span>
<span id="cb13-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">         l_linestatus</span></span>
<span id="cb13-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb13-12"></span>
<span id="cb13-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> duckdb_grouped_aggregate(d_con):</span>
<span id="cb13-14">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(d_con.query(grouped_aggregate).to_df())</span>
<span id="cb13-15"></span>
<span id="cb13-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> duckdb_grouped_aggregate_1t():</span>
<span id="cb13-17">    duckdb_grouped_aggregate(duckdb)</span>
<span id="cb13-18"></span>
<span id="cb13-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> duckdb_grouped_aggregate_2t():</span>
<span id="cb13-20">    duckdb_grouped_aggregate(con)</span>
<span id="cb13-21"></span>
<span id="cb13-22"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> pandas_grouped_aggregate():</span>
<span id="cb13-23">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(lineitem.groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_returnflag'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_linestatus'</span>]).agg(Sum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum'</span>), Min<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min'</span>), Max<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max'</span>), Avg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean'</span>)))</span>
<span id="cb13-24"></span>
<span id="cb13-25">results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb13-26">results.append(timeit(duckdb_grouped_aggregate_1t, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DuckDB (1T)'</span>))</span>
<span id="cb13-27">results.append(timeit(duckdb_grouped_aggregate_2t, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DuckDB (2T)'</span>))</span>
<span id="cb13-28">results.append(timeit(pandas_grouped_aggregate, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pandas'</span>))</span>
<span id="cb13-29">plot_results(results, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Grouped Aggregate'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  l_returnflag l_linestatus  sum(l_extendedprice)  min(l_extendedprice)  \
0            N            O          1.149352e+11                 901.0   
1            R            F          5.656804e+10                 904.0   
2            A            F          5.658655e+10                 904.0   
3            N            F          1.487505e+09                 920.0   

   max(l_extendedprice)  avg(l_extendedprice)  
0              104749.5          38248.015609  
1              104899.5          38250.854626  
2              104949.5          38273.129735  
3              104049.5          38284.467761  
  l_returnflag l_linestatus  sum(l_extendedprice)  min(l_extendedprice)  \
0            N            O          1.149352e+11                 901.0   
1            R            F          5.656804e+10                 904.0   
2            A            F          5.658655e+10                 904.0   
3            N            F          1.487505e+09                 920.0   

   max(l_extendedprice)  avg(l_extendedprice)  
0              104749.5          38248.015609  
1              104899.5          38250.854626  
2              104949.5          38273.129735  
3              104049.5          38284.467761  
                                    Sum    Min       Max           Avg
l_returnflag l_linestatus                                             
A            F             5.658655e+10  904.0  104949.5  38273.129735
N            F             1.487505e+09  920.0  104049.5  38284.467761
             O             1.149352e+11  901.0  104749.5  38248.015609
R            F             5.656804e+10  904.0  104899.5  38250.854626
Grouped Aggregate
          name      time
0  DuckDB (1T)  0.115463
1  DuckDB (2T)  0.222520
2       Pandas  0.708696</code></pre>
</div>
</div>
<p><strong>Grouped Aggregate with a Filter</strong></p>
<p>This benchmark performs a grouped aggregate with a filter over the shipdate column.</p>
<p>As Pandas does not perform any projection pushdown, we include a version where we manually perform the projection pushdown by filtering only the columns we actually need before running the filter and aggregate.</p>
<p>This optimization is performed automatically in DuckDB by the query optimizer.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> duckdb_grouped_aggregate_filter(d_con):</span>
<span id="cb15-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(d_con.query(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb15-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">SELECT l_returnflag,</span></span>
<span id="cb15-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">       l_linestatus,</span></span>
<span id="cb15-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">       SUM(l_extendedprice),</span></span>
<span id="cb15-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">       MIN(l_extendedprice),</span></span>
<span id="cb15-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">       MAX(l_extendedprice),</span></span>
<span id="cb15-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">       AVG(l_extendedprice)</span></span>
<span id="cb15-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">FROM lineitem</span></span>
<span id="cb15-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">WHERE</span></span>
<span id="cb15-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    l_shipdate &lt;= DATE '1998-09-02'</span></span>
<span id="cb15-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">GROUP BY l_returnflag,</span></span>
<span id="cb15-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">         l_linestatus</span></span>
<span id="cb15-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span>).to_df())</span>
<span id="cb15-15"></span>
<span id="cb15-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> duckdb_grouped_aggregate_filter_1t():</span>
<span id="cb15-17">    duckdb_grouped_aggregate_filter(duckdb)</span>
<span id="cb15-18"></span>
<span id="cb15-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> duckdb_grouped_aggregate_filter_2t():</span>
<span id="cb15-20">    duckdb_grouped_aggregate_filter(con)</span>
<span id="cb15-21"></span>
<span id="cb15-22"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> pandas_grouped_aggregate_filter():</span>
<span id="cb15-23">  filtered_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lineitem[lineitem[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_shipdate'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1998-09-02"</span>]</span>
<span id="cb15-24">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(filtered_df.groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_returnflag'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_linestatus'</span>]).agg(Sum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum'</span>), Min<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min'</span>), Max<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max'</span>), Avg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean'</span>)))</span>
<span id="cb15-25"></span>
<span id="cb15-26"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> pandas_grouped_aggregate_filter_projection_pushdown():</span>
<span id="cb15-27">  pushed_down_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lineitem[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_shipdate'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_returnflag'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_linestatus'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>]]</span>
<span id="cb15-28">  filtered_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pushed_down_df[pushed_down_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_shipdate'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1998-09-02"</span>]</span>
<span id="cb15-29">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(filtered_df.groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_returnflag'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_linestatus'</span>]).agg(Sum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum'</span>), Min<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min'</span>), Max<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max'</span>), Avg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean'</span>)))</span>
<span id="cb15-30"></span>
<span id="cb15-31">results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb15-32">results.append(timeit(duckdb_grouped_aggregate_filter_1t, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DuckDB (1T)'</span>))</span>
<span id="cb15-33">results.append(timeit(duckdb_grouped_aggregate_filter_2t, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DuckDB (2T)'</span>))</span>
<span id="cb15-34">results.append(timeit(pandas_grouped_aggregate_filter, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pandas'</span>))</span>
<span id="cb15-35">results.append(timeit(pandas_grouped_aggregate_filter_projection_pushdown, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pandas (manual pushdown)'</span>))</span>
<span id="cb15-36">plot_results(results, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Grouped Aggregate + Filter'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  l_returnflag l_linestatus  sum(l_extendedprice)  min(l_extendedprice)  \
0            N            O          1.117017e+11                 901.0   
1            A            F          5.658655e+10                 904.0   
2            R            F          5.656804e+10                 904.0   
3            N            F          1.487505e+09                 920.0   

   max(l_extendedprice)  avg(l_extendedprice)  
0              104749.5          38249.117989  
1              104949.5          38273.129735  
2              104899.5          38250.854626  
3              104049.5          38284.467761  
  l_returnflag l_linestatus  sum(l_extendedprice)  min(l_extendedprice)  \
0            N            O          1.117017e+11                 901.0   
1            A            F          5.658655e+10                 904.0   
2            R            F          5.656804e+10                 904.0   
3            N            F          1.487505e+09                 920.0   

   max(l_extendedprice)  avg(l_extendedprice)  
0              104749.5          38249.117989  
1              104949.5          38273.129735  
2              104899.5          38250.854626  
3              104049.5          38284.467761  
                                    Sum    Min       Max           Avg
l_returnflag l_linestatus                                             
A            F             5.658655e+10  904.0  104949.5  38273.129735
N            F             1.487505e+09  920.0  104049.5  38284.467761
             O             1.116318e+11  901.0  104749.5  38249.322811
R            F             5.656804e+10  904.0  104899.5  38250.854626
                                    Sum    Min       Max           Avg
l_returnflag l_linestatus                                             
A            F             5.658655e+10  904.0  104949.5  38273.129735
N            F             1.487505e+09  920.0  104049.5  38284.467761
             O             1.116318e+11  901.0  104749.5  38249.322811
R            F             5.656804e+10  904.0  104899.5  38250.854626
Grouped Aggregate + Filter
                       name      time
0               DuckDB (1T)  0.281653
1               DuckDB (2T)  0.356302
2                    Pandas  2.889015
3  Pandas (manual pushdown)  1.625353</code></pre>
</div>
</div>
<p><strong>Grouped Aggregate with Join and Filter</strong></p>
<p>In this benchmark we expand on the previous benchmark by including a join and a filter on the joined-on table.</p>
<p>Note that the naive version in Pandas is extremely slow, as it performs a full join of the entire table including all the columns that are not used and all the rows that will be filtered out. For that reason we have included a separate benchmark in which we have manually optimized the Pandas code by pushing down the projections and the filters.</p>
<p>These optimizations are performed automatically in DuckDB by the query optimizer.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"></span>
<span id="cb17-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># projection &amp; filter on lineitem table</span></span>
<span id="cb17-3">lineitem_projected <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lineitem[</span>
<span id="cb17-4">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_shipdate'</span>,</span>
<span id="cb17-5">   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_orderkey'</span>,</span>
<span id="cb17-6">   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_linestatus'</span>,</span>
<span id="cb17-7">   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_returnflag'</span>,</span>
<span id="cb17-8">   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>]</span>
<span id="cb17-9">]</span>
<span id="cb17-10">lineitem_filtered <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lineitem_projected[</span>
<span id="cb17-11">  lineitem_projected[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_shipdate'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1998-09-02"</span>]</span>
<span id="cb17-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># projection and filter on order table</span></span>
<span id="cb17-13">orders_projected <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> orders[</span>
<span id="cb17-14">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o_orderkey'</span>,</span>
<span id="cb17-15">   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o_orderstatus'</span>]</span>
<span id="cb17-16">]</span>
<span id="cb17-17">orders_filtered <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> orders_projected[</span>
<span id="cb17-18">  orders_projected[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o_orderstatus'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'O'</span>]</span>
<span id="cb17-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># perform the join</span></span>
<span id="cb17-20">merged <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lineitem_filtered.merge(</span>
<span id="cb17-21">  orders_filtered,</span>
<span id="cb17-22">  left_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_orderkey'</span>,</span>
<span id="cb17-23">  right_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o_orderkey'</span>)</span>
<span id="cb17-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># perform the aggregate</span></span>
<span id="cb17-25">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged.groupby(</span>
<span id="cb17-26">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_returnflag'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_linestatus'</span>]</span>
<span id="cb17-27">).agg(</span>
<span id="cb17-28">  Sum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum'</span>),</span>
<span id="cb17-29">  Min<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min'</span>),</span>
<span id="cb17-30">  Max<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max'</span>),</span>
<span id="cb17-31">  Avg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean'</span>)</span>
<span id="cb17-32">)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">result</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Sum</th>
<th data-quarto-table-cell-role="th">Min</th>
<th data-quarto-table-cell-role="th">Max</th>
<th data-quarto-table-cell-role="th">Avg</th>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">l_returnflag</th>
<th data-quarto-table-cell-role="th">l_linestatus</th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">N</td>
<td data-quarto-table-cell-role="th">O</td>
<td>1.080448e+11</td>
<td>901.0</td>
<td>104749.5</td>
<td>38250.662806</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> duckdb_grouped_aggregate_filter_join(d_con):</span>
<span id="cb19-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(d_con.query(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb19-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">SELECT l_returnflag,</span></span>
<span id="cb19-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">       l_linestatus,</span></span>
<span id="cb19-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">       sum(l_extendedprice),</span></span>
<span id="cb19-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">       min(l_extendedprice),</span></span>
<span id="cb19-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">       max(l_extendedprice),</span></span>
<span id="cb19-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">       avg(l_extendedprice)</span></span>
<span id="cb19-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">FROM lineitem lineitem</span></span>
<span id="cb19-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">JOIN orders orders ON (l_orderkey=o_orderkey)</span></span>
<span id="cb19-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">WHERE l_shipdate &lt;= DATE '1998-09-02'</span></span>
<span id="cb19-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  AND o_orderstatus='O'</span></span>
<span id="cb19-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">GROUP BY l_returnflag,</span></span>
<span id="cb19-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">         l_linestatus</span></span>
<span id="cb19-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span>).to_df())</span>
<span id="cb19-16"></span>
<span id="cb19-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> duckdb_grouped_aggregate_filter_join_1t():</span>
<span id="cb19-18">    duckdb_grouped_aggregate_filter_join(duckdb)</span>
<span id="cb19-19"></span>
<span id="cb19-20"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> duckdb_grouped_aggregate_filter_join_2t():</span>
<span id="cb19-21">    duckdb_grouped_aggregate_filter_join(con)</span>
<span id="cb19-22"></span>
<span id="cb19-23"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> pandas_grouped_aggregate_filter_join():</span>
<span id="cb19-24">    merged <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lineitem.merge(orders, left_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_orderkey'</span>, right_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o_orderkey'</span>)</span>
<span id="cb19-25">    filtered_a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged[merged[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_shipdate'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1998-09-02"</span>]</span>
<span id="cb19-26">    filtered_b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> filtered_a[filtered_a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o_orderstatus'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'O'</span>]</span>
<span id="cb19-27">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> filtered_b.groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_returnflag'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_linestatus'</span>]).agg(Sum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum'</span>), Min<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min'</span>), Max<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max'</span>), Avg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean'</span>))</span>
<span id="cb19-28">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(result)</span>
<span id="cb19-29"></span>
<span id="cb19-30"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> pandas_grouped_aggregate_filter_join_manual_pushdown():</span>
<span id="cb19-31">    lineitem_projected <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lineitem[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_shipdate'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_orderkey'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_linestatus'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_returnflag'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>]]</span>
<span id="cb19-32">    lineitem_filtered <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lineitem_projected[lineitem_projected[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_shipdate'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1998-09-02"</span>]</span>
<span id="cb19-33">    orders_projected <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> orders[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o_orderkey'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o_orderstatus'</span>]]</span>
<span id="cb19-34">    orders_filtered <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> orders_projected[orders_projected[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o_orderstatus'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'O'</span>]</span>
<span id="cb19-35">    merged <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lineitem_filtered.merge(orders_filtered, left_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_orderkey'</span>, right_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o_orderkey'</span>)</span>
<span id="cb19-36">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged.groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_returnflag'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_linestatus'</span>]).agg(Sum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum'</span>), Min<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min'</span>), Max<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max'</span>), Avg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean'</span>))</span>
<span id="cb19-37">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(result)</span>
<span id="cb19-38"></span>
<span id="cb19-39">results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb19-40">results.append(timeit(duckdb_grouped_aggregate_filter_join_1t, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DuckDB (1T)'</span>))</span>
<span id="cb19-41">results.append(timeit(duckdb_grouped_aggregate_filter_join_2t, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DuckDB (2T)'</span>))</span>
<span id="cb19-42">results.append(timeit(pandas_grouped_aggregate_filter_join, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pandas'</span>))</span>
<span id="cb19-43">results.append(timeit(pandas_grouped_aggregate_filter_join_manual_pushdown, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pandas (manual pushdown)'</span>))</span>
<span id="cb19-44">plot_results(results, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Grouped Aggregate Join'</span>)</span>
<span id="cb19-45"></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  l_returnflag l_linestatus  sum(l_extendedprice)  min(l_extendedprice)  \
0            N            O          1.081147e+11                 901.0   

   max(l_extendedprice)  avg(l_extendedprice)  
0              104749.5          38250.450307  
  l_returnflag l_linestatus  sum(l_extendedprice)  min(l_extendedprice)  \
0            N            O          1.081147e+11                 901.0   

   max(l_extendedprice)  avg(l_extendedprice)  
0              104749.5          38250.450307  
                                    Sum    Min       Max           Avg
l_returnflag l_linestatus                                             
N            O             1.080448e+11  901.0  104749.5  38250.662806
                                    Sum    Min       Max           Avg
l_returnflag l_linestatus                                             
N            O             1.080448e+11  901.0  104749.5  38250.662806
Grouped Aggregate Join
                       name       time
0               DuckDB (1T)   0.218088
1               DuckDB (2T)   0.376592
2                    Pandas  11.403579
3  Pandas (manual pushdown)   2.765103</code></pre>
</div>
</div>
</section>
</section>
</section>
<section id="appendix-a-there-and-back-again-transferring-data-from-pandas-to-a-sql-engine-and-back" class="level1">
<h1>Appendix A: There and back again: Transferring data from Pandas to a SQL engine and back</h1>
<p>As Appendix A relies on the presence of an external PostgreSQL database server, the code cannot be executed in colab. The source code can be found here: https://gist.github.com/hannesmuehleisen/a95a39a1eda63aeb0ca13fd82d1ba49c</p>
</section>
<section id="appendix-b-pandassql" class="level1">
<h1>Appendix B: PandasSQL</h1>
<p>Note: we cannot run this on the original dataset, as colab will run out of memory and crash. Instead for the benchmark we add a sample clause to reduce the data set size to 10% of the original data set size.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>quiet pandasql</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandasql <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> psql</span>
<span id="cb22-2">pysqldf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> q: psql.sqldf(q, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">globals</span>())</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">lineitem_sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> duckdb.query(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SELECT * FROM 'lineitemsf1.snappy.parquet' USING SAMPLE 10%"</span>).to_df()</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">ungrouped_aggregate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb24-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    SELECT SUM(l_extendedprice), MIN(l_extendedprice), MAX(l_extendedprice), AVG(l_extendedprice) FROM lineitem_sample</span></span>
<span id="cb24-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb24-4"></span>
<span id="cb24-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> duckdb_ungrouped_aggregate(d_con):</span>
<span id="cb24-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(d_con.query(ungrouped_aggregate).to_df())</span>
<span id="cb24-7"></span>
<span id="cb24-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> duckdb_ungrouped_aggregate_1t():</span>
<span id="cb24-9">    duckdb_ungrouped_aggregate(duckdb)</span>
<span id="cb24-10"></span>
<span id="cb24-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> duckdb_ungrouped_aggregate_2t():</span>
<span id="cb24-12">    duckdb_ungrouped_aggregate(con)</span>
<span id="cb24-13"></span>
<span id="cb24-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> pandas_ungrouped_aggregate():</span>
<span id="cb24-15">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(lineitem_sample.agg(Sum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum'</span>), Min<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min'</span>), Max<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max'</span>), Avg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean'</span>)))</span>
<span id="cb24-16"></span>
<span id="cb24-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> ungrouped_aggregate_pandasql():</span>
<span id="cb24-18">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(pysqldf(ungrouped_aggregate))</span>
<span id="cb24-19"></span>
<span id="cb24-20">ua_results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb24-21">ua_results.append(timeit(duckdb_ungrouped_aggregate_1t, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DuckDB (1T)'</span>))</span>
<span id="cb24-22">ua_results.append(timeit(duckdb_ungrouped_aggregate_2t, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DuckDB (2T)'</span>))</span>
<span id="cb24-23">ua_results.append(timeit(pandas_ungrouped_aggregate, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pandas'</span>))</span>
<span id="cb24-24">ua_results.append(timeit(ungrouped_aggregate_pandasql, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PandaSQL'</span>))</span>
<span id="cb24-25">plot_results(ua_results, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Ungrouped Aggregate'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   sum(l_extendedprice)  min(l_extendedprice)  max(l_extendedprice)  \
0          2.318151e+10                 907.0              104899.5   

   avg(l_extendedprice)  
0          38240.198955  
   sum(l_extendedprice)  min(l_extendedprice)  max(l_extendedprice)  \
0          2.318151e+10                 907.0              104899.5   

   avg(l_extendedprice)  
0          38240.198955  
     l_extendedprice
Sum     2.318151e+10
Min     9.070000e+02
Max     1.048995e+05
Avg     3.824020e+04
   SUM(l_extendedprice)  MIN(l_extendedprice)  MAX(l_extendedprice)  \
0          2.318151e+10                 907.0              104899.5   

   AVG(l_extendedprice)  
0          38240.198955  
Ungrouped Aggregate
          name      time
0  DuckDB (1T)  0.039731
1  DuckDB (2T)  0.033024
2       Pandas  0.012675
3     PandaSQL  9.181672</code></pre>
</div>
</div>
</section>
<section id="appendix-c-directly-querying-parquet-files" class="level1">
<h1>Appendix C: Directly querying Parquet files</h1>
<p>In the benchmarks above, we fully read the parquet files into Pandas. However, DuckDB also has the capability of directly running queries on top of Parquet files. In this appendix, we show the performance of this compared to loading the file into Python first.</p>
<p>You can even use the wildcard syntax to run queries on multiple Parquet files in the same folder and create a unified single-table view over them (as long as they have the same schema).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># need to install pyarrow for pandas parquet reading</span></span>
<span id="cb26-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install pyarrow</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Requirement already satisfied: pyarrow in /Users/Nok_Lam_Chan/miniconda3/envs/duckdb/lib/python3.9/site-packages (10.0.0)
Requirement already satisfied: numpy&gt;=1.16.6 in /Users/Nok_Lam_Chan/miniconda3/envs/duckdb/lib/python3.9/site-packages (from pyarrow) (1.23.4)</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set up the view</span></span>
<span id="cb28-2">parquet_con <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> duckdb.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>()</span>
<span id="cb28-3">parquet_con.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CREATE VIEW lineitem_parquet AS SELECT * FROM 'lineitemsf1.snappy.parquet'"</span>)</span>
<span id="cb28-4">parquet_con.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CREATE VIEW orders_parquet AS SELECT * FROM 'orders.parquet'"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>&lt;duckdb.DuckDBPyConnection&gt;</code></pre>
</div>
</div>
</section>
<section id="ungrouped-aggregate" class="level1">
<h1>Ungrouped Aggregate</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">ungrouped_aggregate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb30-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    SELECT SUM(l_extendedprice), MIN(l_extendedprice), MAX(l_extendedprice), AVG(l_extendedprice) FROM lineitem_parquet</span></span>
<span id="cb30-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb30-4"></span>
<span id="cb30-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> duckdb_parquet_query(d_con):</span>
<span id="cb30-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(d_con.query(ungrouped_aggregate).to_df())</span>
<span id="cb30-7"></span>
<span id="cb30-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> duckdb_ungrouped_parquet_1t():</span>
<span id="cb30-9">  parquet_con.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PRAGMA threads=1'</span>)</span>
<span id="cb30-10">  duckdb_ungrouped_aggregate(parquet_con)</span>
<span id="cb30-11"> </span>
<span id="cb30-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> duckdb_ungrouped_parquet_2t():</span>
<span id="cb30-13">  parquet_con.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PRAGMA threads=2'</span>)</span>
<span id="cb30-14">  duckdb_ungrouped_aggregate(parquet_con)</span>
<span id="cb30-15"></span>
<span id="cb30-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> pandas_ungrouped_aggregate():</span>
<span id="cb30-17">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(lineitem.agg(Sum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum'</span>), Min<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min'</span>), Max<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max'</span>), Avg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean'</span>)))</span>
<span id="cb30-18"></span>
<span id="cb30-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> pandas_ungrouped_aggregate_parquet_load():</span>
<span id="cb30-20">  lineitem_pandas_parquet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_parquet(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lineitemsf1.snappy.parquet'</span>)</span>
<span id="cb30-21">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(lineitem_pandas_parquet.agg(Sum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum'</span>), Min<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min'</span>), Max<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max'</span>), Avg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean'</span>)))</span>
<span id="cb30-22"></span>
<span id="cb30-23"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> pandas_ungrouped_aggregate_parquet_load_pushdown():</span>
<span id="cb30-24">  lineitem_pandas_parquet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_parquet(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lineitemsf1.snappy.parquet'</span>, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>])</span>
<span id="cb30-25">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(lineitem_pandas_parquet.agg(Sum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum'</span>), Min<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min'</span>), Max<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max'</span>), Avg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean'</span>)))</span>
<span id="cb30-26"></span>
<span id="cb30-27">ua_results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb30-28">ua_results.append(timeit(duckdb_ungrouped_parquet_1t, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DuckDB (1 Thread)'</span>))</span>
<span id="cb30-29">ua_results.append(timeit(duckdb_ungrouped_parquet_2t, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DuckDB (2 Threads)'</span>))</span>
<span id="cb30-30">ua_results.append(timeit(pandas_ungrouped_aggregate, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pandas'</span>))</span>
<span id="cb30-31">ua_results.append(timeit(pandas_ungrouped_aggregate_parquet_load, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pandas + Parquet Load'</span>))</span>
<span id="cb30-32">ua_results.append(timeit(pandas_ungrouped_aggregate_parquet_load_pushdown, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pandas + Parquet Load (Pushdown)'</span>))</span>
<span id="cb30-33">plot_results(ua_results, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Ungrouped Aggregate (Parquet)'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   sum(l_extendedprice)  min(l_extendedprice)  max(l_extendedprice)  \
0          2.295773e+11                 901.0              104949.5   

   avg(l_extendedprice)  
0          38255.138485  
   sum(l_extendedprice)  min(l_extendedprice)  max(l_extendedprice)  \
0          2.295773e+11                 901.0              104949.5   

   avg(l_extendedprice)  
0          38255.138485  
     l_extendedprice
Sum     2.295773e+11
Min     9.010000e+02
Max     1.049495e+05
Avg     3.825514e+04
     l_extendedprice
Sum     2.295773e+11
Min     9.010000e+02
Max     1.049495e+05
Avg     3.825514e+04
     l_extendedprice
Sum     2.295773e+11
Min     9.010000e+02
Max     1.049495e+05
Avg     3.825514e+04
Ungrouped Aggregate (Parquet)
                               name      time
0                 DuckDB (1 Thread)  0.173902
1                DuckDB (2 Threads)  0.086305
2                            Pandas  0.050655
3             Pandas + Parquet Load  6.311870
4  Pandas + Parquet Load (Pushdown)  0.151299</code></pre>
</div>
</div>
</section>
<section id="grouped-aggregate-with-join-and-filter" class="level1">
<h1>Grouped Aggregate with Join and Filter</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> duckdb_grouped_aggregate_filter_join_pq(d_con):</span>
<span id="cb32-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(d_con.query(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb32-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">SELECT l_returnflag,</span></span>
<span id="cb32-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">       l_linestatus,</span></span>
<span id="cb32-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">       sum(l_extendedprice),</span></span>
<span id="cb32-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">       min(l_extendedprice),</span></span>
<span id="cb32-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">       max(l_extendedprice),</span></span>
<span id="cb32-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">       avg(l_extendedprice)</span></span>
<span id="cb32-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">FROM lineitem_parquet lineitem</span></span>
<span id="cb32-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">JOIN orders_parquet orders ON (l_orderkey=o_orderkey)</span></span>
<span id="cb32-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">WHERE l_shipdate &lt;= DATE '1998-09-02'</span></span>
<span id="cb32-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  AND o_orderstatus='O'</span></span>
<span id="cb32-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">GROUP BY l_returnflag,</span></span>
<span id="cb32-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">         l_linestatus</span></span>
<span id="cb32-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span>).to_df())</span>
<span id="cb32-16"></span>
<span id="cb32-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> duckdb_grouped_aggregate_filter_join_pq_1t():</span>
<span id="cb32-18">  parquet_con.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PRAGMA threads=1'</span>)</span>
<span id="cb32-19">  duckdb_grouped_aggregate_filter_join_pq(parquet_con)</span>
<span id="cb32-20"></span>
<span id="cb32-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> duckdb_grouped_aggregate_filter_join_pq_2t():</span>
<span id="cb32-22">  parquet_con.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PRAGMA threads=2'</span>)</span>
<span id="cb32-23">  duckdb_grouped_aggregate_filter_join_pq(parquet_con)</span>
<span id="cb32-24"></span>
<span id="cb32-25"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> pandas_grouped_aggregate_filter_join_pq():</span>
<span id="cb32-26">  lineitem_pandas_parquet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_parquet(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lineitemsf1.snappy.parquet'</span>)</span>
<span id="cb32-27">  orders_pandas_parquet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_parquet(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'orders.parquet'</span>)</span>
<span id="cb32-28">  merged <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lineitem_pandas_parquet.merge(orders, left_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_orderkey'</span>, right_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o_orderkey'</span>)</span>
<span id="cb32-29">  filtered_a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged[merged[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_shipdate'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1998-09-02"</span>]</span>
<span id="cb32-30">  filtered_b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> filtered_a[filtered_a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o_orderstatus'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'O'</span>]</span>
<span id="cb32-31">  result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> filtered_b.groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_returnflag'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_linestatus'</span>]).agg(Sum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum'</span>), Min<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min'</span>), Max<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max'</span>), Avg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean'</span>))</span>
<span id="cb32-32">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(result)</span>
<span id="cb32-33"></span>
<span id="cb32-34"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> pandas_grouped_aggregate_filter_join_manual_pushdown_pq():</span>
<span id="cb32-35">  lineitem_projected <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_parquet(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lineitemsf1.snappy.parquet'</span>, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_shipdate'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_orderkey'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_linestatus'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_returnflag'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>])</span>
<span id="cb32-36">  orders_projected <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_parquet(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'orders.parquet'</span>, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o_orderkey'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o_orderstatus'</span>])</span>
<span id="cb32-37">  lineitem_filtered <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lineitem_projected[lineitem_projected[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_shipdate'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1998-09-02"</span>]</span>
<span id="cb32-38">  orders_filtered <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> orders_projected[orders_projected[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o_orderstatus'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'O'</span>]</span>
<span id="cb32-39">  merged <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lineitem_filtered.merge(orders_filtered, left_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_orderkey'</span>, right_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o_orderkey'</span>)</span>
<span id="cb32-40">  result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged.groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_returnflag'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_linestatus'</span>]).agg(Sum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum'</span>), Min<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min'</span>), Max<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max'</span>), Avg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean'</span>))</span>
<span id="cb32-41">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(result)</span>
<span id="cb32-42"></span>
<span id="cb32-43">results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb32-44">results.append(timeit(duckdb_grouped_aggregate_filter_join_pq_1t, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DuckDB (1T)'</span>))</span>
<span id="cb32-45">results.append(timeit(duckdb_grouped_aggregate_filter_join_pq_2t, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DuckDB (2T)'</span>))</span>
<span id="cb32-46">results.append(timeit(pandas_grouped_aggregate_filter_join_pq, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pandas'</span>))</span>
<span id="cb32-47">results.append(timeit(pandas_grouped_aggregate_filter_join_manual_pushdown_pq, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pandas (manual pushdown)'</span>))</span>
<span id="cb32-48">plot_results(results, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Grouped Aggregate Join (Parquet)'</span>)</span>
<span id="cb32-49"></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  l_returnflag l_linestatus  sum(l_extendedprice)  min(l_extendedprice)  \
0            N            O          1.081147e+11                 901.0   

   max(l_extendedprice)  avg(l_extendedprice)  
0              104749.5          38250.450307  
  l_returnflag l_linestatus  sum(l_extendedprice)  min(l_extendedprice)  \
0            N            O          1.081147e+11                 901.0   

   max(l_extendedprice)  avg(l_extendedprice)  
0              104749.5          38250.450307  
                                    Sum    Min       Max           Avg
l_returnflag l_linestatus                                             
N            O             1.080448e+11  901.0  104749.5  38250.662806
                                    Sum    Min       Max           Avg
l_returnflag l_linestatus                                             
N            O             1.080448e+11  901.0  104749.5  38250.662806
Grouped Aggregate Join (Parquet)
                       name       time
0               DuckDB (1T)   0.828549
1               DuckDB (2T)   0.508537
2                    Pandas  13.954761
3  Pandas (manual pushdown)   2.337109</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Part II - Transform Pandas to DuckDB Query</span></span>
<span id="cb34-2"></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Part III - Create the DuckDB DataSet</span></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Part IV - Create the DuckDB Transformer</span></span></code></pre></div>
</div>


</section>

 ]]></description>
  <category>python</category>
  <guid>https://noklam.github.io/blog/posts/kedro_duckdb/kedro-duckdb.html</guid>
  <pubDate>Tue, 15 Nov 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Understanding the Kedro codebase - A quick dirty meta-analysis - (Part I)</title>
  <link>https://noklam.github.io/blog/posts/pandas_expert/kedro-meta-analysis.html</link>
  <description><![CDATA[ 




<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/pjq3QOxl9Ok" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<p>Inspired by this talk</p>
<section id="how-many-lines-of-code-in-kedro" class="level1">
<h1>How many lines of code in Kedro?</h1>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Counter</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">REPO_PATH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/Users/Nok_Lam_Chan/GitHub/kedro"</span>)</span>
<span id="cb2-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(REPO_PATH.iterdir())</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>[PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/test_requirements.txt'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/CODE_OF_CONDUCT.md'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/LICENSE.md'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tools'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro_technical_charter.pdf'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/.DS_Store'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/test'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/.pytest_cache'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/derby.log'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro.egg-info'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/.pre-commit-config.yaml'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/.coverage'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/Makefile'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/CITATION.cff'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/CODEOWNERS'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris-demo'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/pyproject.toml'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/trufflehog-ignore.txt'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/dependency'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/MANIFEST.in'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/docs'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/.readthedocs.yml'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/dep_tree.log'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/README.md'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/RELEASE.md'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/setup.py'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/demo-project'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/logs'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/.mypy_cache'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/.gitignore'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/static'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/CONTRIBUTING.md'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/behave.ini'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/.github'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/.gitpod.yml'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/info.log'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/coverage.xml'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/errors.log'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/.git'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/htmlcov'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/.vscode'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/data'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/conf'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/.circleci'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/import.log'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/notebooks'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/.run'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/.idea'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/src')]</code></pre>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> count_effective_line(counter, fn):</span>
<span id="cb4-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span> (fn) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb4-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> f:</span>
<span id="cb4-4">            counter[fn] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">lines_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Counter()</span>
<span id="cb5-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> fn <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> REPO_PATH.rglob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*/*.py"</span>):</span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     print(fn)</span></span>
<span id="cb5-4">    count_effective_line(lines_count, fn)</span>
<span id="cb5-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(lines_count)</span>
<span id="cb5-6">            </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Counter({PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/spark/test_spark_dataset.py'): 984, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/pipeline/test_pipeline.py'): 940, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/pipeline.py'): 926, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/session/test_session.py'): 891, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/cli/micropkg.py'): 854, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/cli/micropkg/test_micropkg_pull.py'): 846, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/core.py'): 748, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/cli/test_cli.py'): 730, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/io/test_data_catalog.py'): 685, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/cli/test_starters.py'): 639, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/cli_steps.py'): 623, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/node.py'): 612, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/docs/conf.py'): 598, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py'): 594, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/docs/build/conf.py'): 587, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/cli/micropkg/test_micropkg_package.py'): 581, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/session/test_session_extension_hooks.py'): 576, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/io/test_partitioned_dataset.py'): 565, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/cli/starters.py'): 552, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/partitioned_dataset.py'): 551, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/cli/pipeline/test_pipeline.py'): 522, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/io/test_incremental_dataset.py'): 503, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/context/test_context.py'): 485, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/config/test_templated_config.py'): 482, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/cli/test_project.py'): 479, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/cli/test_jupyter.py'): 470, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/cli/utils.py'): 469, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/runner.py'): 456, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/tensorflow/test_tensorflow_model_dataset.py'): 441, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/pandas/sql_dataset.py'): 438, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/matplotlib/test_matplotlib_writer.py'): 436, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/pipeline/test_node.py'): 434, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/session/session.py'): 423, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/spark/spark_dataset.py'): 422, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/pipeline/test_modular_pipeline.py'): 418, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/runner/test_parallel_runner.py'): 401, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/cli/project.py'): 392, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/pipeline/test_pipeline_with_transcoding.py'): 391, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/pandas/test_generic_dataset.py'): 383, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/session/conftest.py'): 381, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/pandas/test_sql_dataset.py'): 374, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/project/__init__.py'): 369, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/config/test_config.py'): 354, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/parallel_runner.py'): 353, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/context/context.py'): 345, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/pandas/test_parquet_dataset.py'): 344, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/cli/pipeline.py'): 336, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/pandas/test_gbq_dataset.py'): 315, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/spark/test_spark_hive_dataset.py'): 314, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/pandas/gbq_dataset.py'): 314, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/cli/test_catalog.py'): 305, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/ipython/test_ipython.py'): 304, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/pandas/test_csv_dataset.py'): 300, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/hooks/specs.py'): 296, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/modular_pipeline.py'): 290, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/cli/jupyter.py'): 282, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/pandas/test_excel_dataset.py'): 281, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/config/templated_config.py'): 281, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro/src/build/lib/resume_kedro/dagascii.py'): 275, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/runner/test_sequential_runner.py'): 273, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/pickle/test_pickle_dataset.py'): 269, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/cli/micropkg/test_micropkg_requirements.py'): 266, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/project/test_pipeline_discovery.py'): 260, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/pandas/excel_dataset.py'): 254, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/test_startup.py'): 250, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/config/common.py'): 248, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/pandas/generic_dataset.py'): 246, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/pandas/test_hdf_dataset.py'): 245, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/matplotlib/matplotlib_writer.py'): 243, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/pickle/pickle_dataset.py'): 243, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/pandas/test_xml_dataset.py'): 241, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/pandas/test_json_dataset.py'): 241, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/geojson/test_geojson_dataset.py'): 232, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/pillow/test_image_dataset.py'): 231, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/pandas/parquet_dataset.py'): 230, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/pipeline/test_pipeline_from_missing.py'): 227, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/io/test_memory_dataset.py'): 226, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/networkx/test_json_dataset.py'): 226, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/email/test_message_dataset.py'): 226, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris/docs/source/conf.py'): 225, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris-demo/docs/source/conf.py'): 225, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro/docs/source/conf.py'): 225, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/test/docs/source/conf.py'): 224, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/templates/project/{{ cookiecutter.repo_name }}/docs/source/conf.py'): 224, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/test_starter/{{ cookiecutter.repo_name }}/docs/source/conf.py'): 222, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/holoviews/test_holoviews_writer.py'): 220, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/pandas/test_feather_dataset.py'): 220, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/spark/spark_hive_dataset.py'): 220, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/runner/test_thread_runner.py'): 213, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/cli/cli.py'): 211, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/yaml/test_yaml_dataset.py'): 210, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/pandas/hdf_dataset.py'): 204, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/json/test_json_dataset.py'): 200, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/io/test_lambda_dataset.py'): 194, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/tracking/test_metrics_dataset.py'): 194, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/pandas/csv_dataset.py'): 194, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/pandas/feather_dataset.py'): 191, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/redis/redis_dataset.py'): 189, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/networkx/test_gml_dataset.py'): 188, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/networkx/test_graphml_dataset.py'): 188, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/tensorflow/tensorflow_model_dataset.py'): 188, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/email/message_dataset.py'): 188, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/text/test_text_dataset.py'): 187, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/pandas/json_dataset.py'): 187, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/tracking/test_json_dataset.py'): 185, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/cli/catalog.py'): 176, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/spark/spark_jdbc_dataset.py'): 175, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/pandas/xml_dataset.py'): 171, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/api/test_api_dataset.py'): 170, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/runner/conftest.py'): 168, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/redis/test_redis_dataset.py'): 165, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/ipython/__init__.py'): 164, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/dask/test_parquet_dataset.py'): 162, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/json/json_dataset.py'): 160, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/cli/conftest.py'): 159, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/geopandas/geojson_dataset.py'): 157, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/startup.py'): 156, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/thread_runner.py'): 156, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/yaml/yaml_dataset.py'): 155, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/tools/test_cli.py'): 154, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/plotly/json_dataset.py'): 154, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/networkx/json_dataset.py'): 150, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/networkx/gml_dataset.py'): 145, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/networkx/graphml_dataset.py'): 143, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/io/test_cached_dataset.py'): 142, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/pillow/image_dataset.py'): 142, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/api/api_dataset.py'): 142, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/pipeline/test_node_run.py'): 141, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/biosequence/biosequence_dataset.py'): 137, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/holoviews/holoviews_writer.py'): 137, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/dask/parquet_dataset.py'): 136, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/config/config.py'): 134, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/memory_dataset.py'): 132, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/text/text_dataset.py'): 131, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/environment.py'): 128, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/cli/test_cli_hooks.py'): 128, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/session/test_session_hook_manager.py'): 126, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/spark/test_spark_jdbc_dataset.py'): 121, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/plotly/plotly_dataset.py'): 117, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/cached_dataset.py'): 113, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/lambda_dataset.py'): 113, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/plotly/test_plotly_dataset.py'): 108, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/spark/deltatable_dataset.py'): 108, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/bioinformatics/test_biosequence_dataset.py'): 107, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/hooks/manager.py'): 106, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/sh_run.py'): 105, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/project/test_settings.py'): 102, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/plotly/test_json_dataset.py'): 101, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/io/test_core.py'): 96, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/logging/color_logger.py'): 95, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/conftest.py'): 89, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/session/test_store.py'): 89, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/spark/test_deltatable_dataset.py'): 89, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/cli/test_registry.py'): 88, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/sequential_runner.py'): 87, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/util.py'): 84, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/pipeline/test_pipeline_integration.py'): 84, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/cli/pipeline/conftest.py'): 84, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/test_starter/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/pipelines/data_science/nodes.py'): 80, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/project/test_pipeline_registry.py'): 79, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/cli/micropkg/conftest.py'): 79, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/hooks/test_manager.py'): 75, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris/src/iris/nodes.py'): 74, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris-demo/src/iris_demo/nodes.py'): 74, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro/src/resume_kedro/nodes.py'): 74, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro/src/build/lib/resume_kedro/nodes.py'): 74, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/tracking/metrics_dataset.py'): 68, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/spark/test_memory_dataset.py'): 67, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tools/cli.py'): 62, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris-demo/src/iris_demo/settings.py'): 62, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/project/test_logging.py'): 58, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro/src/build/lib/resume_kedro/settings.py'): 56, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/test_starter/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/pipelines/data_engineering/nodes.py'): 51, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/cli/registry.py'): 50, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/cli/hooks/manager.py'): 49, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/test/src/test/__main__.py'): 47, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris/src/iris/__main__.py'): 47, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris-demo/src/iris_demo/__main__.py'): 47, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/test_starter/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/__main__.py'): 47, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro/src/resume_kedro/__main__.py'): 47, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro/src/build/lib/resume_kedro/__main__.py'): 47, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/templates/project/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/__main__.py'): 47, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/tracking/json_dataset.py'): 47, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/cli/hooks/specs.py'): 46, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/session/shelvestore.py'): 43, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/test/src/tests/test_run.py'): 41, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/spark/conftest.py'): 41, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/templates/project/{{ cookiecutter.repo_name }}/src/tests/test_run.py'): 41, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/test_starter/{{ cookiecutter.repo_name }}/src/tests/test_run.py'): 40, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/test/src/setup.py'): 39, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris/src/tests/test_run.py'): 39, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris-demo/src/setup.py'): 39, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris-demo/src/tests/test_run.py'): 39, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/test_starter/{{ cookiecutter.repo_name }}/src/setup.py'): 39, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/test_starter/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/settings.py'): 39, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro/src/tests/test_run.py'): 39, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro/src/resume_kedro/pipeline.py'): 39, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/config/abstract_config.py'): 39, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/session/store.py'): 39, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/templates/project/{{ cookiecutter.repo_name }}/src/setup.py'): 39, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/templates/project/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/settings.py'): 39, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/pandas/__init__.py'): 39, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro/src/build/lib/resume_kedro/pipeline.py'): 38, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/test/src/test/settings.py'): 37, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris/src/setup.py'): 37, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris/src/iris/settings.py'): 37, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro/src/setup.py'): 37, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/conftest.py'): 35, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris/src/iris/pipeline.py'): 33, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris-demo/src/iris_demo/pipeline.py'): 33, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/__init__.py'): 33, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/test_utils.py'): 30, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/utils.py'): 28, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/test_plugin/plugin.py'): 27, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/test_starter/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/pipelines/data_science/pipeline.py'): 27, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tools/circleci/github_scripts/kedro_version.py'): 26, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/test_starter/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/pipelines/data_engineering/pipeline.py'): 26, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris/src/settings.py'): 24, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/cli/hooks/test_manager.py'): 22, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/extensions/ipython.py'): 22, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/test_starter/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/pipeline_registry.py'): 19, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/config/__init__.py'): 19, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris/src/iris/pipeline_registry.py'): 18, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris-demo/src/iris_demo/pipeline_registry.py'): 18, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro/src/resume_kedro/pipeline_registry.py'): 18, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro/src/build/lib/resume_kedro/pipeline_registry.py'): 18, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/logging/test_color_logger.py'): 16, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/__init__.py'): 16, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/templates/project/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/pipeline_registry.py'): 16, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/logging/__init__.py'): 15, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/networkx/__init__.py'): 15, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/spark/__init__.py'): 14, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/test/src/test/pipeline_registry.py'): 13, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/test_plugin/setup.py'): 12, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/__init__.py'): 11, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/hooks/markers.py'): 11, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/plotly/__init__.py'): 11, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/api/__init__.py'): 11, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/tracking/__init__.py'): 11, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/__main__.py'): 10, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/cli/hooks/markers.py'): 10, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/templates/pipeline/{{ cookiecutter.pipeline_name }}/__init__.py'): 10, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/templates/pipeline/{{ cookiecutter.pipeline_name }}/pipeline.py'): 10, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris/src/tests/test_pipeline.py'): 9, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris-demo/src/tests/test_pipeline.py'): 9, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro/src/tests/test_pipeline.py'): 9, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/__init__.py'): 9, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/templates/pipeline/{{ cookiecutter.pipeline_name }}/tests/test_pipeline.py'): 9, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/dask/__init__.py'): 8, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/redis/__init__.py'): 8, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/geopandas/__init__.py'): 8, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/pillow/__init__.py'): 8, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/json/__init__.py'): 8, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/biosequence/__init__.py'): 8, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/tensorflow/__init__.py'): 8, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/matplotlib/__init__.py'): 8, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/yaml/__init__.py'): 8, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/pickle/__init__.py'): 8, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/text/__init__.py'): 8, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/holoviews/__init__.py'): 8, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/email/__init__.py'): 8, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/test_starter/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/pipelines/data_science/__init__.py'): 7, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/test_starter/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/pipelines/data_engineering/__init__.py'): 7, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/context/__init__.py'): 7, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/cli/__init__.py'): 7, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/session/__init__.py'): 6, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/hooks/__init__.py'): 5, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/cli/hooks/__init__.py'): 5, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/test/src/test/__init__.py'): 4, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris/src/iris/__init__.py'): 4, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris-demo/src/iris_demo/__init__.py'): 4, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/test_starter/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/__init__.py'): 4, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro/src/resume_kedro/__init__.py'): 4, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro/src/build/lib/resume_kedro/__init__.py'): 4, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/templates/pipeline/{{ cookiecutter.pipeline_name }}/nodes.py'): 4, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/templates/project/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/__init__.py'): 4, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro/src/resume_kedro/settings.py'): 3, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/__init__.py'): 3, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/extensions/__init__.py'): 3, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/__init__.py'): 2, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/__init__.py'): 1})</code></pre>
</div>
</div>
</section>
<section id="clean-up-the-dictionary-a-little-bit" class="level1">
<h1>Clean up the dictionary a little bit</h1>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">line_counts_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(lines_count.items(), columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fullpath"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"line_of_code"</span>])</span>
<span id="cb7-2">line_counts_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fullpath"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> line_counts_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fullpath"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>)</span>
<span id="cb7-3">line_counts_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fullpath"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  line_counts_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fullpath"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/Users/Nok_Lam_Chan/GitHub/kedro/"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb7-4">line_counts_df.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">fullpath</th>
<th data-quarto-table-cell-role="th">line_of_code</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>tools/cli.py</td>
<td>62</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>features/environment.py</td>
<td>128</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">line_counts_df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"toplevel"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"module"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"submodule"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"filename"</span>]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> line_counts_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fullpath"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span>,expand<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">line_counts_df</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">fullpath</th>
<th data-quarto-table-cell-role="th">line_of_code</th>
<th data-quarto-table-cell-role="th">toplevel</th>
<th data-quarto-table-cell-role="th">module</th>
<th data-quarto-table-cell-role="th">submodule</th>
<th data-quarto-table-cell-role="th">filename</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>tools/cli.py</td>
<td>62</td>
<td>tools</td>
<td>cli.py</td>
<td>None</td>
<td>None</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>features/environment.py</td>
<td>128</td>
<td>features</td>
<td>environment.py</td>
<td>None</td>
<td>None</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>tests/test_utils.py</td>
<td>30</td>
<td>tests</td>
<td>test_utils.py</td>
<td>None</td>
<td>None</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>tests/conftest.py</td>
<td>89</td>
<td>tests</td>
<td>conftest.py</td>
<td>None</td>
<td>None</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>docs/conf.py</td>
<td>598</td>
<td>docs</td>
<td>conf.py</td>
<td>None</td>
<td>None</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">276</td>
<td>kedro/extras/datasets/pandas/feather_dataset.py</td>
<td>191</td>
<td>kedro</td>
<td>extras</td>
<td>datasets</td>
<td>pandas/feather_dataset.py</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">277</td>
<td>kedro/extras/datasets/pandas/hdf_dataset.py</td>
<td>204</td>
<td>kedro</td>
<td>extras</td>
<td>datasets</td>
<td>pandas/hdf_dataset.py</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">278</td>
<td>kedro/extras/datasets/pandas/csv_dataset.py</td>
<td>194</td>
<td>kedro</td>
<td>extras</td>
<td>datasets</td>
<td>pandas/csv_dataset.py</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">279</td>
<td>kedro/extras/datasets/pandas/excel_dataset.py</td>
<td>254</td>
<td>kedro</td>
<td>extras</td>
<td>datasets</td>
<td>pandas/excel_dataset.py</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">280</td>
<td>kedro/extras/datasets/pandas/gbq_dataset.py</td>
<td>314</td>
<td>kedro</td>
<td>extras</td>
<td>datasets</td>
<td>pandas/gbq_dataset.py</td>
</tr>
</tbody>
</table>

<p>281 rows × 6 columns</p>
</div>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Sort by Top level module</span></span>
<span id="cb10-2">line_counts_df.groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"toplevel"</span>]).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().sort_values(ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, by <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"line_of_code"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">line_of_code</th>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">toplevel</th>
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">tests</td>
<td>25341</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">kedro</td>
<td>18683</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">features</td>
<td>1587</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">docs</td>
<td>1185</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">resume-kedro</td>
<td>1007</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">iris-demo</td>
<td>550</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">iris</td>
<td>547</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">test</td>
<td>405</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">tools</td>
<td>88</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Interstingly we have roughly a 1:1 ratio between <code>tests</code> and <code>kedro</code></p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">line_counts_df.groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"module"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"submodule"</span>]).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().sort_values(ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, by <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"line_of_code"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">line_of_code</th>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">module</th>
<th data-quarto-table-cell-role="th">submodule</th>
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">extras</td>
<td data-quarto-table-cell-role="th">datasets</td>
<td>15775</td>
</tr>
<tr class="even">
<td rowspan="2" data-quarto-table-cell-role="th" data-valign="top">framework</td>
<td data-quarto-table-cell-role="th">cli</td>
<td>8837</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">session</td>
<td>2574</td>
</tr>
<tr class="even">
<td rowspan="2" data-quarto-table-cell-role="th" data-valign="top">pipeline</td>
<td data-quarto-table-cell-role="th">test_pipeline.py</td>
<td>940</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">pipeline.py</td>
<td>926</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">config</td>
<td data-quarto-table-cell-role="th">__init__.py</td>
<td>19</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">runner</td>
<td data-quarto-table-cell-role="th">__init__.py</td>
<td>16</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">pipeline</td>
<td data-quarto-table-cell-role="th">__init__.py</td>
<td>9</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">extras</td>
<td data-quarto-table-cell-role="th">__init__.py</td>
<td>2</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">framework</td>
<td data-quarto-table-cell-role="th">__init__.py</td>
<td>1</td>
</tr>
</tbody>
</table>

<p>74 rows × 1 columns</p>
</div>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Sort by Sub-module</span></span>
<span id="cb12-2">kedro_line_counts_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> line_counts_df[line_counts_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"toplevel"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"kedro"</span>]</span>
<span id="cb12-3">tmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kedro_line_counts_df.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"module"</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().rename(mapper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"line_of_code"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"module_line_of_code"</span>},axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> )</span>
<span id="cb12-4">kedro_line_counts_df_group <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kedro_line_counts_df.groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"module"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"submodule"</span>]).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().reset_index().merge(tmp, left_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"module"</span>, right_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"module"</span>)</span>
<span id="cb12-5"></span>
<span id="cb12-6"></span>
<span id="cb12-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># .sort_values(ascending=False, by ="line_of_code")</span></span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">kedro_line_counts_df.groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"module"</span>]).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().sort_values(ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, by <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"line_of_code"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">line_of_code</th>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">module</th>
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">extras</td>
<td>6871</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">framework</td>
<td>5246</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">io</td>
<td>2284</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">pipeline</td>
<td>1837</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">runner</td>
<td>1068</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">config</td>
<td>721</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">templates</td>
<td>443</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">ipython</td>
<td>164</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">utils.py</td>
<td>28</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">__init__.py</td>
<td>11</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">__main__.py</td>
<td>10</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sort by file </span></span>
<span id="cb14-2">kedro_line_counts_df_group.sort_values(ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, by <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"module_line_of_code"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"line_of_code"</span>])</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">module</th>
<th data-quarto-table-cell-role="th">submodule</th>
<th data-quarto-table-cell-role="th">line_of_code</th>
<th data-quarto-table-cell-role="th">module_line_of_code</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>extras</td>
<td>datasets</td>
<td>6734</td>
<td>6871</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">8</td>
<td>extras</td>
<td>logging</td>
<td>110</td>
<td>6871</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">7</td>
<td>extras</td>
<td>extensions</td>
<td>25</td>
<td>6871</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>extras</td>
<td>__init__.py</td>
<td>2</td>
<td>6871</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">10</td>
<td>framework</td>
<td>cli</td>
<td>3439</td>
<td>5246</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">14</td>
<td>framework</td>
<td>session</td>
<td>511</td>
<td>5246</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">12</td>
<td>framework</td>
<td>hooks</td>
<td>418</td>
<td>5246</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">13</td>
<td>framework</td>
<td>project</td>
<td>369</td>
<td>5246</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">11</td>
<td>framework</td>
<td>context</td>
<td>352</td>
<td>5246</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">15</td>
<td>framework</td>
<td>startup.py</td>
<td>156</td>
<td>5246</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">9</td>
<td>framework</td>
<td>__init__.py</td>
<td>1</td>
<td>5246</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">18</td>
<td>io</td>
<td>core.py</td>
<td>748</td>
<td>2284</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">19</td>
<td>io</td>
<td>data_catalog.py</td>
<td>594</td>
<td>2284</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">22</td>
<td>io</td>
<td>partitioned_dataset.py</td>
<td>551</td>
<td>2284</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">21</td>
<td>io</td>
<td>memory_dataset.py</td>
<td>132</td>
<td>2284</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">17</td>
<td>io</td>
<td>cached_dataset.py</td>
<td>113</td>
<td>2284</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">20</td>
<td>io</td>
<td>lambda_dataset.py</td>
<td>113</td>
<td>2284</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">16</td>
<td>io</td>
<td>__init__.py</td>
<td>33</td>
<td>2284</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">27</td>
<td>pipeline</td>
<td>pipeline.py</td>
<td>926</td>
<td>1837</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">26</td>
<td>pipeline</td>
<td>node.py</td>
<td>612</td>
<td>1837</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">25</td>
<td>pipeline</td>
<td>modular_pipeline.py</td>
<td>290</td>
<td>1837</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">24</td>
<td>pipeline</td>
<td>__init__.py</td>
<td>9</td>
<td>1837</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">30</td>
<td>runner</td>
<td>runner.py</td>
<td>456</td>
<td>1068</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">29</td>
<td>runner</td>
<td>parallel_runner.py</td>
<td>353</td>
<td>1068</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">32</td>
<td>runner</td>
<td>thread_runner.py</td>
<td>156</td>
<td>1068</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">31</td>
<td>runner</td>
<td>sequential_runner.py</td>
<td>87</td>
<td>1068</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">28</td>
<td>runner</td>
<td>__init__.py</td>
<td>16</td>
<td>1068</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">4</td>
<td>config</td>
<td>templated_config.py</td>
<td>281</td>
<td>721</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>config</td>
<td>common.py</td>
<td>248</td>
<td>721</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>config</td>
<td>config.py</td>
<td>134</td>
<td>721</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1</td>
<td>config</td>
<td>abstract_config.py</td>
<td>39</td>
<td>721</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">0</td>
<td>config</td>
<td>__init__.py</td>
<td>19</td>
<td>721</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">34</td>
<td>templates</td>
<td>project</td>
<td>410</td>
<td>443</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">33</td>
<td>templates</td>
<td>pipeline</td>
<td>33</td>
<td>443</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">23</td>
<td>ipython</td>
<td>__init__.py</td>
<td>164</td>
<td>164</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Total number of LOC</span></span>
<span id="cb15-2">kedro_line_counts_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"line_of_code"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>18683</code></pre>
</div>
</div>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>The kedro codebase is not huge, roughly 20000 line of code, compare to pandas which has &gt; 250000 of code, 10x smaller. The <code>datasets</code> and <code>framework</code> code is the largest module which isn’t surprise to me. The more surprising is how small <code>config</code> actually is, but it creates huge complexity in terms of a kedro project. The <code>cli</code> is also relatively huge as it takes ~3000 lines of code which I didn’t expected.</p>


</section>

 ]]></description>
  <category>kedro</category>
  <guid>https://noklam.github.io/blog/posts/pandas_expert/kedro-meta-analysis.html</guid>
  <pubDate>Sun, 13 Nov 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Being Python Expert</title>
  <link>https://noklam.github.io/blog/posts/python_expert/python-expert-decorator-generator-contextmanager.html</link>
  <description><![CDATA[ 




<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/cKPlPJyQrt4" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<p>This presentation introduce three concepts, <code>decorator</code>, <code>generator</code> and <code>contextmanager</code>. The presenter explains that Python is a Protocol oriented langauge brilliantly and put these three concepts together to illustrate a story. Ultimately, being a Python expert doesn’t mean that you write advance syntax, but using these pattern wisely with simple code. These three concepts both serves its own puprose and are orthogonal to each other, yet working nicely when they are composed together.</p>
<section id="meet-the-python-data-model" class="level2">
<h2 class="anchored" data-anchor-id="meet-the-python-data-model">Meet the Python Data Model</h2>
<p>With python, there are almost always a lower level <code>__</code> method corresponds to a higher-level function/syntax. It’s useful to change these behavior and understand how the Python Data Model work. You can find all the dunder <code>__</code> method here. https://docs.python.org/3/reference/datamodel.html</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__add__</span></span>
<span id="cb1-2"> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">repr</span>(s) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__repr__</span></span>
<span id="cb1-3"> x()     <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span></span></code></pre></div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Metaclasses</span></span>
<span id="cb2-2">`metaclass` exists to allow library code works nicely <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> user code. For example, how can a library author ensure that its user will follow its protocol <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> using it wrongly? Again you can dive into `__new__` <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ensuring that. In practice, the code <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> already written <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> `abc` <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> people use `<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>abstractmethod` `abc.ABCMeta`</span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Meet the `__builtins__` library</span></span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> builtins</span>
<span id="cb3-3">__build_class__</span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Nok:</span>
<span id="cb3-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb3-7"></span>
<span id="cb3-8">Nok() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This is possible because class is a Python keyword</span></span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># You can actually construct a class with a function.</span></span>
<span id="cb3-11">builtins.__build_class__(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Nok"</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>TypeError: __build_class__: not enough arguments</code></pre>
</div>
</div>
</section>
<section id="generator" class="level2">
<h2 class="anchored" data-anchor-id="generator">Generator</h2>
<ul>
<li>Eager vs Lazy</li>
<li>Process when data comes - memory efficient and no wait.</li>
<li><code>yield</code> control - interleaving. Idea of executing some code, then passing the output back to user, do something and continue.</li>
</ul>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> temptable(cur):</span>
<span id="cb5-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Create Table"</span>)</span>
<span id="cb5-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span></span>
<span id="cb5-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Drop Table"</span>)</span>
<span id="cb5-5"></span>
<span id="cb5-6"></span>
<span id="cb5-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> T:</span>
<span id="cb5-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__enter__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb5-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> temptable(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"123"</span>)</span>
<span id="cb5-10">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gen)</span>
<span id="cb5-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span></span>
<span id="cb5-12"></span>
<span id="cb5-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__exit__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args):</span>
<span id="cb5-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gen, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb5-15"></span>
<span id="cb5-16"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> T():</span>
<span id="cb5-17">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Finish"</span>)</span>
<span id="cb5-18"></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Create Table
Finish
Drop Table</code></pre>
</div>
</div>


</section>

 ]]></description>
  <category>python</category>
  <guid>https://noklam.github.io/blog/posts/python_expert/python-expert-decorator-generator-contextmanager.html</guid>
  <pubDate>Thu, 10 Nov 2022 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
