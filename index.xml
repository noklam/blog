<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>blog</title>
<link>https://noklam.github.io/blog/index.html</link>
<atom:link href="https://noklam.github.io/blog/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.3.450</generator>
<lastBuildDate>Wed, 06 Mar 2024 00:00:00 GMT</lastBuildDate>
<item>
  <title>Kedro Pipeline (1) - Slicing Pipeline Effortlessly üçï</title>
  <link>https://noklam.github.io/blog/posts/kedro-pipeline-slicing-pipeline/2024-03-06-Kedro-Pipeline-Slicing-Pipeline.html</link>
  <description><![CDATA[ 




<div class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> kedro.pipeline <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pipeline, node</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> kedro.pipeline.node <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Node</span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> foo():</span>
<span id="cb1-4">   <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bar"</span></span></code></pre></div>
</div>
<section id="kedro-node-and-pipelines" class="level1">
<h1>Kedro Node and Pipelines</h1>
<p>Kedro introduces the concepts of Nodes and Pipelines. A basic understanding of these concepts is assumed. However, if you‚Äôre unfamiliar, you can refer to the Nodes and Pipelines documentation for more details.</p>
<p>In essence, a Kedro Node acts as a thin wrapper around a Python function, specifying its inputs and outputs. On the other hand, a Pipeline is essentially a collection of Nodes that are strung together. When a pipeline is executed, Kedro resolves the dependencies between nodes to determine the correct order of execution.</p>
<p>While Kedro is primarily designed for data and machine learning applications, it can be utilized for executing any sequential tasks, including parallel processing if needed.</p>
<div class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">node_a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node(func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>foo, inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output_a"</span>)</span>
<span id="cb2-2">first_pipeline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline([])</span>
<span id="cb2-3">node_a, first_pipeline</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<pre><code>(Node(foo, None, 'output_a', None), Pipeline([]))</code></pre>
</div>
</div>
<p><code>pipeline</code> is a factory method that expects a list of <code>Node</code> and produce the <code>Pipeline</code> object. In this example, we have an empty <code>Pipeline</code>. Below is another valid example:</p>
<div class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">pipeline([node_a])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="26">
<pre><code>Pipeline([
Node(foo, None, 'output_a', None)
])</code></pre>
</div>
</div>
<section id="node-uniqueness" class="level2">
<h2 class="anchored" data-anchor-id="node-uniqueness">Node Uniqueness</h2>
<p>The pipeline in Kedro automatically validates Node instances. Specifically, nodes cannot produce the same output (though they can share the same input), and there cannot be duplicate nodes within the pipeline. This validation is crucial to ensure that the pipeline forms an executable Directed Acyclic Graph (DAG), allowing for proper execution and preventing any cyclic dependencies.</p>
<div class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">pipeline([node_a, node_a])</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>ValueError: Pipeline nodes must have unique names. The following node names appear more than once:

Free nodes:
  - foo(None) -&gt; [output_a]

You can name your nodes using the last argument of 'node()'.</code></pre>
</div>
</div>
<p>On the other hand, <code>Node</code> are considered equal if they have the same <code>inputs</code>, <code>outputs</code>and <code>function</code> (and node name if provided, it is an optional argument)</p>
<div class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">node_b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node(foo, inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output_a"</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">node_b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> node_a</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="34">
<pre><code>True</code></pre>
</div>
</div>
<p>Internally, it is comparing the <code>name</code> attribute, which is a combination of namespace, function name, inputs and outputs. This is not important to most Kedro users and are only used by Kedro internally.</p>
<div class="cell" data-execution_count="42">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">node_a.name</span>
<span id="cb11-2"></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="42">
<pre><code>'foo(None) -&gt; [output_a]'</code></pre>
</div>
</div>
<div class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">Node.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__str__</span>??</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Signature: Node.__str__(self)
Docstring: Return str(self).
Source:   
    def __str__(self):
        def _set_to_str(xset):
            return f"[{','.join(xset)}]"

        out_str = _set_to_str(self.outputs) if self._outputs else "None"
        in_str = _set_to_str(self.inputs) if self._inputs else "None"

        prefix = self._name + ": " if self._name else ""
        return prefix + f"{self._func_name}({in_str}) -&gt; {out_str}"
File:      ~/miniconda3/envs/blog/lib/python3.10/site-packages/kedro/pipeline/node.py
Type:      function</code></pre>
</div>
</div>
</section>
<section id="pipeline-arithmetic" class="level2">
<h2 class="anchored" data-anchor-id="pipeline-arithmetic">Pipeline Arithmetic</h2>
<p>The closest analogy to <code>Pipeline</code> is the Python <code>set</code>. They share simliary characteristics: - The elements cannot be repeated. - Pipelines can be added or subtracted</p>
<div class="cell" data-execution_count="53">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">pipeline([node_a]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pipeline([node_a])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="53">
<pre><code>Pipeline([
Node(foo, None, 'output_a', None)
])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="59">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node(foo, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>)</span>
<span id="cb17-2">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node(foo, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>)</span>
<span id="cb17-3">c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node(foo, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>)</span>
<span id="cb17-4">d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node(foo, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>)</span>
<span id="cb17-5"></span>
<span id="cb17-6">original_set <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>])</span>
<span id="cb17-7">original_pipeline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline([a,b,c])</span></code></pre></div>
</div>
<div class="cell" data-execution_count="67">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">pipeline([a]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> pipeline([b])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="67">
<pre><code>Pipeline([
Node(foo, None, 'a', None),
Node(foo, None, 'b', None)
])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="69">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">pipeline([a, b]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> pipeline([b])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="69">
<pre><code>Pipeline([
Node(foo, None, 'a', None)
])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="72">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">pipeline([a, b]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> pipeline([a])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="72">
<pre><code>Pipeline([
Node(foo, None, 'b', None)
])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="60">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">original_set<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="60">
<pre><code>{'a', 'b', 'c', 'd'}</code></pre>
</div>
</div>
<div class="cell" data-execution_count="61">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">pipeline([a,b,c])<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> pipeline([b,c,d]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># nodes in both pipelines</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="61">
<pre><code>Pipeline([
Node(foo, None, 'a', None),
Node(foo, None, 'b', None),
Node(foo, None, 'c', None),
Node(foo, None, 'd', None)
])</code></pre>
</div>
</div>
<div class="cell" data-execution_count="57">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">original_set <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>])</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="57">
<pre><code>{'b', 'c'}</code></pre>
</div>
</div>
<div class="cell" data-execution_count="62">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">pipeline([a,b,c]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> pipeline([b,c,d]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># only nodes that exist in both pipelines</span></span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="62">
<pre><code>Pipeline([
Node(foo, None, 'b', None),
Node(foo, None, 'c', None)
])</code></pre>
</div>
</div>
<p>Pipeline arithmetic is more useful for pipeline registration i.e.&nbsp;<code>pipeline_registry.py</code>. For example, you can combine your development pipeline and inference pipeline in different way.</p>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> fake_node(name):</span>
<span id="cb32-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> node(foo, inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>name, name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>name)</span>
<span id="cb32-3"></span>
<span id="cb32-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For simplicaition, let's assume each pipeline is just one single node.</span></span>
<span id="cb32-5">spark_pipeline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline([fake_node(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"spark"</span>)])</span>
<span id="cb32-6">feature_engineering <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline([fake_node(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature_engineering"</span>)])</span>
<span id="cb32-7">model_training <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline([fake_node(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"model_pipeline"</span>)])</span>
<span id="cb32-8">inference <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline([fake_node(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"inference"</span>)])</span></code></pre></div>
</div>
<p>With 4 base pipelines, you can combined them in different ways. For example you want a e2e pipeline which add all of them.</p>
<div class="cell" data-execution_count="78">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">e2e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> spark_pipeline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> feature_engineering <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> model_training <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> inference</span></code></pre></div>
</div>
<p>You can also have a <code>local</code> pipeline that skip only the <code>spark</code> pipeline.</p>
<div class="cell" data-execution_count="80">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">local <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> e2e <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> spark_pipeline</span>
<span id="cb34-2">local</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="80">
<pre><code>Pipeline([
Node(foo, None, 'feature_engineering', 'feature_engineering'),
Node(foo, None, 'inference', 'inference'),
Node(foo, None, 'model_pipeline', 'model_pipeline')
])</code></pre>
</div>
</div>
</section>
<section id="advance-pipeline-slicing" class="level2">
<h2 class="anchored" data-anchor-id="advance-pipeline-slicing">Advance Pipeline Slicing</h2>
<p>Kedro provides an <a href="https://demo.kedro.org/">interaction visualisation</a> that you can play around with, for this post I am gonna stick with the demo project and explains concepts about Pipeline and how you can slice pipeline and compose them.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#hide</span></span>
<span id="cb36-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>load_ext kedro.ipython</span>
<span id="cb36-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>cd <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>Users<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>Nok_Lam_Chan<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>kedro<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>viz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>demo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>project</span></code></pre></div>
</div>
<div class="cell" data-execution_count="38">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>reload_kedro <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>Users<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>Nok_Lam_Chan<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>kedro<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>viz<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>demo<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>project</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">[03/07/24 14:02:54] </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Reached after_catalog_created hook                                        <a href="file:///Users/Nok_Lam_Chan/dev/kedro/features/steps/test_plugin/plugin.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">plugin.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/dev/kedro/features/steps/test_plugin/plugin.py#15" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">15</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Kedro project modular-spaceflights                                     <a href="file:///Users/Nok_Lam_Chan/dev/kedro/kedro/ipython/__init__.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">__init__.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/dev/kedro/kedro/ipython/__init__.py#134" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">134</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Defined global variable <span style="color: #008000; text-decoration-color: #008000">'context'</span>, <span style="color: #008000; text-decoration-color: #008000">'session'</span>, <span style="color: #008000; text-decoration-color: #008000">'catalog'</span> and            <a href="file:///Users/Nok_Lam_Chan/dev/kedro/kedro/ipython/__init__.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">__init__.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/dev/kedro/kedro/ipython/__init__.py#135" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">135</span></a>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>         <span style="color: #008000; text-decoration-color: #008000">'pipelines'</span>                                                            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">               </span>
</pre>
</div>
</div>
<p>By using the <code>reload_kedro</code> inside a notebook, you can access the project <code>pipelines</code> object. Let‚Äôs say I want to filter out the <a href="https://demo.kedro.org/?pipeline_id=__default__&amp;selected_id=04ba733a">highlighted pipeline</a> like this (click on the ‚ÄúCreate Derived Features‚Äù): <img src="https://noklam.github.io/blog/posts/kedro-pipeline-slicing-pipeline/kedro-viz-selection.png" class="img-fluid" alt="Select a node on kedro-viz"></p>
<p>To filter this with the <code>Pipeline</code> API, you need two options. <code>from-nodes</code>(downstream) and <code>to-nodes</code> (upstream).</p>
<div class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">pipelines.keys()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="39">
<div class="ansi-escaped-output">
<pre><span class="ansi-magenta-fg ansi-bold">dict_keys</span><span class="ansi-bold">(</span><span class="ansi-bold">[</span><span class="ansi-green-fg">'__default__'</span>, <span class="ansi-green-fg">'Data ingestion'</span>, <span class="ansi-green-fg">'Modelling stage'</span>, <span class="ansi-green-fg">'Feature engineering'</span>, <span class="ansi-green-fg">'Reporting stage'</span>, <span class="ansi-green-fg">'Pre-modelling'</span><span class="ansi-bold">]</span><span class="ansi-bold">)</span></pre>
</div>
</div>
</div>
<div class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">full_pipeline</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="40">
<div class="ansi-escaped-output">

<pre><span class="ansi-magenta-fg ansi-bold">Pipeline</span><span class="ansi-bold">(</span><span class="ansi-bold">[</span>
<span class="ansi-magenta-fg ansi-bold">Node</span><span class="ansi-bold">(</span>apply_types_to_companies, <span class="ansi-green-fg">'companies'</span>, <span class="ansi-green-fg">'ingestion.int_typed_companies'</span>, <span class="ansi-green-fg">'apply_types_to_companies'</span><span class="ansi-bold">)</span>,
<span class="ansi-magenta-fg ansi-bold">Node</span><span class="ansi-bold">(</span>apply_types_to_reviews, <span class="ansi-bold">[</span><span class="ansi-green-fg">'reviews'</span>, <span class="ansi-green-fg">'params:ingestion.typing.reviews.columns_as_floats'</span><span class="ansi-bold">]</span>, <span class="ansi-green-fg">'ingestion.int_typed_reviews'</span>, <span class="ansi-green-fg">'apply_types_to_reviews'</span><span class="ansi-bold">)</span>,
<span class="ansi-magenta-fg ansi-bold">Node</span><span class="ansi-bold">(</span>apply_types_to_shuttles, <span class="ansi-green-fg">'shuttles'</span>, <span class="ansi-green-fg">'ingestion.int_typed_shuttles@pandas1'</span>, <span class="ansi-green-fg">'apply_types_to_shuttles'</span><span class="ansi-bold">)</span>,
<span class="ansi-magenta-fg ansi-bold">Node</span><span class="ansi-bold">(</span>aggregate_company_data, <span class="ansi-green-fg">'ingestion.int_typed_companies'</span>, <span class="ansi-green-fg">'ingestion.prm_agg_companies'</span>, <span class="ansi-green-fg">'company_agg'</span><span class="ansi-bold">)</span>,
<span class="ansi-magenta-fg ansi-bold">Node</span><span class="ansi-bold">(</span>combine_shuttle_level_information, <span class="ansi-bold">{</span><span class="ansi-green-fg">'shuttles'</span>: <span class="ansi-green-fg">'ingestion.int_typed_shuttles@pandas2'</span>, <span class="ansi-green-fg">'reviews'</span>: <span class="ansi-green-fg">'ingestion.int_typed_reviews'</span>, <span class="ansi-green-fg">'companies'</span>: <span class="ansi-green-fg">'ingestion.prm_agg_companies'</span><span class="ansi-bold">}</span>, <span class="ansi-bold">[</span><span class="ansi-green-fg">'prm_shuttle_company_reviews'</span>, <span class="ansi-green-fg">'prm_spine_table'</span><span class="ansi-bold">]</span>, <span class="ansi-green-fg">'combine_step'</span><span class="ansi-bold">)</span>,
<span class="ansi-magenta-fg ansi-bold">Node</span><span class="ansi-bold">(</span>create_derived_features, <span class="ansi-bold">[</span><span class="ansi-green-fg">'prm_spine_table'</span>, <span class="ansi-green-fg">'prm_shuttle_company_reviews'</span>, <span class="ansi-green-fg">'params:feature_engineering.feature.derived'</span><span class="ansi-bold">]</span>, <span class="ansi-green-fg">'feature_engineering.feat_derived_features'</span>, <span class="ansi-green-fg">'create_derived_features'</span><span class="ansi-bold">)</span>,
<span class="ansi-magenta-fg ansi-bold">Node</span><span class="ansi-bold">(</span>create_feature_importance, <span class="ansi-green-fg">'prm_spine_table'</span>, <span class="ansi-green-fg">'feature_importance_output'</span>, <span style="font-style:italic" class="ansi-magenta-fg">None</span><span class="ansi-bold">)</span>,
<span class="ansi-magenta-fg ansi-bold">Node</span><span class="ansi-bold">(</span>create_static_features, <span class="ansi-bold">[</span><span class="ansi-green-fg">'prm_shuttle_company_reviews'</span>, <span class="ansi-green-fg">'params:feature_engineering.feature.static'</span><span class="ansi-bold">]</span>, <span class="ansi-green-fg">'feature_engineering.feat_static_features'</span>, <span style="font-style:italic" class="ansi-magenta-fg">None</span><span class="ansi-bold">)</span>,
<span class="ansi-magenta-fg ansi-bold">Node</span><span class="ansi-bold">(</span><span class="ansi-bold">&lt;</span><span class="ansi-bright-magenta-fg ansi-bold">lambda</span><span class="ansi-bold">&gt;</span>, <span class="ansi-green-fg">'prm_spine_table'</span>, <span class="ansi-green-fg">'ingestion.prm_spine_table_clone'</span>, <span style="font-style:italic" class="ansi-magenta-fg">None</span><span class="ansi-bold">)</span>,
<span class="ansi-magenta-fg ansi-bold">Node</span><span class="ansi-bold">(</span>create_matplotlib_chart, <span class="ansi-green-fg">'prm_shuttle_company_reviews'</span>, <span class="ansi-green-fg">'reporting.confusion_matrix'</span>, <span style="font-style:italic" class="ansi-magenta-fg">None</span><span class="ansi-bold">)</span>,
<span class="ansi-yellow-fg">...</span>
<span class="ansi-bold">]</span><span class="ansi-bold">)</span></pre>
</div>
</div>
</div>
<div class="cell" data-execution_count="42">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1">node_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feature_engineering.create_derived_features"</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># make s|apipeline</span></span>
<span id="cb40-2">full_pipeline.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(from_nodes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[node_name], to_nodes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[node_name])</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="42">
<div class="ansi-escaped-output">

<pre><span class="ansi-magenta-fg ansi-bold">Pipeline</span><span class="ansi-bold">(</span><span class="ansi-bold">[</span>
<span class="ansi-magenta-fg ansi-bold">Node</span><span class="ansi-bold">(</span>create_derived_features, <span class="ansi-bold">[</span><span class="ansi-green-fg">'prm_spine_table'</span>, <span class="ansi-green-fg">'prm_shuttle_company_reviews'</span>, <span class="ansi-green-fg">'params:feature_engineering.feature.derived'</span><span class="ansi-bold">]</span>, <span class="ansi-green-fg">'feature_engineering.feat_derived_features'</span>, <span class="ansi-green-fg">'create_derived_features'</span><span class="ansi-bold">)</span>
<span class="ansi-bold">]</span><span class="ansi-bold">)</span></pre>
</div>
</div>
</div>
<p>This only select one node because by default the <code>filter</code> method apply both method as an <code>and</code> condition. So we need to apply the <code>filter</code> method separately.</p>
<div class="cell" data-execution_count="45">
<div class="sourceCode cell-code" id="cb41" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb41-1">full_pipeline.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(from_nodes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[node_name]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> full_pipeline.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(to_nodes<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[node_name])</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="45">
<div class="ansi-escaped-output">

<pre><span class="ansi-magenta-fg ansi-bold">Pipeline</span><span class="ansi-bold">(</span><span class="ansi-bold">[</span>
<span class="ansi-magenta-fg ansi-bold">Node</span><span class="ansi-bold">(</span>apply_types_to_companies, <span class="ansi-green-fg">'companies'</span>, <span class="ansi-green-fg">'ingestion.int_typed_companies'</span>, <span class="ansi-green-fg">'apply_types_to_companies'</span><span class="ansi-bold">)</span>,
<span class="ansi-magenta-fg ansi-bold">Node</span><span class="ansi-bold">(</span>apply_types_to_reviews, <span class="ansi-bold">[</span><span class="ansi-green-fg">'reviews'</span>, <span class="ansi-green-fg">'params:ingestion.typing.reviews.columns_as_floats'</span><span class="ansi-bold">]</span>, <span class="ansi-green-fg">'ingestion.int_typed_reviews'</span>, <span class="ansi-green-fg">'apply_types_to_reviews'</span><span class="ansi-bold">)</span>,
<span class="ansi-magenta-fg ansi-bold">Node</span><span class="ansi-bold">(</span>apply_types_to_shuttles, <span class="ansi-green-fg">'shuttles'</span>, <span class="ansi-green-fg">'ingestion.int_typed_shuttles@pandas1'</span>, <span class="ansi-green-fg">'apply_types_to_shuttles'</span><span class="ansi-bold">)</span>,
<span class="ansi-magenta-fg ansi-bold">Node</span><span class="ansi-bold">(</span>aggregate_company_data, <span class="ansi-green-fg">'ingestion.int_typed_companies'</span>, <span class="ansi-green-fg">'ingestion.prm_agg_companies'</span>, <span class="ansi-green-fg">'company_agg'</span><span class="ansi-bold">)</span>,
<span class="ansi-magenta-fg ansi-bold">Node</span><span class="ansi-bold">(</span>combine_shuttle_level_information, <span class="ansi-bold">{</span><span class="ansi-green-fg">'shuttles'</span>: <span class="ansi-green-fg">'ingestion.int_typed_shuttles@pandas2'</span>, <span class="ansi-green-fg">'reviews'</span>: <span class="ansi-green-fg">'ingestion.int_typed_reviews'</span>, <span class="ansi-green-fg">'companies'</span>: <span class="ansi-green-fg">'ingestion.prm_agg_companies'</span><span class="ansi-bold">}</span>, <span class="ansi-bold">[</span><span class="ansi-green-fg">'prm_shuttle_company_reviews'</span>, <span class="ansi-green-fg">'prm_spine_table'</span><span class="ansi-bold">]</span>, <span class="ansi-green-fg">'combine_step'</span><span class="ansi-bold">)</span>,
<span class="ansi-magenta-fg ansi-bold">Node</span><span class="ansi-bold">(</span>create_derived_features, <span class="ansi-bold">[</span><span class="ansi-green-fg">'prm_spine_table'</span>, <span class="ansi-green-fg">'prm_shuttle_company_reviews'</span>, <span class="ansi-green-fg">'params:feature_engineering.feature.derived'</span><span class="ansi-bold">]</span>, <span class="ansi-green-fg">'feature_engineering.feat_derived_features'</span>, <span class="ansi-green-fg">'create_derived_features'</span><span class="ansi-bold">)</span>,
<span class="ansi-magenta-fg ansi-bold">Node</span><span class="ansi-bold">(</span>joiner, <span class="ansi-bold">[</span><span class="ansi-green-fg">'prm_spine_table'</span>, <span class="ansi-green-fg">'feature_engineering.feat_static_features'</span>, <span class="ansi-green-fg">'feature_engineering.feat_derived_features'</span><span class="ansi-bold">]</span>, <span class="ansi-green-fg">'model_input_table'</span>, <span style="font-style:italic" class="ansi-magenta-fg">None</span><span class="ansi-bold">)</span>,
<span class="ansi-magenta-fg ansi-bold">Node</span><span class="ansi-bold">(</span>split_data, <span class="ansi-bold">[</span><span class="ansi-green-fg">'model_input_table'</span>, <span class="ansi-green-fg">'params:split_options'</span><span class="ansi-bold">]</span>, <span class="ansi-bold">[</span><span class="ansi-green-fg">'X_train'</span>, <span class="ansi-green-fg">'X_test'</span>, <span class="ansi-green-fg">'y_train'</span>, <span class="ansi-green-fg">'y_test'</span><span class="ansi-bold">]</span>, <span style="font-style:italic" class="ansi-magenta-fg">None</span><span class="ansi-bold">)</span>,
<span class="ansi-magenta-fg ansi-bold">Node</span><span class="ansi-bold">(</span>train_model, <span class="ansi-bold">[</span><span class="ansi-green-fg">'X_train'</span>, <span class="ansi-green-fg">'y_train'</span>, <span class="ansi-green-fg">'params:train_evaluation.model_options.linear_regression'</span><span class="ansi-bold">]</span>, <span class="ansi-bold">[</span><span class="ansi-green-fg">'train_evaluation.linear_regression.regressor'</span>, <span class="ansi-green-fg">'train_evaluation.linear_regression.experiment_params'</span><span class="ansi-bold">]</span>, <span style="font-style:italic" class="ansi-magenta-fg">None</span><span class="ansi-bold">)</span>,
<span class="ansi-magenta-fg ansi-bold">Node</span><span class="ansi-bold">(</span>train_model, <span class="ansi-bold">[</span><span class="ansi-green-fg">'X_train'</span>, <span class="ansi-green-fg">'y_train'</span>, <span class="ansi-green-fg">'params:train_evaluation.model_options.random_forest'</span><span class="ansi-bold">]</span>, <span class="ansi-bold">[</span><span class="ansi-green-fg">'train_evaluation.random_forest.regressor'</span>, <span class="ansi-green-fg">'train_evaluation.random_forest.experiment_params'</span><span class="ansi-bold">]</span>, <span style="font-style:italic" class="ansi-magenta-fg">None</span><span class="ansi-bold">)</span>,
<span class="ansi-yellow-fg">...</span>
<span class="ansi-bold">]</span><span class="ansi-bold">)</span></pre>
</div>
</div>
</div>
<p>Now we get the correct filtered pipeline as expected.</p>
</section>
<section id="more-notes" class="level2">
<h2 class="anchored" data-anchor-id="more-notes">More notes</h2>
<section id="the-pipeline.filter-support-or-operator" class="level3">
<h3 class="anchored" data-anchor-id="the-pipeline.filter-support-or-operator">The <code>Pipeline.filter</code> support <code>or</code> operator</h3>
<p>While the current filter supports many options, there may be some value to wrap around the Pipeline API to support things like <code>or</code>. This is only possible if you use the Python API directly but not CLI (with the example above). maybe something similar to the <a href="https://docs.getdbt.com/reference/node-selection/graph-operators">Graph Operators in dbt</a>.</p>
<p>e.g.&nbsp;</p>
<pre><code>kedro run --select "my_model+"         # select my_model and all children
kedro run --select "+my_model"         # select my_model and all parents
kedro run --select "+my_model+"        # select my_model, and all of its parents and children</code></pre>
</section>
<section id="selecting-or-slicing-multiple-pipeline-with-kedro-run" class="level3">
<h3 class="anchored" data-anchor-id="selecting-or-slicing-multiple-pipeline-with-kedro-run">Selecting or slicing multiple pipeline with <code>kedro run</code></h3>
<p>Since Pipeline API support arithmetic, it would be quite straight forward to support things like <code>kedro run --pipeline a+b</code> or <code>kedro run --pipeline a-b</code>. Let‚Äôs have a look what‚Äôs options are available for the CLI.</p>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb43" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb43-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>kedro run <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">help</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Usage: kedro run [OPTIONS]

  Run the pipeline.

Options:
  --from-inputs TEXT         A list of dataset names which should be used as a
                             starting point.
  --to-outputs TEXT          A list of dataset names which should be used as
                             an end point.
  --from-nodes TEXT          A list of node names which should be used as a
                             starting point.
  --to-nodes TEXT            A list of node names which should be used as an
                             end point.
  -n, --nodes TEXT           Run only nodes with specified names.
  -r, --runner TEXT          Specify a runner that you want to run the
                             pipeline with. Available runners:
                             'SequentialRunner', 'ParallelRunner' and
                             'ThreadRunner'.
  --async                    Load and save node inputs and outputs
                             asynchronously with threads. If not specified,
                             load and save datasets synchronously.
  -e, --env TEXT             Kedro configuration environment name. Defaults to
                             `local`.
  -t, --tags TEXT            Construct the pipeline using only nodes which
                             have this tag attached. Option can be used
                             multiple times, what results in a pipeline
                             constructed from nodes having any of those tags.
  -lv, --load-versions TEXT  Specify a particular dataset version (timestamp)
                             for loading.
  -p, --pipeline TEXT        Name of the registered pipeline to run. If not
                             set, the '__default__' pipeline is run.
  -ns, --namespace TEXT      Name of the node namespace to run.
  -c, --config FILE          Specify a YAML configuration file to load the run
                             command arguments from. If command line arguments
                             are provided, they will override the loaded ones.
  --conf-source PATH         Path of a directory where project configuration
                             is stored.
  --params TEXT              Specify extra parameters that you want to pass to
                             the context initialiser. Items must be separated
                             by comma, keys - by colon or equals sign,
                             example: param1=value1,param2=value2. Each
                             parameter is split by the first comma, so
                             parameter values are allowed to contain colons,
                             parameter keys are not. To pass a nested
                             dictionary as parameter, separate keys by '.',
                             example: param_group.param1:value1.
  -h, --help                 Show this message and exit.</code></pre>
</div>
</div>
<p>This is what happen when you do <code>kedro run -p training -t model_a</code>, it‚Äôs a two steps flitering: 1. Apply the <code>-p</code> pipeline name to select a key from the pipeline dictionary, it‚Äôs just <code>pipelines[pipeline_name]</code>, note this mean you can only select ONE pipeline at a time. 2. The pipeline is then further filtered with <code>Pipeline.filter</code></p>
<div class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb45" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb45-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> kedro.pipeline.pipeline <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Pipeline</span>
<span id="cb45-2">Pipeline.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>??</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Signature:
Pipeline.filter(
    self,
    tags: 'Iterable[str] | None' = None,
    from_nodes: 'Iterable[str] | None' = None,
    to_nodes: 'Iterable[str] | None' = None,
    node_names: 'Iterable[str] | None' = None,
    from_inputs: 'Iterable[str] | None' = None,
    to_outputs: 'Iterable[str] | None' = None,
    node_namespace: 'str | None' = None,
) -&gt; 'Pipeline'
Source:   
    def filter(  # noqa: PLR0913
        self,
        tags: Iterable[str] | None = None,
        from_nodes: Iterable[str] | None = None,
        to_nodes: Iterable[str] | None = None,
        node_names: Iterable[str] | None = None,
        from_inputs: Iterable[str] | None = None,
        to_outputs: Iterable[str] | None = None,
        node_namespace: str | None = None,
    ) -&gt; Pipeline:
        """Creates a new ``Pipeline`` object with the nodes that meet all of the
        specified filtering conditions.

        The new pipeline object is the intersection of pipelines that meet each
        filtering condition. This is distinct from chaining multiple filters together.

        Args:
            tags: A list of node tags which should be used to lookup
                the nodes of the new ``Pipeline``.
            from_nodes: A list of node names which should be used as a
                starting point of the new ``Pipeline``.
            to_nodes:  A list of node names which should be used as an
                end point of the new ``Pipeline``.
            node_names: A list of node names which should be selected for the
                new ``Pipeline``.
            from_inputs: A list of inputs which should be used as a starting point
                of the new ``Pipeline``
            to_outputs: A list of outputs which should be the final outputs of
                the new ``Pipeline``.
            node_namespace: One node namespace which should be used to select
                nodes in the new ``Pipeline``.

        Returns:
            A new ``Pipeline`` object with nodes that meet all of the specified
                filtering conditions.

        Raises:
            ValueError: The filtered ``Pipeline`` has no nodes.

        Example:
        ::

            &gt;&gt;&gt; pipeline = Pipeline(
            &gt;&gt;&gt;     [
            &gt;&gt;&gt;         node(func, "A", "B", name="node1"),
            &gt;&gt;&gt;         node(func, "B", "C", name="node2"),
            &gt;&gt;&gt;         node(func, "C", "D", name="node3"),
            &gt;&gt;&gt;     ]
            &gt;&gt;&gt; )
            &gt;&gt;&gt; pipeline.filter(node_names=["node1", "node3"], from_inputs=["A"])
            &gt;&gt;&gt; # Gives a new pipeline object containing node1 and node3.
        """
        # Use [node_namespace] so only_nodes_with_namespace can follow the same
        # *filter_args pattern as the other filtering methods, which all take iterables.
        node_namespace_iterable = [node_namespace] if node_namespace else None

        filter_methods = {
            self.only_nodes_with_tags: tags,
            self.from_nodes: from_nodes,
            self.to_nodes: to_nodes,
            self.only_nodes: node_names,
            self.from_inputs: from_inputs,
            self.to_outputs: to_outputs,
            self.only_nodes_with_namespace: node_namespace_iterable,
        }

        subset_pipelines = {
            filter_method(*filter_args)  # type: ignore
            for filter_method, filter_args in filter_methods.items()
            if filter_args
        }

        # Intersect all the pipelines subsets. We apply each filter to the original
        # pipeline object (self) rather than incrementally chaining filter methods
        # together. Hence the order of filtering does not affect the outcome, and the
        # resultant pipeline is unambiguously defined.
        # If this were not the case then, for example,
        # pipeline.filter(node_names=["node1", "node3"], from_inputs=["A"])
        # would give different outcomes depending on the order of filter methods:
        # only_nodes and then from_inputs would give node1, while only_nodes and then
        # from_inputs would give node1 and node3.
        filtered_pipeline = Pipeline(self.nodes)
        for subset_pipeline in subset_pipelines:
            filtered_pipeline &amp;= subset_pipeline

        if not filtered_pipeline.nodes:
            raise ValueError(
                "Pipeline contains no nodes after applying all provided filters"
            )
        return filtered_pipeline
File:      ~/dev/kedro/kedro/pipeline/pipeline.py
Type:      function</code></pre>
</div>
</div>
<p>This means that, if you have tags applied across multiple pipeline, you cannot filter it by tag, unless you apply the filter in the largest pipeline that contains all nodes. What if we can support things like: <code>kedro run -p feature+training -t model_a</code>?</p>


</section>
</section>
</section>

 ]]></description>
  <category>python</category>
  <category>kedro</category>
  <category>databricks</category>
  <guid>https://noklam.github.io/blog/posts/kedro-pipeline-slicing-pipeline/2024-03-06-Kedro-Pipeline-Slicing-Pipeline.html</guid>
  <pubDate>Wed, 06 Mar 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Kedro with Databricks Assets Bundle</title>
  <link>https://noklam.github.io/blog/posts/kedro-with-databricks-asset-bundle/2024-02-21-kedro-with-databricks-asset.html</link>
  <description><![CDATA[ 




<p>(Disclaimer: This is not an official documentation).</p>
<p>This post describe the process of using Databricks Assets bundle, deploy the notebook to a Databricks workspace and runs the notebook as a Databricks Job.</p>
<section id="requirements" class="level2">
<h2 class="anchored" data-anchor-id="requirements">Requirements</h2>
<p>I test this with the following dependencies: - kedro==0.19.2 - databricks-cli==0.214.0 # Installation guide: https://docs.databricks.com/en/dev-tools/cli/install.html</p>
</section>
<section id="create-a-project-with-kedro-and-databricks-asset-bundles" class="level2">
<h2 class="anchored" data-anchor-id="create-a-project-with-kedro-and-databricks-asset-bundles">Create a project with Kedro and Databricks Asset Bundles</h2>
<p>First, I create a new kedro project which contains a spark pipeline that are ready to run in databricks with <code>kedro new -s databricks-iris</code>. The workflow of using Databricks worksapce to develop Kedro project is documented <a href="https://docs.kedro.org/en/stable/deployment/databricks/databricks_notebooks_development_workflow.html">here</a>.</p>
<p>Next, you need to have the Databricks CLI installed, run this command to create a Databricks Assets Bundle template.</p>
<p><code>databricks bundle init</code>, it will prompt you for a few things. For testing purpose, I answer <code>yes</code> for all questions. The resulting folder look like this: <img src="https://noklam.github.io/blog/posts/kedro-with-databricks-asset-bundle/bundle-folder.png" class="img-fluid" alt="bundle folder structure"></p>
<p>This create yet another project template. Both <code>kedro new</code> and <code>databricks bundle init</code> assume you are creating new project. Since we have a Kedro project already, you don‚Äôt need the project related files. i.e.&nbsp;<code>requirements-dev.txt</code>, <code>setup.py</code> and <code>src/&lt;project_name&gt;</code>. You can then move everythin from a Kedro project inside the <code>bundle_example</code> folder so that they share the same root level. i.e.&nbsp;<code>pyproject.toml</code> (create by Kedro) should be in the same level as <code>databricks.yml</code></p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">`</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">databricks</span> bundle deploy <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-t</span> dev<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">`</span></span>
<span id="cb1-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Error:</span> terraform apply: exit status 1</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">Error:</span> cannot create job: default auth: cannot configure default credentials, please check https://docs.databricks.com/en/dev-tools/auth.html#databricks-client-unified-authentication to configure credentials for your preferred authentication method. Config: host=https://adb-4127266075722018.18.azuredatabricks.net. Env: DATABRICKS_HOST</span>
<span id="cb1-5"></span>
<span id="cb1-6">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">with</span> databricks_job.my_project_job,</span>
<span id="cb1-7">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">on</span> bundle.tf.json line 77, in resource.databricks_job.my_project_job:</span>
<span id="cb1-8">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">77:</span>       }</span></code></pre></div>
</section>
<section id="create-the-developer-token" class="level2">
<h2 class="anchored" data-anchor-id="create-the-developer-token">Create the Developer Token</h2>
<p>I try to submit a job immediately after creating the bundles, the error suggests that I need to create a developer token to submit job to Databricks locally. Go to Databricks workspace -&gt; User Settings -&gt; Developer -&gt; Generate New</p>
<p>Run in terminal: <code>export DATABRICKS_TOKEN=&lt;your-token&gt;</code></p>
</section>
<section id="submit-the-job" class="level2">
<h2 class="anchored" data-anchor-id="submit-the-job">Submit the job</h2>
<p>After this, I run <code>databricks bundle deploy -t dev</code> again and I see this in my workspace.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://noklam.github.io/blog/posts/kedro-with-databricks-asset-bundle/workspace-bundle.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">workspace-budnle</figcaption>
</figure>
</div>
<p>If you name your bundle <code>my_project</code>, you should see a <code>my_project_job.yml</code>. You will need to update the <code>tasks</code> and the <code>notebook_path</code> to the targeted notebook. <code>databricks bundle run -t dev my_project_job</code></p>
<p>For example:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb2-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">tasks</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">task_key</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> notebook_task</span></span>
<span id="cb2-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">job_cluster_key</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> job_cluster</span></span>
<span id="cb2-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">          </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">notebook_task</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">notebook_path</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> ../src/notebook.ipynb</span></span></code></pre></div>
<p>After this, I can submit a job and see this on Databricks. Unfortunately I cannot get it running because I have permission issue to create a Databricks Job, but I can see the job request on the UI.</p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;plaintext&quot;}">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Summary</span></span>
<span id="cb3-2">Although there are <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> much documentation on the Internet yet, it<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'s fairly easy to combine the two. It would be nice to automate some of the manual steps, but it is challenging because both takes a template approach and it'</span>s always hard to merge them automatically.</span></code></pre></div>
</div>
</section>
<section id="appendix" class="level1">
<h1>Appendix:</h1>
<section id="the-databricks-asset-bundle-use-entrypoints-for-deployment." class="level3">
<h3 class="anchored" data-anchor-id="the-databricks-asset-bundle-use-entrypoints-for-deployment.">The databricks asset bundle use <code>entrypoints</code> for deployment.</h3>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">   entry_points<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{</span>
<span id="cb4-2">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"packages"</span>: [</span>
<span id="cb4-3">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"main=my_project.main:main"</span></span>
<span id="cb4-4">        ]</span>
<span id="cb4-5">    },</span></code></pre></div>


</section>
</section>

 ]]></description>
  <category>python</category>
  <category>kedro</category>
  <category>databricks</category>
  <guid>https://noklam.github.io/blog/posts/kedro-with-databricks-asset-bundle/2024-02-21-kedro-with-databricks-asset.html</guid>
  <pubDate>Wed, 21 Feb 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Enhancing Debugging experience with Jupyter Magic</title>
  <link>https://noklam.github.io/blog/posts/enhance-debugging-experience-with-jupyter-magic/2024-02-20-Enhance-debugging-experience-with-jupyter-magic.html</link>
  <description><![CDATA[ 




<section id="overview" class="level1">
<h1>Overview</h1>
<p>The blog will cover the development of a new feature focused on enhancing the debugging experience for Kedro, a Python framework for building reproducible, maintainable, and modular data pipelines. This feature aims to streamline the debugging process by leveraging Jupyter notebooks and the <code>inspect</code> module to quickly restore the context of errors encountered within Kedro pipelines.</p>
</section>
<section id="motivation" class="level1">
<h1>Motivation</h1>
<p>Debugging complex data pipelines can be challenging, especially when errors occur deep within the pipeline. Traditional debugging methods often involve many manual steps, which can be cumbersome and time-consuming. By introducing a feature that integrates seamlessly with Kedro and Jupyter notebooks, it provides a more interactive debugging experience, we aim to improve the productivity and efficiency of Kedro users.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://noklam.github.io/blog/posts/enhance-debugging-experience-with-jupyter-magic/jupyter-load-node.gif" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">jupyter-debug-magic</figcaption>
</figure>
</div>
</section>
<section id="requirements-constraints" class="level1">
<h1>Requirements &amp; Constraints</h1>
<p>Functional Requirements: - Seamless integration with Jupyter notebooks - a line magic or cell magic - Automate steps to generate the code to run a Kedro Node.</p>
<p>Nice to have: - Able to usein IPython terminal, can be used with debugger.</p>
<section id="whats-in-scope-out-of-scope" class="level2">
<h2 class="anchored" data-anchor-id="whats-in-scope-out-of-scope">What‚Äôs in-scope &amp; out-of-scope?</h2>
<p>In-scope: - Integration of the feature with Jupyter notebooks. - Mapping of node inputs to function inputs using the inspect module. Out-of-scope: - Two way conversion between Notebook and source code. - Handle nested function definitions - that is a user defined function calling another user defined function which could be arbitary level of depth.</p>
</section>
<section id="methodology" class="level2">
<h2 class="anchored" data-anchor-id="methodology">Methodology</h2>
<section id="problem-statement" class="level3">
<h3 class="anchored" data-anchor-id="problem-statement">Problem Statement</h3>
<p>The challenge lies in mapping Kedro specific components to generate code that can be explored interactively in notebook to provide a seamless debugging experience. There are few key components that need to be mapped: - Generate code cell in Notebook - Loading the ‚ÄúDatasets‚Äù from a Kedro <code>DataCatalog</code> - Mapping Kedro Node‚Äôs to Python function. - A way to execute the code in the notebook - Import statements</p>
<section id="generate-code-cell-in-notebook" class="level4">
<h4 class="anchored" data-anchor-id="generate-code-cell-in-notebook">Generate Code cell in Notebook</h4>
<p>Originall</p>
</section>
<section id="kedro-node-and-python-function" class="level4">
<h4 class="anchored" data-anchor-id="kedro-node-and-python-function">Kedro Node and Python Function</h4>
<p>Kedro Node is a thin wrapper around Python function, with optional metadata such as <code>name</code> or <code>tags</code> to organise the node in a meaningful way. They are not too important for this particular feature, but useful for filtering pipeline. Kedro has a first party plugin <a href="https://github.com/kedro-org/kedro-viz"><code>kedro-viz</code></a> that provide an <a href="https://demo.kedro.org">interactive visualiation</a> of your pipeline.</p>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> kedro.pipeline <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> node</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> foo(a,b):</span>
<span id="cb1-4">    c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="cb1-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> c</span>
<span id="cb1-6"></span>
<span id="cb1-7">node(foo, inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"transaction_data"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"customer_data"</span>], outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output_data"</span>], name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"my_node"</span>, tags<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"s"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="4">
<pre><code>Node(foo, ['data_a', 'data_b'], ['output_data'], 'my_node')</code></pre>
</div>
</div>
<p>You can see how close the node resembles a typical Python function. The <code>inputs</code> and <code>outputs</code> refer to the name of a dataset of the Kedro <code>DataCatalog</code>. It is basically the key value of the definition of a dataset, which is ususally defined in YAML format.</p>
<p>This is an example of the definition of a dataset:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb3-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">transaction_data</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-2"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">type</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> pandas.CSVDataset</span></span>
<span id="cb3-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">filepath</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> data/01_raw/my_raw_data.csv</span></span></code></pre></div>
<p><code>DataCatalog</code> handles the I/O for Kedro Pipeline, the node only need to declares what data does it needs. The requirements here is that we need to map the inputs to dataset name properly. i.e. - transaction_data -&gt; a - customer_data -&gt; b</p>
<p>To run this in a notebook, we need to load the data and call the function.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> catalog.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"transaction_data"</span>)</span>
<span id="cb4-2">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> catalog.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"customer_data"</span>)</span>
<span id="cb4-3"></span>
<span id="cb4-4">foo(a, b)</span></code></pre></div>
<p>It‚Äôs fairly easy to map this particular example, but it becomes tricker if we need to handle <code>*args</code>, <code>**kwargs</code>, optional arguments and more. This is the syntax that <a href="https://docs.kedro.org/en/latest/nodes_and_pipelines/nodes.html#node-definition-syntax">Kedro Node support</a>.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> bar(a, b, c, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args, d<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>):</span>
<span id="cb5-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"bar"</span></span></code></pre></div>
<p>Consider this function, both node definitions below are valid: - <code>node(bar, ["transaction_data", "customer_data", "sales_data", "salary_data"], ["output_data"])</code> - <code>node(bar, ["transaction_data", "customer_data", "sales_data"], ["output_data"])</code></p>
<p>The solution of this is using <code>inspect</code> module to get the information about the function signature and node, and map it carefully with <code>inspect.Signature.bind</code>.</p>
</section>
<section id="executing-the-code-in-a-notebook" class="level4">
<h4 class="anchored" data-anchor-id="executing-the-code-in-a-notebook">Executing the code in a notebook</h4>
<p>There are 2 variations that we considered: 1. Code cell with the function defintion 2. Function call</p>
<p>Reusing the <code>foo</code> function mentioned earlier, with approach 1, we want to flatten it to a code cell in notebook</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> foo(a,b):</span>
<span id="cb6-2">    c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="cb6-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> c</span></code></pre></div>
<p>Notebook cell:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> catalog.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"transaction_data"</span>)</span>
<span id="cb7-2">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> catalog.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"customer_data"</span>)</span>
<span id="cb7-3"></span>
<span id="cb7-4">c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="cb7-5">c</span></code></pre></div>
<p>The benefit of this is user can split the cell to inject logic or inspecting variable easily. However, it becomes increasing challenging to retrive the function body only. <code>inspect</code> provide method to extract the definition of <code>foo</code>, which is a string representation of this:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> foo(a,b):</span>
<span id="cb8-2">    c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="cb8-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> c</span></code></pre></div>
<p>In order to make this runnable in a notebook cell, we need to handle a few things: 1. Remove the <code>def</code> line, which could be multiple lines 2. Remove the <code>return</code> statement, because it is not valid outside of function.</p>
<p>Again, it looks trivial at first, but if we start consideing multiple <code>return</code> in a function, it becomes unclear what we should do. In addition, a function could have decorator, which means removing the <code>def</code> isn‚Äôt always desired. At the end, we go with approach 2, which copy the function definition and make a call to it.</p>
<p>The notebook cell now look like this:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> catalog.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"transaction_data"</span>)</span>
<span id="cb9-2">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> catalog.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"customer_data"</span>)</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> foo(a,b): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Not necessary to copy</span></span>
<span id="cb9-5">    c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b</span>
<span id="cb9-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> c</span>
<span id="cb9-7"></span>
<span id="cb9-8">foo(a, b)</span></code></pre></div>
</section>
<section id="import-statement" class="level4">
<h4 class="anchored" data-anchor-id="import-statement">Import Statement</h4>
<p>We take a fairly simple approach for this. Using <code>inspect.getsourcefile(function)</code>, we can retrive the file that contains the function we desired. After that, we parse the file and retrive all import statements with specific keywords.</p>


</section>
</section>
</section>
</section>

 ]]></description>
  <category>python</category>
  <category>kedro</category>
  <category>jupyter</category>
  <guid>https://noklam.github.io/blog/posts/enhance-debugging-experience-with-jupyter-magic/2024-02-20-Enhance-debugging-experience-with-jupyter-magic.html</guid>
  <pubDate>Tue, 20 Feb 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Investigation of the Kedro default node names</title>
  <link>https://noklam.github.io/blog/posts/default_node_name/2024-02-08-default-node-name.html</link>
  <description><![CDATA[ 




<p><a href="https://github.com/kedro-org/kedro/issues/3575">Default node names are problematic #3575</a></p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>kedro <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>V</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>kedro, version 0.18.14</code></pre>
</div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>load_ext kedro.ipython</span>
<span id="cb3-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>reload_kedro default<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>node<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">[02/08/24 15:59:00] </span><span style="color: #800000; text-decoration-color: #800000">WARNING </span> Kedro extension was registered but couldn't find a Kedro project. Make  <a href="file:///Users/Nok_Lam_Chan/miniconda3/envs/blog/lib/python3.10/site-packages/kedro/ipython/__init__.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">__init__.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/miniconda3/envs/blog/lib/python3.10/site-packages/kedro/ipython/__init__.py#40" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">40</span></a>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>         sure you run <span style="color: #008000; text-decoration-color: #008000">'%reload_kedro &lt;project_root&gt;'</span>.                            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">              </span>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">[02/08/24 15:59:00] </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Kedro project default-node-name                                        <a href="file:///Users/Nok_Lam_Chan/miniconda3/envs/blog/lib/python3.10/site-packages/kedro/ipython/__init__.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">__init__.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/miniconda3/envs/blog/lib/python3.10/site-packages/kedro/ipython/__init__.py#108" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">108</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Defined global variable <span style="color: #008000; text-decoration-color: #008000">'context'</span>, <span style="color: #008000; text-decoration-color: #008000">'session'</span>, <span style="color: #008000; text-decoration-color: #008000">'catalog'</span> and            <a href="file:///Users/Nok_Lam_Chan/miniconda3/envs/blog/lib/python3.10/site-packages/kedro/ipython/__init__.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">__init__.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/miniconda3/envs/blog/lib/python3.10/site-packages/kedro/ipython/__init__.py#109" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">109</span></a>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>         <span style="color: #008000; text-decoration-color: #008000">'pipelines'</span>                                                            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">               </span>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">[02/08/24 15:59:08] </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Registered line magic <span style="color: #008000; text-decoration-color: #008000">'run_viz'</span>                                        <a href="file:///Users/Nok_Lam_Chan/miniconda3/envs/blog/lib/python3.10/site-packages/kedro/ipython/__init__.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">__init__.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/miniconda3/envs/blog/lib/python3.10/site-packages/kedro/ipython/__init__.py#115" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">115</span></a>
</pre>
</div>
</div>
<section id="node-names" class="level1">
<h1>Node name(s)</h1>
<ul>
<li>node.name (with namespace)</li>
<li>node.short_name</li>
<li>node._name</li>
<li>node._unique_key (hashable)</li>
<li>node._func_name</li>
</ul>
<section id="node.name-with-namespace" class="level2">
<h2 class="anchored" data-anchor-id="node.name-with-namespace">node.name (with namespace)</h2>
<ul>
<li>Needed, node, pipeline, runner (expected to be the public interface)</li>
<li>it‚Äôs using <strong>str</strong>(self)</li>
</ul>
<pre><code>@property
def name(self) -&gt; str:
    """Node's name.

    Returns:
        Node's name if provided or the name of its function.
    """
    node_name = self._name or str(self)
    if self.namespace:
        return f"{self.namespace}.{node_name}"
    return node_name</code></pre>
</section>
<section id="node.short_name" class="level2">
<h2 class="anchored" data-anchor-id="node.short_name">node.short_name</h2>
<ul>
<li>Not needed for kedro run</li>
<li>No reference in the entire codebase</li>
<li>deprecated will be a breaking change (technically) ## node._name</li>
<li>Only usage in <code>node.py</code> , not used outside</li>
</ul>
<pre class="ipython"><code>In [8]: n._unique_key
Out[8]: ('preprocess_companies_node', 'companies', 'preprocessed_companies')</code></pre>
</section>
<section id="node.unique_key-hashable" class="level2">
<h2 class="anchored" data-anchor-id="node.unique_key-hashable">node.unique_key (hashable)</h2>
<ul>
<li>Return 3 things, tuple of (node name, sorted_input, sorted_output)</li>
<li>node comparison, checking of unique node</li>
<li>hash(node) = hash(node._unique_key)</li>
<li>less than, larger than , what for? <code>__eq__</code> make sense.</li>
<li><code>__lt__</code> - <a href="https://github.com/McK-Private/private-kedro/pull/59">Private Kedro PR</a>
<ul>
<li>Doesn‚Äôt seem to be needed until I added the sorted(nodes) to ensure SequentialRunner have deterministic output ## node._func_name Usage:</li>
</ul></li>
<li><code>__str__</code></li>
<li><code>__repr__</code></li>
<li><code>short_name</code></li>
<li><code>__str__</code> and <code>__repr__</code> will call <code>node._func_name</code></li>
</ul>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">n <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipelines[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__default__"</span>].nodes[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Getting the first node</span></span></code></pre></div>
</div>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__str__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>:</span>
<span id="cb7-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _set_to_str(xset: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>:</span>
<span id="cb7-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"[</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">';'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join(xset)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">]"</span></span>
<span id="cb7-4"></span>
<span id="cb7-5">    out_str <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _set_to_str(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.outputs) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._outputs <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"None"</span></span>
<span id="cb7-6">    in_str <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _set_to_str(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.inputs) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._inputs <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"None"</span></span>
<span id="cb7-7"></span>
<span id="cb7-8">    prefix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">": "</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._name <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb7-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> prefix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>_func_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>in_str<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">) -&gt; </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>out_str<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span></code></pre></div>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"></span>
<span id="cb8-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _set_to_str(xset: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>:</span>
<span id="cb8-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"[</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">';'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join(xset)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">]"</span></span>
<span id="cb8-4"></span>
<span id="cb8-5"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> n</span>
<span id="cb8-6">out_str <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _set_to_str(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.outputs) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._outputs <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"None"</span></span>
<span id="cb8-7">in_str <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _set_to_str(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.inputs) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._inputs <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"None"</span></span>
<span id="cb8-8"></span>
<span id="cb8-9">prefix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">": "</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._name <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb8-10">prefix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>_func_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>in_str<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">) -&gt; </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>out_str<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="12">
<div class="ansi-escaped-output">
<pre><span class="ansi-green-fg">'split: split_data</span><span class="ansi-green-fg">(</span><span class="ansi-green-fg">[</span><span class="ansi-green-fg">example_iris_data;parameters</span><span class="ansi-green-fg">]</span><span class="ansi-green-fg">)</span><span class="ansi-green-fg"> -&gt; </span><span class="ansi-green-fg">[</span><span class="ansi-green-fg">X_train;X_test;y_train;y_test</span><span class="ansi-green-fg">]</span><span class="ansi-green-fg">'</span></pre>
</div>
</div>
</div>
<div class="cell" data-execution_count="14">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">n.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__str__</span>??</span></code></pre></div>
</div>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">n.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__str__</span>()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="13">
<div class="ansi-escaped-output">
<pre><span class="ansi-green-fg">'split: split_data</span><span class="ansi-green-fg">(</span><span class="ansi-green-fg">[</span><span class="ansi-green-fg">example_iris_data,parameters</span><span class="ansi-green-fg">]</span><span class="ansi-green-fg">)</span><span class="ansi-green-fg"> -&gt; </span><span class="ansi-green-fg">[</span><span class="ansi-green-fg">X_train,X_test,y_train,y_test</span><span class="ansi-green-fg">]</span><span class="ansi-green-fg">'</span></pre>
</div>
</div>
</div>
<div class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(n)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="5">
<div class="ansi-escaped-output">
<pre><span class="ansi-green-fg">'split: split_data</span><span class="ansi-green-fg">(</span><span class="ansi-green-fg">[</span><span class="ansi-green-fg">example_iris_data,parameters</span><span class="ansi-green-fg">]</span><span class="ansi-green-fg">)</span><span class="ansi-green-fg"> -&gt; </span><span class="ansi-green-fg">[</span><span class="ansi-green-fg">X_train,X_test,y_train,y_test</span><span class="ansi-green-fg">]</span><span class="ansi-green-fg">'</span></pre>
</div>
</div>
</div>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">repr</span>(n)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"></pre>
</div>
<div class="cell-output cell-output-display" data-execution_count="7">
<div class="ansi-escaped-output">
<pre><span class="ansi-green-fg">"Node</span><span class="ansi-green-fg">(</span><span class="ansi-green-fg">split_data, </span><span class="ansi-green-fg">[</span><span class="ansi-green-fg">'example_iris_data', 'parameters'</span><span class="ansi-green-fg">]</span><span class="ansi-green-fg">, </span><span class="ansi-green-fg">[</span><span class="ansi-green-fg">'X_train', 'X_test', 'y_train', 'y_test'</span><span class="ansi-green-fg">]</span><span class="ansi-green-fg">, 'split'</span><span class="ansi-green-fg">)</span><span class="ansi-green-fg">"</span></pre>
</div>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">Notes:</span>
<span id="cb13-2">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> Duplicate Node are checked <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> `node.name` <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> `node.unique_key`</span></code></pre></div>
</div>
</section>
</section>
<section id="observation-1" class="level1">
<h1>Observation 1</h1>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> dummy_func(x):</span>
<span id="cb14-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dummy"</span></span>
<span id="cb14-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> kedro.pipeline <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> node</span></code></pre></div>
</div>
<div class="cell" data-execution_count="53">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> format_name(node):</span>
<span id="cb15-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(node)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">repr</span>(node)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>node<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>node<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>short_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb15-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="55">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">nameless_node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node(dummy_func, inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>], outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>])</span>
<span id="cb16-2">nameless_namespace_node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node(dummy_func, inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>], outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>], namespace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nok"</span>)</span>
<span id="cb16-3">nam_node <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> node(dummy_func, inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>], outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>], name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dummy_name"</span>)</span>
<span id="cb16-4"></span>
<span id="cb16-5">format_name(nameless_node)</span>
<span id="cb16-6">format_name(nameless_namespace_node)</span>
<span id="cb16-7">format_name(name_node)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>str(node)='dummy_func([a]) -&gt; [b]'
repr(node)="Node(dummy_func, ['a'], ['b'], None)"
node.name='dummy_func([a]) -&gt; [b]'
node.short_name='Dummy Func'

str(node)='dummy_func([a]) -&gt; [b]'
repr(node)="Node(dummy_func, ['a'], ['b'], None)"
node.name='nok.dummy_func([a]) -&gt; [b]'
node.short_name='Dummy Func'

str(node)='dummy_name: dummy_func([a]) -&gt; [b]'
repr(node)="Node(dummy_func, ['a'], ['b'], 'dummy_name')"
node.name='dummy_name'
node.short_name='dummy_name'
</code></pre>
</div>
</div>
<ol type="1">
<li>The <code>repr</code> for namespace if wrong because it will not reconstruct the same node, and <code>namespace</code> wasn‚Äôt included in the <code>__repr__</code> at all.</li>
<li><code>short_name</code> feels very <code>kedro-viz</code> coupled and unnecessary to keep them in <code>kedro</code>. Kedro does not use this property.</li>
</ol>
<section id="observation-2" class="level2">
<h2 class="anchored" data-anchor-id="observation-2">Observation 2</h2>
<p>https://github.com/kedro-org/kedro/pull/568/files - can replace with <code>self._func_name instead of</code>_get_readable_func_name`</p>
</section>
</section>
<section id="observation-3---node.name" class="level1">
<h1>Observation 3 - node.name</h1>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__str__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>:</span>
<span id="cb18-2">        <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _set_to_str(xset: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>:</span>
<span id="cb18-3">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"[</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">';'</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join(xset)<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">]"</span></span>
<span id="cb18-4"></span>
<span id="cb18-5">        out_str <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _set_to_str(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.outputs) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._outputs <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"None"</span></span>
<span id="cb18-6">        in_str <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> _set_to_str(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.inputs) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._inputs <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"None"</span></span>
<span id="cb18-7"></span>
<span id="cb18-8">        prefix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">": "</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._name <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span></span>
<span id="cb18-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> prefix <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>_func_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>in_str<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">) -&gt; </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>out_str<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb18-10"></span>
<span id="cb18-11">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@property</span></span>
<span id="cb18-12">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> name(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>:</span>
<span id="cb18-13">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Node's name.</span></span>
<span id="cb18-14"></span>
<span id="cb18-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb18-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            Node's name if provided or the name of its function.</span></span>
<span id="cb18-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb18-18">        node_name <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._name <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>)</span>
<span id="cb18-19">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.namespace:</span>
<span id="cb18-20">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>namespace<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>node_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span>
<span id="cb18-21">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> node_name    </span></code></pre></div>
<p>This is an important property and must be kept unique, it‚Äôs used for filtering.</p>
<p>However in the implementation it used <code>__str__</code> which is for ‚Äúprinting‚Äù and create obsecure dependency. In any case, it should be reverted and <code>__str__</code> relies on <code>self.name</code> instead.</p>


</section>

 ]]></description>
  <category>python</category>
  <category>kedro</category>
  <guid>https://noklam.github.io/blog/posts/default_node_name/2024-02-08-default-node-name.html</guid>
  <pubDate>Thu, 08 Feb 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Making Powerpoint Ready Chart with matplotlib</title>
  <link>https://noklam.github.io/blog/posts/2020-04-10-Presentation-Ready-Chart.html</link>
  <description><![CDATA[ 




<blockquote class="blockquote">
<p>Are you tired with fiddling with every single python plot and you always forgot how to configure matplotlib? Start creating your own matplotlib style or just use this. [Updated on 17-07-2022]</p>
</blockquote>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://noklam.github.io/blog/posts/nb_img/powerpoint-ready-chart.png" title="Over-exaggerated title" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Large Font Size Title</figcaption>
</figure>
</div>
<p>In reality, you probably don‚Äôt need a title as big as this one. But using library defautls often is not the best choice.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#hide</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> matplotlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-5">matplotlib.matplotlib_fname()</span>
<span id="cb1-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>load_ext autoreload</span>
<span id="cb1-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>autoreload <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>
Bad key axes.location in file C:\Users\lrcno\miniconda3\envs\kedro\lib\site-packages\matplotlib\mpl-data\stylelib\presentation.mplstyle, line 4 ("axes.location: 'left'")
You probably need to get an updated matplotlibrc file from
https://github.com/matplotlib/matplotlib/blob/v3.5.2/matplotlibrc.template
or from the matplotlib source distribution</code></pre>
</div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#collapse-hide</span></span>
<span id="cb3-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> make_scatter_plot():</span>
<span id="cb3-3">    num_points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb3-4">    gradient <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span></span>
<span id="cb3-5">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_points))</span>
<span id="cb3-6">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randn(num_points) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> gradient</span>
<span id="cb3-7">    fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots()</span>
<span id="cb3-8">    ax.scatter(x, y)</span>
<span id="cb3-9">    ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A Simple Scatter Plot'</span>)</span>
<span id="cb3-10">    ax.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>)</span>
<span id="cb3-11">    ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>)</span>
<span id="cb3-12">    plt.show()</span>
<span id="cb3-13"></span>
<span id="cb3-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> make_line_plot():</span>
<span id="cb3-15">    num_points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb3-16">    gradient <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.5</span></span>
<span id="cb3-17">    x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.array(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(num_points))</span>
<span id="cb3-18">    y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.randn(num_points) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> gradient</span>
<span id="cb3-19">    fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots()</span>
<span id="cb3-20">    ax.plot(x, y, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-'</span>)</span>
<span id="cb3-21">    ax.set_title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'A Simple Line Chart'</span>)</span>
<span id="cb3-22">    ax.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'x'</span>)</span>
<span id="cb3-23">    ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'y'</span>)</span>
<span id="cb3-24">    plt.show()</span></code></pre></div>
</div>
<section id="the-problem-of-library-defaults" class="level1">
<h1>The Problem of library defaults</h1>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">make_scatter_plot()</span>
<span id="cb4-2">make_line_plot()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://noklam.github.io/blog/posts/2020-04-10-Presentation-Ready-Chart_files/figure-html/cell-4-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://noklam.github.io/blog/posts/2020-04-10-Presentation-Ready-Chart_files/figure-html/cell-4-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>Your insight is as best as your audience understand. According to <a href="https://www.anaconda.com/state-of-data-science-2021">Anaconda State of the Data Science 2021</a>, data scientist spend almost one third of their time for data visualization, report and presentation. Human perception is largely based on <strong>visual</strong>, a easy-to-read chart is much more likely to sell your idea with a custom matplotlib pyplot chart. <img src="https://noklam.github.io/blog/posts/nb_img/data_scientist_at_work.png" class="img-fluid" alt="Data Scientist at Work from"></p>
<p>There is nothing wrong with <code>matplotlib</code>, it is custom for a user sit in front of a monitor. When it comes to presentation, you really should make some adjustment for your audience. If your organization is big enough, you may also consider to create a theme that shared across the organisation to style it consistently, <a href="https://github.com/quantumblacklabs/qbstyles">qbstyle</a> is one of the examples.</p>
<p>For typical data practitioner, it‚Äôs easy to start with the following tips.</p>
</section>
<section id="apply-matplotlib-theme" class="level1">
<h1>Apply matplotlib theme</h1>
<div class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> plt.style.context(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ggplot'</span>): <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Or plt.style.use('presentation') for global setting</span></span>
<span id="cb5-2">    make_scatter_plot()</span>
<span id="cb5-3">    make_line_plot()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://noklam.github.io/blog/posts/2020-04-10-Presentation-Ready-Chart_files/figure-html/cell-5-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://noklam.github.io/blog/posts/2020-04-10-Presentation-Ready-Chart_files/figure-html/cell-5-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>Much better right?</p>
<p>There is nothing wrong with the chart if you are viewing it in front of your monitor. However, this is not PowerPoint ready as the font size are too small for a presentation. Adjusting font size manually is a painful process, instead, you could have preset theme to automate this process.</p>
</section>
<section id="make-powerpoint-ready-charts" class="level1">
<h1>Make PowerPoint-ready charts</h1>
<p>Luckily, there is some easy way to prepare PowerPoint-ready charts. I created a presentation.mplstyle file as follow. This is not a perfect theme, but it‚Äôs a good starting point and you can finetune the parameters to build your custom theme.</p>
<p>Custom <code>presentation</code> theme</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">axes.titlesize : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span></span>
<span id="cb6-2">axes.labelsize : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span></span>
<span id="cb6-3">axes.location: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'left'</span></span>
<span id="cb6-4">lines.linewidth : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span>
<span id="cb6-5">lines.markersize : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span></span>
<span id="cb6-6">xtick.labelsize : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span></span>
<span id="cb6-7">ytick.labelsize : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">18</span></span>
<span id="cb6-8">figure.figsize : <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span></span>
<span id="cb6-9">figure.titlesize: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span></span></code></pre></div>
<p>Once we have the <code>presentation</code> theme ready, we can start composing it with the <code>ggplot</code> to build charts.</p>
<blockquote class="blockquote">
<p>Note: You need to create a <code>presentation.mplstyle</code> file and copy it to a location that <code>matplotlib</code> can find. You can follow the steps below to create your own <code>presentation.mplstyle</code></p>
</blockquote>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#hide</span></span>
<span id="cb7-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib</span>
<span id="cb7-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb7-4">style_dir <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(matplotlib.__path__[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mpl-data/stylelib"</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># It stores under the matplotlib sub-directory mpl-data/stylelib/</span></span>
<span id="cb7-5"></span>
<span id="cb7-6">presentation_theme <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb7-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">axes.titlesize : 24</span></span>
<span id="cb7-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">axes.labelsize : 24</span></span>
<span id="cb7-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">axes.location: 'left'</span></span>
<span id="cb7-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">lines.linewidth : 3</span></span>
<span id="cb7-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">lines.markersize : 10</span></span>
<span id="cb7-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">xtick.labelsize : 18</span></span>
<span id="cb7-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">ytick.labelsize : 18</span></span>
<span id="cb7-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">figure.figsize : 10, 6</span></span>
<span id="cb7-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">figure.titlesize: 24</span></span>
<span id="cb7-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb7-17"></span>
<span id="cb7-18"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(style_dir<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"presentation.mplstyle"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"w"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb7-19">    f.write(presentation_theme)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="8">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> plt.style.context([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'presentation'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ggplot'</span>]):</span>
<span id="cb8-2">    make_scatter_plot()</span>
<span id="cb8-3">    make_line_plot()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://noklam.github.io/blog/posts/2020-04-10-Presentation-Ready-Chart_files/figure-html/cell-7-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://noklam.github.io/blog/posts/2020-04-10-Presentation-Ready-Chart_files/figure-html/cell-7-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>If you are careful enough, you will notice the font size of the title is not correct. This is because <code>ggplot</code> theme overwrite my theme. To make it right, you just need to switch the order so that your theme will overwrite conflict settings.</p>
<div class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> plt.style.context([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ggplot'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'presentation'</span>]):</span>
<span id="cb9-2">    make_scatter_plot()</span>
<span id="cb9-3">    make_line_plot()</span></code></pre></div>
<div class="cell-output cell-output-display">
<p><img src="https://noklam.github.io/blog/posts/2020-04-10-Presentation-Ready-Chart_files/figure-html/cell-8-output-1.png" class="img-fluid"></p>
</div>
<div class="cell-output cell-output-display">
<p><img src="https://noklam.github.io/blog/posts/2020-04-10-Presentation-Ready-Chart_files/figure-html/cell-8-output-2.png" class="img-fluid"></p>
</div>
</div>
<p>I actually disable the grid in my <code>presentation</code> theme, which conflicts with <code>fivethirtyeight</code> configuration. If conflict configs exist, it resolved base on your order. See the same plot with ‚Äòpresentation‚Äô,‚Äòfivethirtyeight‚Äô in reverse order.</p>
<p>To give you a sense how this affect your presenation, I put it into a Powerpoint, see if you feel the difference.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://noklam.github.io/blog/posts/nb_img/ppt_low_res_01.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">ppt_low_res_01.png</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://noklam.github.io/blog/posts/nb_img/ppt_high_res_02.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">ppt_high_res_02.png</figcaption>
</figure>
</div>
<section id="avoid-low-resolution-chart" class="level2">
<h2 class="anchored" data-anchor-id="avoid-low-resolution-chart">Avoid Low Resolution Chart</h2>
<blockquote class="blockquote">
<p>Note: Believe it or not, a low resolution chart looks much less conviencing. Taking screenshot with larger charts helps you to preserve the resolution.</p>
</blockquote>
<ul>
<li>Resolution of the chart is much better</li>
<li>More obvious Title &amp; Label (Try take a few step back from your monitor, see if you can read it)</li>
</ul>
</section>
</section>
<section id="define-once-use-everywhere" class="level1">
<h1>Define Once, Use Everywhere</h1>
<p>It could be troublesome if you need to define the same file over and over in different computer/environment. You can actually use a URL. I have put my own theme in GitHub so I can always access it from anywhere.</p>
<p>https://raw.githubusercontent.com/noklam/mediumnok/master/_demo/python-viz/presentation.mplstyle</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">my_style <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://raw.githubusercontent.com/noklam/blog/master/_demo/python-viz/presentation.mplstyle'</span></span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> plt.style.context([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'ggplot'</span>, my_style]):</span>
<span id="cb10-4">    make_scatter_plot()</span>
<span id="cb10-5">    make_line_plot()</span></code></pre></div>
</div>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>I hope this blog helps you to prepare Powerpoint-ready charts better, happy coding!</p>


</section>

 ]]></description>
  <category>python</category>
  <guid>https://noklam.github.io/blog/posts/2020-04-10-Presentation-Ready-Chart.html</guid>
  <pubDate>Thu, 08 Feb 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>How Kedro Config Loader works</title>
  <dc:creator>noklam </dc:creator>
  <link>https://noklam.github.io/blog/posts/kedro_config_loader/2023-11-16-kedro-config-loader-dive-deep.html</link>
  <description><![CDATA[ 




<p>Kedro offers a <a href="https://docs.kedro.org/en/stable/configuration/index.html">configuration system</a>, it involves concepts such as - environment (it can be multiple files) - variable interpolation (advance templating) - globals - custom resolvers - runtime parameters (override via CLI or programatically)</p>
<p>The official documentation has plenty of examples, so I am going to focus on explaining the internals.</p>
<section id="config-resolution-without-globals" class="level1">
<h1>Config Resolution (Without Globals)</h1>
<p>To enable all of the features, the resolution order is actually quite complicated. It involes multiple stages of merging in different scope. This diagram belows describe what happen under the hood. The key is identify two things 1. Some feature apply in local scope (it is not cross environment) 2. There are different merging strategy, some are using <code>OmegaConf</code>, some are pure dictionary merge 3. Configuration are resolved and then merge across environments. i.e.&nbsp;you cannot interpolate a value from another environment.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://noklam.github.io/blog/posts/kedro_config_loader/2023-11-16-kedro-config-loader-dive-deep_files/figure-html/0866e3bf-1-image.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">image.png</figcaption>
</figure>
</div>
</section>
<section id="config-resolution-with-globals" class="level1">
<h1>Config Resolution (With Globals)</h1>


</section>

 ]]></description>
  <category>python</category>
  <category>kedro</category>
  <guid>https://noklam.github.io/blog/posts/kedro_config_loader/2023-11-16-kedro-config-loader-dive-deep.html</guid>
  <pubDate>Thu, 16 Nov 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Advance Pytest - parameterize your fixture</title>
  <link>https://noklam.github.io/blog/posts/advance_pytest/2023-11-15-advance-pytest-fixtures-with-params.html</link>
  <description><![CDATA[ 




<section id="introduction" class="level1">
<h1>Introduction</h1>
<p>Today I encountered a little testing challenge where I need to parameterize my tests. We use <code>pytest</code> extensively for our unit tests. Particularly, I need to duplicate all my tests for a new folder structure. At first, I thought about just writing new tests, then I quickly realise that I will end up duplicating a big chunk of our tests. On the other hand, some tests only make sense for a particular structure. If you are familiar with <code>pytest</code>, you may know that you can use <code>pytest.mark.parametrize</code> for testing a matrix of inputs and outputs. This is not applicable because I want to parameterise my fixture instead of the parameters of a test.</p>
<p>After a while of Googling, I found <a href="https://docs.pytest.org/en/7.1.x/how-to/fixtures.html#parametrizing-fixtures">Parameterize fixtures</a>. It wasn‚Äôt immediately obivous to me how I can use this to apply a matrix of tests while keeping it flexible enough to use only part of the fixtures. It sounds complicated but it will make more sense as I show you more example</p>
<section id="parameterize-tests" class="level2">
<h2 class="anchored" data-anchor-id="parameterize-tests">Parameterize Tests</h2>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pytest</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@pytest.fixture</span></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> a():</span>
<span id="cb1-5">    ...</span>
<span id="cb1-6"></span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> test_foo(a):</span>
<span id="cb1-9">    ...</span></code></pre></div>
<p>If you have use <code>pytest</code> before, you will know that <code>pytest.fixture</code> is the recommended way to reuse test setup. To test a matrix of input and outputs, you may use <code>pytest.mark.parameterize</code>.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pytest</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@pytest.fixture</span></span>
<span id="cb2-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> a():</span>
<span id="cb2-5">    ...</span>
<span id="cb2-6"></span>
<span id="cb2-7">pytest.mark.parametrize(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input"</span>, [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])</span>
<span id="cb2-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> test_foo(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">input</span>):</span>
<span id="cb2-9">    ...</span></code></pre></div>
<p>This will create 3 tests and each of them will have an input <code>1</code>, <code>2</code>, <code>3</code> respectively. However this is not applicable to my use case because I want to parameterize my fixtures instead of a test. The test requires a fairly complicated setup, which involves creating dummy files and folder. This wasn‚Äôt a problem before we only create one specific type of structure. Recently, we want to make it generic and support different types of structure, so I need to expand the tests to cover this.</p>
<p>To do this, I discovered that I can use <code>pytest.fixture</code> with a <code>params</code> argument.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@pytest.fixture</span>(params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"structure_a"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"structure_b"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"structure_c"</span>])</span>
<span id="cb3-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> a(request):</span>
<span id="cb3-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> request.param</span>
<span id="cb3-4"></span>
<span id="cb3-5"></span>
<span id="cb3-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> test_a(a):</span>
<span id="cb3-7">   ...</span></code></pre></div>
<p>This also creates 3 tests, which is great! Now for most of the cases, this is fine, but some tests only make sense for <code>structure_a</code> but not the other, should I duplicate another set of fixture? This is a feasible option but it‚Äôs not ideal. Turns out I can reuse the setup logic and create a combination of fixture easily. There are two different styles to do this, essentially instead of creating the fixture directly, we keep it as a function and create the a combination of fixtures base on this <code>setup</code> function.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> setup(params):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Note this is just a function but not a fixture</span></span>
<span id="cb4-2">    ...</span></code></pre></div>
<section id="style-a---use-the-fixture-as-an-argument" class="level3">
<h3 class="anchored" data-anchor-id="style-a---use-the-fixture-as-an-argument">Style A - use the fixture as an argument</h3>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">use_all_folder_structure <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pytest.fixture(setup, params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>]), name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"use_all_folder_structure"</span>)</span>
<span id="cb5-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> test_foo_a(use_all_folder_structure):</span>
<span id="cb5-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span></code></pre></div>
</section>
<section id="style-b---use-the-fixture-as-a-decorator" class="level3">
<h3 class="anchored" data-anchor-id="style-b---use-the-fixture-as-a-decorator">Style B - use the fixture as a decorator</h3>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"></span>
<span id="cb6-2">_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pytest.fixture(setup, params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>]) ,name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"use_all_folder_structure"</span>)</span>
<span id="cb6-3">use_all_folder_structure <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pytest.mark.usefixtures(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"use_all_folder_structure"</span>,</span>
<span id="cb6-4"></span>
<span id="cb6-5">)</span>
<span id="cb6-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@use_all_folder_structure</span></span>
<span id="cb6-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> test_foo_b():</span>
<span id="cb6-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span></code></pre></div>
<p>I can easily create another fixture to run on a subset of fixture.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pytest.fixture(setup, params<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>]) ,name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"use_folder_structure_a"</span>)</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@use_folder_structure_a</span></span>
<span id="cb7-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> test_bar_b():</span>
<span id="cb7-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>()</span></code></pre></div>
</section>
</section>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>To summarisze, it is possible to apply a matrix of fixtures easily. Which style do you perfer?</p>


</section>

 ]]></description>
  <category>pytest</category>
  <guid>https://noklam.github.io/blog/posts/advance_pytest/2023-11-15-advance-pytest-fixtures-with-params.html</guid>
  <pubDate>Wed, 15 Nov 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Experimenting Rust with Python</title>
  <link>https://noklam.github.io/blog/posts/rust_learning/2023-11-11-rust-learning.html</link>
  <description><![CDATA[ 




<section id="section" class="level2">
<h2 class="anchored" data-anchor-id="section">2023-11-11</h2>
<p>As a Python only developer, I found it extremly hard to learn a new langauge particular with language like C++ or Rust that involves build steps. (Does it has debugger support like PyCharm?). I tried to learn Rust by reading the book last year, I finished a few chapters but never get to write any programme and I forgot most of it already. The only thing that stays is <a href="https://doc.rust-lang.org/book/">Rust</a> has a concept of lifetime and borrow checker.</p>
<p>I am hoping that by pushing my <a href="https://github.com/noklam/learning_rust">learning journey</a> online will give myself extra motivation. Ultimately I want to learn just enough Rust to optimise performance for Python program, it could be just simple algorithm, or if I ever learn enough I would like to write an event simulation engine (or at least learn to build one).</p>
<p>Key learning today: - <code>pyo3</code> seems to be the choice for Rust binding for Python. I checked what <code>ruff</code> <a href="https://github.com/astral-sh/ruff/blob/3e00ddce38e7847cbdfc5734226ca88eeb2c9128/pyproject.toml#L3C18-L3C25">used</a> (An insanely fast Python linter and now formatter). I prefer to stick with a good enough choice (noted that building and distributing Python package is a headache, I don‚Äôt want to spend my energy on this now) - I followed the <a href="https://pyo3.rs/v0.20.0/">PyO3 tutorial</a> to build a Rust binding for Python. - I try to follow as much as possible without forcing myself to understand everything. Building something functional first and try to break it is a better learning process for me. - Use of <code>#[pymodule]</code> and <code>maturin develop</code> to build Python package. - You can also run Python in Rust!</p>
<p>It build and install the package <code>string_sum</code>.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> import <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">string_sum</span></span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;&gt;</span> dir<span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">string_sum</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb1-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'__all__'</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">,</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'__builtins__'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'__cached__'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'__doc__'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'__file__'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'__loader__'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'__name__'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'__package__'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'__path__'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'__spec__'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'string_sum'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum_as_string'</span>]</span></code></pre></div>
<p>Questions - <code>string_sum.cpython-310-darwin.so</code>, this is the only file I find in the <code>site_package</code> alongside <code>__init__.py</code>. How do I find the interface other than doing <code>dir</code>?</p>


</section>

 ]]></description>
  <category>rust</category>
  <guid>https://noklam.github.io/blog/posts/rust_learning/2023-11-11-rust-learning.html</guid>
  <pubDate>Sat, 11 Nov 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>A Guide to Kedro Namespace Pipelines for Time Series Forecasting</title>
  <link>https://noklam.github.io/blog/posts/understand_namespace/2023-09-26-understand-kedro-namespace-pipeline.html</link>
  <description><![CDATA[ 




<section id="understanding-kedros-namespace-pipelines" class="level1">
<h1>Understanding Kedro‚Äôs Namespace Pipelines</h1>
<p>Kedro‚Äôs <a href="https://docs.kedro.org/en/0.18.0/tutorial/namespace_pipelines.html">Namespace Pipeline</a> is a powerful feature that allows for flexible pipeline reuse, especially handy for tasks like time series forecasting.</p>
<section id="getting-started" class="level2">
<h2 class="anchored" data-anchor-id="getting-started">Getting Started</h2>
<p>This blog post is based on this <a href="https://github.com/noklam/kedro_gallery/tree/master/loop-pipeline">example Kedro project</a>. Consider a basic pipeline node for monthly predictions:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> make_monthly_predictions(input_data):</span>
<span id="cb1-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fill your actual logic here!</span></span>
<span id="cb1-3">    output_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> input_data</span>
<span id="cb1-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> output_data</span></code></pre></div>
</div>
<p>Now, let‚Äôs create a simple one node pipeline using Kedro, this will be the building block of our pipelines:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> kedro.pipeline.modular_pipeline <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pipeline</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> kedro.pipeline <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> node</span>
<span id="cb2-3"></span>
<span id="cb2-4">base_pipeline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline(</span>
<span id="cb2-5">    [</span>
<span id="cb2-6">        node(</span>
<span id="cb2-7">            func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>make_monthly_predictions,</span>
<span id="cb2-8">            inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input_data"</span>],</span>
<span id="cb2-9">            outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output_data"</span>]</span>
<span id="cb2-10">        )</span>
<span id="cb2-11">    ]</span>
<span id="cb2-12">)</span></code></pre></div>
</div>
<p>It basically just call the <code>make_monthly_prediction</code>, and define what are the ‚Äúinputs‚Äù and ‚Äúoutputs‚Äù.</p>
</section>
<section id="utilizing-namespace-for-efficiency" class="level2">
<h2 class="anchored" data-anchor-id="utilizing-namespace-for-efficiency">Utilizing Namespace for Efficiency</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://noklam.github.io/blog/posts/understand_namespace/forecast.jpg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">time series diagram</figcaption>
</figure>
</div>
<p>Now that we have our base pipeline, For time series forecasting, where predictions depend on previous results, we can efficiently handle this with [Namespace Pipelines]((https://docs.kedro.org/en/0.18.0/tutorial/namespace_pipelines.html). Start by creating a Namespace Pipeline:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">namespace_pipeline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline(</span>
<span id="cb3-2">    [</span>
<span id="cb3-3">        node(</span>
<span id="cb3-4">            func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>make_monthly_predictions,</span>
<span id="cb3-5">            inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input_data"</span>],</span>
<span id="cb3-6">            outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output_data"</span>]</span>
<span id="cb3-7">        )</span>
<span id="cb3-8">    ],</span>
<span id="cb3-9">    namespace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"namespace"</span></span>
<span id="cb3-10">)</span></code></pre></div>
</div>
<p>The <code>namespace</code> argument automatically adds a prefix to inputs and outputs. You can inspect the pipeline by printing it.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">namespace_pipeline</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Pipeline([
Node(make_monthly_predictions, ['input_data'], ['namespace.output_data'], None)
])</code></pre>
</div>
</div>
<p>If you want to keep some datasets from namespacing, you can specify the <code>inputs</code> or <code>outputs</code> argument of the <code>pipeline</code> function to overide it:</p>
<p>(https://docs.kedro.org/en/stable/nodes_and_pipelines/modular_pipelines.html#using-the-modular-pipeline-wrapper-to-provide-overrides). <img src="https://noklam.github.io/blog/posts/understand_namespace/pipeline_docstring.jpg" class="img-fluid" alt="pipeline.png"></p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">namespace_pipeline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline(</span>
<span id="cb6-2">    [</span>
<span id="cb6-3">        node(</span>
<span id="cb6-4">            </span>
<span id="cb6-5">            func<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>make_monthly_predictions,</span>
<span id="cb6-6">            inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input_data"</span>],</span>
<span id="cb6-7">            outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output_data"</span>]</span>
<span id="cb6-8">        )</span>
<span id="cb6-9">    ],</span>
<span id="cb6-10">    inputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"input_data"</span>],  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Escape from namespace</span></span>
<span id="cb6-11">    namespace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"namespace"</span></span>
<span id="cb6-12">)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">namespace_pipeline</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Pipeline([
Node(make_monthly_predictions, ['input_data'], ['namespace.output_data'], None)
])</code></pre>
</div>
</div>
</section>
<section id="building-the-time-series-pipeline" class="level2">
<h2 class="anchored" data-anchor-id="building-the-time-series-pipeline">Building the Time-Series Pipeline</h2>
<p>Now that we understand the mechanics of namespace, let‚Äôs build a time-series pipeline by iterating through months and connecting pipelines:</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">months <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"jan"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"feb"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mar"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"apr"</span>]</span>
<span id="cb9-2"></span>
<span id="cb9-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> create_pipeline(months):</span>
<span id="cb9-4">    pipelines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb9-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(months) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>):</span>
<span id="cb9-6">        curr, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> months[i], months[i<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb9-7">        pipelines.append(pipeline(base_pipeline,</span>
<span id="cb9-8">            outputs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"output_data"</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">.input_data"</span>},</span>
<span id="cb9-9">            namespace<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>curr))</span>
<span id="cb9-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> pipeline(pipelines)</span>
<span id="cb9-11"></span>
<span id="cb9-12">final_pipeline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> create_pipeline(months)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">final_pipeline</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>Pipeline([
Node(make_monthly_predictions, ['jan.input_data'], ['feb.input_data'], None),
Node(make_monthly_predictions, ['feb.input_data'], ['mar.input_data'], None),
Node(make_monthly_predictions, ['mar.input_data'], ['apr.input_data'], None)
])</code></pre>
</div>
</div>
<p>By visualizing the pipeline with <code>kedro viz</code>, you can observe the connections between each step. <img src="https://noklam.github.io/blog/posts/understand_namespace/connect.jpg" class="img-fluid" alt="connect pipeline"></p>


</section>
</section>

 ]]></description>
  <category>kedro</category>
  <guid>https://noklam.github.io/blog/posts/understand_namespace/2023-09-26-understand-kedro-namespace-pipeline.html</guid>
  <pubDate>Mon, 25 Sep 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Function overloading - singledispatch in Python with type hint</title>
  <link>https://noklam.github.io/blog/posts/python_single_dispatch/python-dispatch-typehint.html</link>
  <description><![CDATA[ 




<p>With Python&gt;=3.7, the <code>@singledispatch</code> method can now understand the type hints. It behaves like function overloading but it‚Äôs more dynamic than the static langauge.</p>
<p>Here is a quick example to demonstrate it.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> singledispatch</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@singledispatch</span></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> foo(x):</span>
<span id="cb1-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"foo"</span>)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@foo.register</span></span>
<span id="cb2-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _(x: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>):</span>
<span id="cb2-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"It's a float"</span>)</span>
<span id="cb2-4"></span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@foo.register</span></span>
<span id="cb2-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _(x: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb2-8">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"It's a string now!"</span>)</span></code></pre></div>
</div>
<p>Let‚Äôs see how it works.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">foo(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>foo</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">foo(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.0</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>It's a float</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">foo(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>It's a string now!</code></pre>
</div>
</div>
<p>The function <code>foo</code> now understand the type of the argument and dispatch the corresponding functions. This is nicer than a big chunk of <code>if/else</code> statement since it‚Äôs less couple. It‚Äôs also easy to extend this. Imagine the <code>foo</code> function is import from a package, it‚Äôs easy to extend it.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Imagine `foo` was imported from a package</span></span>
<span id="cb9-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Now that you have a special type and you want to extend it from your own library, you don't need to touch the source code at all.</span></span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># from bar import foo</span></span>
<span id="cb9-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Nok:</span>
<span id="cb9-6">    ...</span>
<span id="cb9-7"></span>
<span id="cb9-8"></span>
<span id="cb9-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@foo.register</span></span>
<span id="cb9-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _(x: Nok):</span>
<span id="cb9-11">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Nok"</span>)</span>
<span id="cb9-12"></span>
<span id="cb9-13"></span>
<span id="cb9-14">nok <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Nok()</span>
<span id="cb9-15">foo(nok)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Nok</code></pre>
</div>
</div>
<p>This is only possible because Python is a dynamic language. In contrast, to achieve the same functionalities with monkey patching, you would need to copy the source code of the function and extend the <code>if/else</code> block.</p>
<p>Let‚Äôs dive a bit deeper to the decorator.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>([attr <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> attr <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dir</span>(foo) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> attr.startswith(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_"</span>)])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>['dispatch', 'register', 'registry']</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">foo.dispatch</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>&lt;function functools.singledispatch.&lt;locals&gt;.dispatch(cls)&gt;</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">foo.register</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>&lt;function functools.singledispatch.&lt;locals&gt;.register(cls, func=None)&gt;</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">foo.registry</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>mappingproxy({object: &lt;function __main__.foo(x)&gt;,
              float: &lt;function __main__._(x: float)&gt;,
              str: &lt;function __main__._(x: str)&gt;,
              __main__.Nok: &lt;function __main__._(x: __main__.Nok)&gt;,
              __main__.Nok: &lt;function __main__._(x: __main__.Nok)&gt;})</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> abc</span>
<span id="cb19-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(foo.registry, abc.Mapping)</span></code></pre></div>
</div>
<p>The <code>foo.registry</code> is the most interesting part. Basically, it‚Äôs a dictionary-like object which store the types. It behaves like</p>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"int"</span>:</span>
<span id="cb20-2">    do_something()</span>
<span id="cb20-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">elif</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(x) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"float"</span>:</span>
<span id="cb20-4">    do_somthing_else()</span>
<span id="cb20-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">else</span>:</span>
<span id="cb20-6">    do_this_instead()</span></code></pre></div>



 ]]></description>
  <category>python</category>
  <guid>https://noklam.github.io/blog/posts/python_single_dispatch/python-dispatch-typehint.html</guid>
  <pubDate>Wed, 16 Nov 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Mocking Python version for testing, use of Python Warning to raise error for specific Python Version</title>
  <link>https://noklam.github.io/blog/posts/python_warning/2023-07-08-python-warning-test-version-switch-mock.html</link>
  <description><![CDATA[ 




<section id="background" class="level1">
<h1>Background</h1>
<p>To release a new open bound version of library so it can be instsalled in any Python versio, while making sure that users are aware this is not supported yet. This article explains well <a href="https://iscinumpy.dev/post/bound-version-constraints/#pinning-the-python-version-is-special">Why setting upper bound for version is a bad idea</a> because it is not supported yet . TL;DR, if you cannot install it, you cannot even test if it works or not. In Python ecosystem, you relies on many libraries and it will take long time until all depedencies are updated, which in reality most likely it has not break anything at all.</p>
</section>
<section id="the-approach" class="level1">
<h1>The Approach</h1>
<p>We use <code>warnings</code> and <code>simplefilter</code>. To your surprise, <code>warnings</code> can be triggered as an <code>Exception</code> with the flag <code>-W</code>, i.e.&nbsp;<code>python my_program.py -W UserWarnings</code> or using the Python environment variable <code>PYTHONWARNINGS</code></p>
<p>See the <a href="https://docs.python.org/3/library/warnings.html#warnings.warn">standard Python Docs</a> about <code>warnings.warn</code> yourself &gt; warnings.warn(message, category=None, stacklevel=1, source=None) Issue a warning, or maybe ignore it or raise an exception.</p>
<p>(TBD, I am still working on the solution but I just need to write it down to document my state of mind lol)</p>


</section>

 ]]></description>
  <category>python</category>
  <guid>https://noklam.github.io/blog/posts/python_warning/2023-07-08-python-warning-test-version-switch-mock.html</guid>
  <pubDate>Wed, 16 Nov 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Kedro DuckDB</title>
  <link>https://noklam.github.io/blog/posts/kedro_duckdb/kedro-duckdb.html</link>
  <description><![CDATA[ 




<p>Exploring DuckDB and how can we use it with <code>kedro</code></p>
<section id="reference" class="level1">
<h1>Reference</h1>
<p>Extend the notebook from: https://colab.research.google.com/drive/1eg_TJpPQr2tyYKWjISJlX8IEAi8Qln3U?usp=sharing</p>
<section id="practical-sql-for-data-analysis" class="level2">
<h2 class="anchored" data-anchor-id="practical-sql-for-data-analysis"><strong>Practical SQL for Data Analysis</strong></h2>
<section id="what-you-can-do-together-with-pandas" class="level3">
<h3 class="anchored" data-anchor-id="what-you-can-do-together-with-pandas">What you can do <em>together with</em> Pandas</h3>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>quiet duckdb</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sqlite3</span>
<span id="cb2-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> duckdb</span>
<span id="cb2-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span></code></pre></div>
</div>
<p><strong>Preparation</strong></p>
<p>Download the data and set up the Pandas data frames. We read the data into a Pandas DataFrame using DuckDB‚Äôs built-in Parquet reader.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>wget <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>q https:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>github.com<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>cwida<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>duckdb<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>releases<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>download<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>v1<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>lineitemsf1.snappy.parquet</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  HTTP/1.1 301 Moved Permanently
  Server: GitHub.com
  Date: Tue, 15 Nov 2022 22:34:17 GMT
  Content-Type: text/html; charset=utf-8
  Vary: X-PJAX, X-PJAX-Container, Turbo-Visit, Turbo-Frame, Accept-Encoding, Accept, X-Requested-With
  Location: https://github.com/duckdb/duckdb-data/releases/download/v1.0/lineitemsf1.snappy.parquet
  Cache-Control: no-cache
  Strict-Transport-Security: max-age=31536000; includeSubdomains; preload
  X-Frame-Options: deny
  X-Content-Type-Options: nosniff
  X-XSS-Protection: 0
  Referrer-Policy: origin-when-cross-origin, strict-origin-when-cross-origin
  Content-Security-Policy: default-src 'none'; base-uri 'self'; block-all-mixed-content; child-src github.com/assets-cdn/worker/ gist.github.com/assets-cdn/worker/; connect-src 'self' uploads.github.com objects-origin.githubusercontent.com www.githubstatus.com collector.github.com raw.githubusercontent.com api.github.com github-cloud.s3.amazonaws.com github-production-repository-file-5c1aeb.s3.amazonaws.com github-production-upload-manifest-file-7fdce7.s3.amazonaws.com github-production-user-asset-6210df.s3.amazonaws.com cdn.optimizely.com logx.optimizely.com/v1/events *.actions.githubusercontent.com wss://*.actions.githubusercontent.com online.visualstudio.com/api/v1/locations github-production-repository-image-32fea6.s3.amazonaws.com github-production-release-asset-2e65be.s3.amazonaws.com insights.github.com wss://alive.github.com; font-src github.githubassets.com; form-action 'self' github.com gist.github.com objects-origin.githubusercontent.com; frame-ancestors 'none'; frame-src viewscreen.githubusercontent.com notebooks.githubusercontent.com; img-src 'self' data: github.githubassets.com media.githubusercontent.com camo.githubusercontent.com identicons.github.com avatars.githubusercontent.com github-cloud.s3.amazonaws.com objects.githubusercontent.com objects-origin.githubusercontent.com secured-user-images.githubusercontent.com/ opengraph.githubassets.com github-production-user-asset-6210df.s3.amazonaws.com customer-stories-feed.github.com spotlights-feed.github.com *.githubusercontent.com; manifest-src 'self'; media-src github.com user-images.githubusercontent.com/ secured-user-images.githubusercontent.com/; script-src github.githubassets.com; style-src 'unsafe-inline' github.githubassets.com; worker-src github.com/assets-cdn/worker/ gist.github.com/assets-cdn/worker/
  Content-Length: 0
  X-GitHub-Request-Id: D47F:F2DE:2F3E29B:303AC52:637413E9
  HTTP/1.1 302 Found
  Server: GitHub.com
  Date: Tue, 15 Nov 2022 22:34:17 GMT
  Content-Type: text/html; charset=utf-8
  Vary: X-PJAX, X-PJAX-Container, Turbo-Visit, Turbo-Frame, Accept-Encoding, Accept, X-Requested-With
  Location: https://objects.githubusercontent.com/github-production-release-asset-2e65be/263853960/33e88e80-95cb-11ea-8bb7-2dfa0654592c?X-Amz-Algorithm=AWS4-HMAC-SHA256&amp;X-Amz-Credential=AKIAIWNJYAX4CSVEH53A%2F20221115%2Fus-east-1%2Fs3%2Faws4_request&amp;X-Amz-Date=20221115T223417Z&amp;X-Amz-Expires=300&amp;X-Amz-Signature=07d1673053f9e8676510f46b62993e3b9b2428a17f00a613162f67690318e82f&amp;X-Amz-SignedHeaders=host&amp;actor_id=0&amp;key_id=0&amp;repo_id=263853960&amp;response-content-disposition=attachment%3B%20filename%3Dlineitemsf1.snappy.parquet&amp;response-content-type=application%2Foctet-stream
  Cache-Control: no-cache
  Strict-Transport-Security: max-age=31536000; includeSubdomains; preload
  X-Frame-Options: deny
  X-Content-Type-Options: nosniff
  X-XSS-Protection: 0
  Referrer-Policy: no-referrer-when-downgrade
  Content-Security-Policy: default-src 'none'; base-uri 'self'; block-all-mixed-content; child-src github.com/assets-cdn/worker/ gist.github.com/assets-cdn/worker/; connect-src 'self' uploads.github.com objects-origin.githubusercontent.com www.githubstatus.com collector.github.com raw.githubusercontent.com api.github.com github-cloud.s3.amazonaws.com github-production-repository-file-5c1aeb.s3.amazonaws.com github-production-upload-manifest-file-7fdce7.s3.amazonaws.com github-production-user-asset-6210df.s3.amazonaws.com cdn.optimizely.com logx.optimizely.com/v1/events *.actions.githubusercontent.com wss://*.actions.githubusercontent.com online.visualstudio.com/api/v1/locations github-production-repository-image-32fea6.s3.amazonaws.com github-production-release-asset-2e65be.s3.amazonaws.com insights.github.com wss://alive.github.com; font-src github.githubassets.com; form-action 'self' github.com gist.github.com objects-origin.githubusercontent.com; frame-ancestors 'none'; frame-src viewscreen.githubusercontent.com notebooks.githubusercontent.com; img-src 'self' data: github.githubassets.com media.githubusercontent.com camo.githubusercontent.com identicons.github.com avatars.githubusercontent.com github-cloud.s3.amazonaws.com objects.githubusercontent.com objects-origin.githubusercontent.com secured-user-images.githubusercontent.com/ opengraph.githubassets.com github-production-user-asset-6210df.s3.amazonaws.com customer-stories-feed.github.com spotlights-feed.github.com *.githubusercontent.com; manifest-src 'self'; media-src github.com user-images.githubusercontent.com/ secured-user-images.githubusercontent.com/; script-src github.githubassets.com; style-src 'unsafe-inline' github.githubassets.com; worker-src github.com/assets-cdn/worker/ gist.github.com/assets-cdn/worker/
  Content-Length: 0
  X-GitHub-Request-Id: D47F:F2DE:2F3E323:303ACEF:637413E9
  HTTP/1.1 200 OK
  Connection: keep-alive
  Content-Length: 206368635
  Content-Type: application/octet-stream
  Last-Modified: Tue, 07 Dec 2021 13:35:44 GMT
  ETag: "0x8D9B986787C89B4"
  Server: Windows-Azure-Blob/1.0 Microsoft-HTTPAPI/2.0
  x-ms-request-id: b588900b-a01e-0060-6d42-f95efa000000
  x-ms-version: 2020-04-08
  x-ms-creation-time: Tue, 17 Aug 2021 11:28:44 GMT
  x-ms-lease-status: unlocked
  x-ms-lease-state: available
  x-ms-blob-type: BlockBlob
  Content-Disposition: attachment; filename=lineitemsf1.snappy.parquet
  x-ms-server-encrypted: true
  Fastly-Restarts: 1
  Accept-Ranges: bytes
  Age: 0
  Date: Tue, 15 Nov 2022 22:34:18 GMT
  Via: 1.1 varnish
  X-Served-By: cache-lhr7337-LHR
  X-Cache: MISS
  X-Cache-Hits: 0
  X-Timer: S1668551658.108887,VS0,VE259</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>wget <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>q https:<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">//</span>github.com<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>cwida<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>duckdb<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>releases<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>download<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>v1<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>orders.parquet</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>time</span>
<span id="cb6-2">lineitem <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> duckdb.query(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SELECT * FROM 'lineitemsf1.snappy.parquet'"</span>).to_df()</span>
<span id="cb6-3">orders <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> duckdb.query(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SELECT * FROM 'orders.parquet'"</span>).to_df()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: user 7.62 s, sys: 5.43 s, total: 13 s
Wall time: 14.1 s</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>time</span>
<span id="cb8-2">_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_parquet(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lineitemsf1.snappy.parquet"</span>)</span>
<span id="cb8-3">_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_parquet(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"orders.parquet"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: user 6.29 s, sys: 1.5 s, total: 7.78 s
Wall time: 5.81 s</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">con <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> duckdb.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>()</span>
<span id="cb10-2">con.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PRAGMA threads=2'</span>)</span>
<span id="cb10-3"></span>
<span id="cb10-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> timeit(fun, name):</span>
<span id="cb10-5">    <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb10-6">    start_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.monotonic()</span>
<span id="cb10-7">    fun()</span>
<span id="cb10-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> [name, time.monotonic() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> start_time]</span>
<span id="cb10-9"></span>
<span id="cb10-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> plot_results(results, title):</span>
<span id="cb10-11">  df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame.from_dict({</span>
<span id="cb10-12">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'name'</span>: [x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> results],</span>
<span id="cb10-13">      <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'time'</span>: [x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> x <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> results]</span>
<span id="cb10-14">  })</span>
<span id="cb10-15">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(title)</span>
<span id="cb10-16">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(df)</span></code></pre></div>
</div>
<p><strong>Ungrouped Aggregates</strong></p>
<p>This performs a simple set of ungrouped aggregates (sum, min, max, avg) over a column without any filters or other complex operations.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">ungrouped_aggregate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb11-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    SELECT SUM(l_extendedprice), MIN(l_extendedprice), MAX(l_extendedprice), AVG(l_extendedprice) FROM lineitem</span></span>
<span id="cb11-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb11-4"></span>
<span id="cb11-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> duckdb_ungrouped_aggregate(d_con):</span>
<span id="cb11-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(d_con.query(ungrouped_aggregate).to_df())</span>
<span id="cb11-7"></span>
<span id="cb11-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> duckdb_ungrouped_aggregate_1t():</span>
<span id="cb11-9">    duckdb_ungrouped_aggregate(duckdb)</span>
<span id="cb11-10"></span>
<span id="cb11-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> duckdb_ungrouped_aggregate_2t():</span>
<span id="cb11-12">    duckdb_ungrouped_aggregate(con)</span>
<span id="cb11-13"></span>
<span id="cb11-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> pandas_ungrouped_aggregate():</span>
<span id="cb11-15">  result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lineitem.groupby(</span>
<span id="cb11-16">    [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_returnflag'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_linestatus'</span>]</span>
<span id="cb11-17">  ).agg(</span>
<span id="cb11-18">    Sum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum'</span>),</span>
<span id="cb11-19">    Min<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min'</span>),</span>
<span id="cb11-20">    Max<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max'</span>),</span>
<span id="cb11-21">    Avg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean'</span>)</span>
<span id="cb11-22">  )</span>
<span id="cb11-23">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(result)</span>
<span id="cb11-24">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># print(lineitem.agg(Sum=('l_extendedprice', 'sum'), Min=('l_extendedprice', 'min'), Max=('l_extendedprice', 'max'), Avg=('l_extendedprice', 'mean')))</span></span>
<span id="cb11-25"></span>
<span id="cb11-26">ua_results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb11-27">ua_results.append(timeit(duckdb_ungrouped_aggregate_1t, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DuckDB (1T)'</span>))</span>
<span id="cb11-28">ua_results.append(timeit(duckdb_ungrouped_aggregate_2t, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DuckDB (2T)'</span>))</span>
<span id="cb11-29">ua_results.append(timeit(pandas_ungrouped_aggregate, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pandas'</span>))</span>
<span id="cb11-30">plot_results(ua_results, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Ungrouped Aggregate'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   sum(l_extendedprice)  min(l_extendedprice)  max(l_extendedprice)  \
0          2.295773e+11                 901.0              104949.5   

   avg(l_extendedprice)  
0          38255.138485  
   sum(l_extendedprice)  min(l_extendedprice)  max(l_extendedprice)  \
0          2.295773e+11                 901.0              104949.5   

   avg(l_extendedprice)  
0          38255.138485  
                                    Sum    Min       Max           Avg
l_returnflag l_linestatus                                             
A            F             5.658655e+10  904.0  104949.5  38273.129735
N            F             1.487505e+09  920.0  104049.5  38284.467761
             O             1.149352e+11  901.0  104749.5  38248.015609
R            F             5.656804e+10  904.0  104899.5  38250.854626
Ungrouped Aggregate
          name      time
0  DuckDB (1T)  0.052544
1  DuckDB (2T)  0.066239
2       Pandas  0.801278</code></pre>
</div>
</div>
<p><strong>Grouped Aggregates</strong></p>
<p>This performs the same set of aggregates, but this time grouped by two other columns (<em>l_returnflag</em> and <em>l_linestatus</em>).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">grouped_aggregate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb13-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">SELECT l_returnflag,</span></span>
<span id="cb13-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">       l_linestatus,</span></span>
<span id="cb13-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">       SUM(l_extendedprice),</span></span>
<span id="cb13-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">       MIN(l_extendedprice),</span></span>
<span id="cb13-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">       MAX(l_extendedprice),</span></span>
<span id="cb13-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">       AVG(l_extendedprice)</span></span>
<span id="cb13-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">FROM lineitem</span></span>
<span id="cb13-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">GROUP BY l_returnflag,</span></span>
<span id="cb13-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">         l_linestatus</span></span>
<span id="cb13-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb13-12"></span>
<span id="cb13-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> duckdb_grouped_aggregate(d_con):</span>
<span id="cb13-14">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(d_con.query(grouped_aggregate).to_df())</span>
<span id="cb13-15"></span>
<span id="cb13-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> duckdb_grouped_aggregate_1t():</span>
<span id="cb13-17">    duckdb_grouped_aggregate(duckdb)</span>
<span id="cb13-18"></span>
<span id="cb13-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> duckdb_grouped_aggregate_2t():</span>
<span id="cb13-20">    duckdb_grouped_aggregate(con)</span>
<span id="cb13-21"></span>
<span id="cb13-22"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> pandas_grouped_aggregate():</span>
<span id="cb13-23">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(lineitem.groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_returnflag'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_linestatus'</span>]).agg(Sum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum'</span>), Min<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min'</span>), Max<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max'</span>), Avg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean'</span>)))</span>
<span id="cb13-24"></span>
<span id="cb13-25">results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb13-26">results.append(timeit(duckdb_grouped_aggregate_1t, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DuckDB (1T)'</span>))</span>
<span id="cb13-27">results.append(timeit(duckdb_grouped_aggregate_2t, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DuckDB (2T)'</span>))</span>
<span id="cb13-28">results.append(timeit(pandas_grouped_aggregate, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pandas'</span>))</span>
<span id="cb13-29">plot_results(results, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Grouped Aggregate'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  l_returnflag l_linestatus  sum(l_extendedprice)  min(l_extendedprice)  \
0            N            O          1.149352e+11                 901.0   
1            R            F          5.656804e+10                 904.0   
2            A            F          5.658655e+10                 904.0   
3            N            F          1.487505e+09                 920.0   

   max(l_extendedprice)  avg(l_extendedprice)  
0              104749.5          38248.015609  
1              104899.5          38250.854626  
2              104949.5          38273.129735  
3              104049.5          38284.467761  
  l_returnflag l_linestatus  sum(l_extendedprice)  min(l_extendedprice)  \
0            N            O          1.149352e+11                 901.0   
1            R            F          5.656804e+10                 904.0   
2            A            F          5.658655e+10                 904.0   
3            N            F          1.487505e+09                 920.0   

   max(l_extendedprice)  avg(l_extendedprice)  
0              104749.5          38248.015609  
1              104899.5          38250.854626  
2              104949.5          38273.129735  
3              104049.5          38284.467761  
                                    Sum    Min       Max           Avg
l_returnflag l_linestatus                                             
A            F             5.658655e+10  904.0  104949.5  38273.129735
N            F             1.487505e+09  920.0  104049.5  38284.467761
             O             1.149352e+11  901.0  104749.5  38248.015609
R            F             5.656804e+10  904.0  104899.5  38250.854626
Grouped Aggregate
          name      time
0  DuckDB (1T)  0.115463
1  DuckDB (2T)  0.222520
2       Pandas  0.708696</code></pre>
</div>
</div>
<p><strong>Grouped Aggregate with a Filter</strong></p>
<p>This benchmark performs a grouped aggregate with a filter over the shipdate column.</p>
<p>As Pandas does not perform any projection pushdown, we include a version where we manually perform the projection pushdown by filtering only the columns we actually need before running the filter and aggregate.</p>
<p>This optimization is performed automatically in DuckDB by the query optimizer.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> duckdb_grouped_aggregate_filter(d_con):</span>
<span id="cb15-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(d_con.query(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb15-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">SELECT l_returnflag,</span></span>
<span id="cb15-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">       l_linestatus,</span></span>
<span id="cb15-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">       SUM(l_extendedprice),</span></span>
<span id="cb15-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">       MIN(l_extendedprice),</span></span>
<span id="cb15-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">       MAX(l_extendedprice),</span></span>
<span id="cb15-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">       AVG(l_extendedprice)</span></span>
<span id="cb15-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">FROM lineitem</span></span>
<span id="cb15-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">WHERE</span></span>
<span id="cb15-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    l_shipdate &lt;= DATE '1998-09-02'</span></span>
<span id="cb15-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">GROUP BY l_returnflag,</span></span>
<span id="cb15-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">         l_linestatus</span></span>
<span id="cb15-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span>).to_df())</span>
<span id="cb15-15"></span>
<span id="cb15-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> duckdb_grouped_aggregate_filter_1t():</span>
<span id="cb15-17">    duckdb_grouped_aggregate_filter(duckdb)</span>
<span id="cb15-18"></span>
<span id="cb15-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> duckdb_grouped_aggregate_filter_2t():</span>
<span id="cb15-20">    duckdb_grouped_aggregate_filter(con)</span>
<span id="cb15-21"></span>
<span id="cb15-22"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> pandas_grouped_aggregate_filter():</span>
<span id="cb15-23">  filtered_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lineitem[lineitem[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_shipdate'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1998-09-02"</span>]</span>
<span id="cb15-24">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(filtered_df.groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_returnflag'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_linestatus'</span>]).agg(Sum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum'</span>), Min<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min'</span>), Max<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max'</span>), Avg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean'</span>)))</span>
<span id="cb15-25"></span>
<span id="cb15-26"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> pandas_grouped_aggregate_filter_projection_pushdown():</span>
<span id="cb15-27">  pushed_down_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lineitem[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_shipdate'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_returnflag'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_linestatus'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>]]</span>
<span id="cb15-28">  filtered_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pushed_down_df[pushed_down_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_shipdate'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1998-09-02"</span>]</span>
<span id="cb15-29">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(filtered_df.groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_returnflag'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_linestatus'</span>]).agg(Sum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum'</span>), Min<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min'</span>), Max<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max'</span>), Avg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean'</span>)))</span>
<span id="cb15-30"></span>
<span id="cb15-31">results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb15-32">results.append(timeit(duckdb_grouped_aggregate_filter_1t, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DuckDB (1T)'</span>))</span>
<span id="cb15-33">results.append(timeit(duckdb_grouped_aggregate_filter_2t, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DuckDB (2T)'</span>))</span>
<span id="cb15-34">results.append(timeit(pandas_grouped_aggregate_filter, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pandas'</span>))</span>
<span id="cb15-35">results.append(timeit(pandas_grouped_aggregate_filter_projection_pushdown, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pandas (manual pushdown)'</span>))</span>
<span id="cb15-36">plot_results(results, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Grouped Aggregate + Filter'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  l_returnflag l_linestatus  sum(l_extendedprice)  min(l_extendedprice)  \
0            N            O          1.117017e+11                 901.0   
1            A            F          5.658655e+10                 904.0   
2            R            F          5.656804e+10                 904.0   
3            N            F          1.487505e+09                 920.0   

   max(l_extendedprice)  avg(l_extendedprice)  
0              104749.5          38249.117989  
1              104949.5          38273.129735  
2              104899.5          38250.854626  
3              104049.5          38284.467761  
  l_returnflag l_linestatus  sum(l_extendedprice)  min(l_extendedprice)  \
0            N            O          1.117017e+11                 901.0   
1            A            F          5.658655e+10                 904.0   
2            R            F          5.656804e+10                 904.0   
3            N            F          1.487505e+09                 920.0   

   max(l_extendedprice)  avg(l_extendedprice)  
0              104749.5          38249.117989  
1              104949.5          38273.129735  
2              104899.5          38250.854626  
3              104049.5          38284.467761  
                                    Sum    Min       Max           Avg
l_returnflag l_linestatus                                             
A            F             5.658655e+10  904.0  104949.5  38273.129735
N            F             1.487505e+09  920.0  104049.5  38284.467761
             O             1.116318e+11  901.0  104749.5  38249.322811
R            F             5.656804e+10  904.0  104899.5  38250.854626
                                    Sum    Min       Max           Avg
l_returnflag l_linestatus                                             
A            F             5.658655e+10  904.0  104949.5  38273.129735
N            F             1.487505e+09  920.0  104049.5  38284.467761
             O             1.116318e+11  901.0  104749.5  38249.322811
R            F             5.656804e+10  904.0  104899.5  38250.854626
Grouped Aggregate + Filter
                       name      time
0               DuckDB (1T)  0.281653
1               DuckDB (2T)  0.356302
2                    Pandas  2.889015
3  Pandas (manual pushdown)  1.625353</code></pre>
</div>
</div>
<p><strong>Grouped Aggregate with Join and Filter</strong></p>
<p>In this benchmark we expand on the previous benchmark by including a join and a filter on the joined-on table.</p>
<p>Note that the naive version in Pandas is extremely slow, as it performs a full join of the entire table including all the columns that are not used and all the rows that will be filtered out. For that reason we have included a separate benchmark in which we have manually optimized the Pandas code by pushing down the projections and the filters.</p>
<p>These optimizations are performed automatically in DuckDB by the query optimizer.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"></span>
<span id="cb17-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># projection &amp; filter on lineitem table</span></span>
<span id="cb17-3">lineitem_projected <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lineitem[</span>
<span id="cb17-4">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_shipdate'</span>,</span>
<span id="cb17-5">   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_orderkey'</span>,</span>
<span id="cb17-6">   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_linestatus'</span>,</span>
<span id="cb17-7">   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_returnflag'</span>,</span>
<span id="cb17-8">   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>]</span>
<span id="cb17-9">]</span>
<span id="cb17-10">lineitem_filtered <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lineitem_projected[</span>
<span id="cb17-11">  lineitem_projected[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_shipdate'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1998-09-02"</span>]</span>
<span id="cb17-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># projection and filter on order table</span></span>
<span id="cb17-13">orders_projected <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> orders[</span>
<span id="cb17-14">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o_orderkey'</span>,</span>
<span id="cb17-15">   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o_orderstatus'</span>]</span>
<span id="cb17-16">]</span>
<span id="cb17-17">orders_filtered <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> orders_projected[</span>
<span id="cb17-18">  orders_projected[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o_orderstatus'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'O'</span>]</span>
<span id="cb17-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># perform the join</span></span>
<span id="cb17-20">merged <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lineitem_filtered.merge(</span>
<span id="cb17-21">  orders_filtered,</span>
<span id="cb17-22">  left_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_orderkey'</span>,</span>
<span id="cb17-23">  right_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o_orderkey'</span>)</span>
<span id="cb17-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># perform the aggregate</span></span>
<span id="cb17-25">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged.groupby(</span>
<span id="cb17-26">  [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_returnflag'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_linestatus'</span>]</span>
<span id="cb17-27">).agg(</span>
<span id="cb17-28">  Sum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum'</span>),</span>
<span id="cb17-29">  Min<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min'</span>),</span>
<span id="cb17-30">  Max<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max'</span>),</span>
<span id="cb17-31">  Avg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean'</span>)</span>
<span id="cb17-32">)</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">result</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Sum</th>
<th data-quarto-table-cell-role="th">Min</th>
<th data-quarto-table-cell-role="th">Max</th>
<th data-quarto-table-cell-role="th">Avg</th>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">l_returnflag</th>
<th data-quarto-table-cell-role="th">l_linestatus</th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">N</td>
<td data-quarto-table-cell-role="th">O</td>
<td>1.080448e+11</td>
<td>901.0</td>
<td>104749.5</td>
<td>38250.662806</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> duckdb_grouped_aggregate_filter_join(d_con):</span>
<span id="cb19-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(d_con.query(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb19-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">SELECT l_returnflag,</span></span>
<span id="cb19-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">       l_linestatus,</span></span>
<span id="cb19-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">       sum(l_extendedprice),</span></span>
<span id="cb19-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">       min(l_extendedprice),</span></span>
<span id="cb19-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">       max(l_extendedprice),</span></span>
<span id="cb19-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">       avg(l_extendedprice)</span></span>
<span id="cb19-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">FROM lineitem lineitem</span></span>
<span id="cb19-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">JOIN orders orders ON (l_orderkey=o_orderkey)</span></span>
<span id="cb19-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">WHERE l_shipdate &lt;= DATE '1998-09-02'</span></span>
<span id="cb19-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  AND o_orderstatus='O'</span></span>
<span id="cb19-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">GROUP BY l_returnflag,</span></span>
<span id="cb19-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">         l_linestatus</span></span>
<span id="cb19-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span>).to_df())</span>
<span id="cb19-16"></span>
<span id="cb19-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> duckdb_grouped_aggregate_filter_join_1t():</span>
<span id="cb19-18">    duckdb_grouped_aggregate_filter_join(duckdb)</span>
<span id="cb19-19"></span>
<span id="cb19-20"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> duckdb_grouped_aggregate_filter_join_2t():</span>
<span id="cb19-21">    duckdb_grouped_aggregate_filter_join(con)</span>
<span id="cb19-22"></span>
<span id="cb19-23"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> pandas_grouped_aggregate_filter_join():</span>
<span id="cb19-24">    merged <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lineitem.merge(orders, left_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_orderkey'</span>, right_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o_orderkey'</span>)</span>
<span id="cb19-25">    filtered_a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged[merged[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_shipdate'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1998-09-02"</span>]</span>
<span id="cb19-26">    filtered_b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> filtered_a[filtered_a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o_orderstatus'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'O'</span>]</span>
<span id="cb19-27">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> filtered_b.groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_returnflag'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_linestatus'</span>]).agg(Sum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum'</span>), Min<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min'</span>), Max<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max'</span>), Avg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean'</span>))</span>
<span id="cb19-28">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(result)</span>
<span id="cb19-29"></span>
<span id="cb19-30"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> pandas_grouped_aggregate_filter_join_manual_pushdown():</span>
<span id="cb19-31">    lineitem_projected <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lineitem[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_shipdate'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_orderkey'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_linestatus'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_returnflag'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>]]</span>
<span id="cb19-32">    lineitem_filtered <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lineitem_projected[lineitem_projected[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_shipdate'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1998-09-02"</span>]</span>
<span id="cb19-33">    orders_projected <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> orders[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o_orderkey'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o_orderstatus'</span>]]</span>
<span id="cb19-34">    orders_filtered <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> orders_projected[orders_projected[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o_orderstatus'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'O'</span>]</span>
<span id="cb19-35">    merged <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lineitem_filtered.merge(orders_filtered, left_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_orderkey'</span>, right_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o_orderkey'</span>)</span>
<span id="cb19-36">    result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged.groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_returnflag'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_linestatus'</span>]).agg(Sum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum'</span>), Min<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min'</span>), Max<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max'</span>), Avg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean'</span>))</span>
<span id="cb19-37">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(result)</span>
<span id="cb19-38"></span>
<span id="cb19-39">results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb19-40">results.append(timeit(duckdb_grouped_aggregate_filter_join_1t, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DuckDB (1T)'</span>))</span>
<span id="cb19-41">results.append(timeit(duckdb_grouped_aggregate_filter_join_2t, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DuckDB (2T)'</span>))</span>
<span id="cb19-42">results.append(timeit(pandas_grouped_aggregate_filter_join, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pandas'</span>))</span>
<span id="cb19-43">results.append(timeit(pandas_grouped_aggregate_filter_join_manual_pushdown, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pandas (manual pushdown)'</span>))</span>
<span id="cb19-44">plot_results(results, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Grouped Aggregate Join'</span>)</span>
<span id="cb19-45"></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  l_returnflag l_linestatus  sum(l_extendedprice)  min(l_extendedprice)  \
0            N            O          1.081147e+11                 901.0   

   max(l_extendedprice)  avg(l_extendedprice)  
0              104749.5          38250.450307  
  l_returnflag l_linestatus  sum(l_extendedprice)  min(l_extendedprice)  \
0            N            O          1.081147e+11                 901.0   

   max(l_extendedprice)  avg(l_extendedprice)  
0              104749.5          38250.450307  
                                    Sum    Min       Max           Avg
l_returnflag l_linestatus                                             
N            O             1.080448e+11  901.0  104749.5  38250.662806
                                    Sum    Min       Max           Avg
l_returnflag l_linestatus                                             
N            O             1.080448e+11  901.0  104749.5  38250.662806
Grouped Aggregate Join
                       name       time
0               DuckDB (1T)   0.218088
1               DuckDB (2T)   0.376592
2                    Pandas  11.403579
3  Pandas (manual pushdown)   2.765103</code></pre>
</div>
</div>
</section>
</section>
</section>
<section id="appendix-a-there-and-back-again-transferring-data-from-pandas-to-a-sql-engine-and-back" class="level1">
<h1>Appendix A: There and back again: Transferring data from Pandas to a SQL engine and back</h1>
<p>As Appendix A relies on the presence of an external PostgreSQL database server, the code cannot be executed in colab. The source code can be found here: https://gist.github.com/hannesmuehleisen/a95a39a1eda63aeb0ca13fd82d1ba49c</p>
</section>
<section id="appendix-b-pandassql" class="level1">
<h1>Appendix B: PandasSQL</h1>
<p>Note: we cannot run this on the original dataset, as colab will run out of memory and crash. Instead for the benchmark we add a sample clause to reduce the data set size to 10% of the original data set size.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>quiet pandasql</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandasql <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> psql</span>
<span id="cb22-2">pysqldf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">lambda</span> q: psql.sqldf(q, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">globals</span>())</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">lineitem_sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> duckdb.query(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SELECT * FROM 'lineitemsf1.snappy.parquet' USING SAMPLE 10%"</span>).to_df()</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">ungrouped_aggregate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb24-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    SELECT SUM(l_extendedprice), MIN(l_extendedprice), MAX(l_extendedprice), AVG(l_extendedprice) FROM lineitem_sample</span></span>
<span id="cb24-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb24-4"></span>
<span id="cb24-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> duckdb_ungrouped_aggregate(d_con):</span>
<span id="cb24-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(d_con.query(ungrouped_aggregate).to_df())</span>
<span id="cb24-7"></span>
<span id="cb24-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> duckdb_ungrouped_aggregate_1t():</span>
<span id="cb24-9">    duckdb_ungrouped_aggregate(duckdb)</span>
<span id="cb24-10"></span>
<span id="cb24-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> duckdb_ungrouped_aggregate_2t():</span>
<span id="cb24-12">    duckdb_ungrouped_aggregate(con)</span>
<span id="cb24-13"></span>
<span id="cb24-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> pandas_ungrouped_aggregate():</span>
<span id="cb24-15">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(lineitem_sample.agg(Sum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum'</span>), Min<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min'</span>), Max<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max'</span>), Avg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean'</span>)))</span>
<span id="cb24-16"></span>
<span id="cb24-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> ungrouped_aggregate_pandasql():</span>
<span id="cb24-18">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(pysqldf(ungrouped_aggregate))</span>
<span id="cb24-19"></span>
<span id="cb24-20">ua_results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb24-21">ua_results.append(timeit(duckdb_ungrouped_aggregate_1t, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DuckDB (1T)'</span>))</span>
<span id="cb24-22">ua_results.append(timeit(duckdb_ungrouped_aggregate_2t, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DuckDB (2T)'</span>))</span>
<span id="cb24-23">ua_results.append(timeit(pandas_ungrouped_aggregate, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pandas'</span>))</span>
<span id="cb24-24">ua_results.append(timeit(ungrouped_aggregate_pandasql, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PandaSQL'</span>))</span>
<span id="cb24-25">plot_results(ua_results, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Ungrouped Aggregate'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   sum(l_extendedprice)  min(l_extendedprice)  max(l_extendedprice)  \
0          2.318151e+10                 907.0              104899.5   

   avg(l_extendedprice)  
0          38240.198955  
   sum(l_extendedprice)  min(l_extendedprice)  max(l_extendedprice)  \
0          2.318151e+10                 907.0              104899.5   

   avg(l_extendedprice)  
0          38240.198955  
     l_extendedprice
Sum     2.318151e+10
Min     9.070000e+02
Max     1.048995e+05
Avg     3.824020e+04
   SUM(l_extendedprice)  MIN(l_extendedprice)  MAX(l_extendedprice)  \
0          2.318151e+10                 907.0              104899.5   

   AVG(l_extendedprice)  
0          38240.198955  
Ungrouped Aggregate
          name      time
0  DuckDB (1T)  0.039731
1  DuckDB (2T)  0.033024
2       Pandas  0.012675
3     PandaSQL  9.181672</code></pre>
</div>
</div>
</section>
<section id="appendix-c-directly-querying-parquet-files" class="level1">
<h1>Appendix C: Directly querying Parquet files</h1>
<p>In the benchmarks above, we fully read the parquet files into Pandas. However, DuckDB also has the capability of directly running queries on top of Parquet files. In this appendix, we show the performance of this compared to loading the file into Python first.</p>
<p>You can even use the wildcard syntax to run queries on multiple Parquet files in the same folder and create a unified single-table view over them (as long as they have the same schema).</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># need to install pyarrow for pandas parquet reading</span></span>
<span id="cb26-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>pip install pyarrow</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Requirement already satisfied: pyarrow in /Users/Nok_Lam_Chan/miniconda3/envs/duckdb/lib/python3.9/site-packages (10.0.0)
Requirement already satisfied: numpy&gt;=1.16.6 in /Users/Nok_Lam_Chan/miniconda3/envs/duckdb/lib/python3.9/site-packages (from pyarrow) (1.23.4)</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># set up the view</span></span>
<span id="cb28-2">parquet_con <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> duckdb.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>()</span>
<span id="cb28-3">parquet_con.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CREATE VIEW lineitem_parquet AS SELECT * FROM 'lineitemsf1.snappy.parquet'"</span>)</span>
<span id="cb28-4">parquet_con.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CREATE VIEW orders_parquet AS SELECT * FROM 'orders.parquet'"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>&lt;duckdb.DuckDBPyConnection&gt;</code></pre>
</div>
</div>
</section>
<section id="ungrouped-aggregate" class="level1">
<h1>Ungrouped Aggregate</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">ungrouped_aggregate <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb30-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    SELECT SUM(l_extendedprice), MIN(l_extendedprice), MAX(l_extendedprice), AVG(l_extendedprice) FROM lineitem_parquet</span></span>
<span id="cb30-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb30-4"></span>
<span id="cb30-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> duckdb_parquet_query(d_con):</span>
<span id="cb30-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(d_con.query(ungrouped_aggregate).to_df())</span>
<span id="cb30-7"></span>
<span id="cb30-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> duckdb_ungrouped_parquet_1t():</span>
<span id="cb30-9">  parquet_con.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PRAGMA threads=1'</span>)</span>
<span id="cb30-10">  duckdb_ungrouped_aggregate(parquet_con)</span>
<span id="cb30-11"> </span>
<span id="cb30-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> duckdb_ungrouped_parquet_2t():</span>
<span id="cb30-13">  parquet_con.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PRAGMA threads=2'</span>)</span>
<span id="cb30-14">  duckdb_ungrouped_aggregate(parquet_con)</span>
<span id="cb30-15"></span>
<span id="cb30-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> pandas_ungrouped_aggregate():</span>
<span id="cb30-17">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(lineitem.agg(Sum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum'</span>), Min<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min'</span>), Max<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max'</span>), Avg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean'</span>)))</span>
<span id="cb30-18"></span>
<span id="cb30-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> pandas_ungrouped_aggregate_parquet_load():</span>
<span id="cb30-20">  lineitem_pandas_parquet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_parquet(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lineitemsf1.snappy.parquet'</span>)</span>
<span id="cb30-21">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(lineitem_pandas_parquet.agg(Sum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum'</span>), Min<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min'</span>), Max<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max'</span>), Avg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean'</span>)))</span>
<span id="cb30-22"></span>
<span id="cb30-23"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> pandas_ungrouped_aggregate_parquet_load_pushdown():</span>
<span id="cb30-24">  lineitem_pandas_parquet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_parquet(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lineitemsf1.snappy.parquet'</span>, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>])</span>
<span id="cb30-25">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(lineitem_pandas_parquet.agg(Sum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum'</span>), Min<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min'</span>), Max<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max'</span>), Avg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean'</span>)))</span>
<span id="cb30-26"></span>
<span id="cb30-27">ua_results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb30-28">ua_results.append(timeit(duckdb_ungrouped_parquet_1t, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DuckDB (1 Thread)'</span>))</span>
<span id="cb30-29">ua_results.append(timeit(duckdb_ungrouped_parquet_2t, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DuckDB (2 Threads)'</span>))</span>
<span id="cb30-30">ua_results.append(timeit(pandas_ungrouped_aggregate, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pandas'</span>))</span>
<span id="cb30-31">ua_results.append(timeit(pandas_ungrouped_aggregate_parquet_load, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pandas + Parquet Load'</span>))</span>
<span id="cb30-32">ua_results.append(timeit(pandas_ungrouped_aggregate_parquet_load_pushdown, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pandas + Parquet Load (Pushdown)'</span>))</span>
<span id="cb30-33">plot_results(ua_results, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Ungrouped Aggregate (Parquet)'</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>   sum(l_extendedprice)  min(l_extendedprice)  max(l_extendedprice)  \
0          2.295773e+11                 901.0              104949.5   

   avg(l_extendedprice)  
0          38255.138485  
   sum(l_extendedprice)  min(l_extendedprice)  max(l_extendedprice)  \
0          2.295773e+11                 901.0              104949.5   

   avg(l_extendedprice)  
0          38255.138485  
     l_extendedprice
Sum     2.295773e+11
Min     9.010000e+02
Max     1.049495e+05
Avg     3.825514e+04
     l_extendedprice
Sum     2.295773e+11
Min     9.010000e+02
Max     1.049495e+05
Avg     3.825514e+04
     l_extendedprice
Sum     2.295773e+11
Min     9.010000e+02
Max     1.049495e+05
Avg     3.825514e+04
Ungrouped Aggregate (Parquet)
                               name      time
0                 DuckDB (1 Thread)  0.173902
1                DuckDB (2 Threads)  0.086305
2                            Pandas  0.050655
3             Pandas + Parquet Load  6.311870
4  Pandas + Parquet Load (Pushdown)  0.151299</code></pre>
</div>
</div>
</section>
<section id="grouped-aggregate-with-join-and-filter" class="level1">
<h1>Grouped Aggregate with Join and Filter</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> duckdb_grouped_aggregate_filter_join_pq(d_con):</span>
<span id="cb32-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(d_con.query(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span></span>
<span id="cb32-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">SELECT l_returnflag,</span></span>
<span id="cb32-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">       l_linestatus,</span></span>
<span id="cb32-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">       sum(l_extendedprice),</span></span>
<span id="cb32-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">       min(l_extendedprice),</span></span>
<span id="cb32-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">       max(l_extendedprice),</span></span>
<span id="cb32-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">       avg(l_extendedprice)</span></span>
<span id="cb32-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">FROM lineitem_parquet lineitem</span></span>
<span id="cb32-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">JOIN orders_parquet orders ON (l_orderkey=o_orderkey)</span></span>
<span id="cb32-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">WHERE l_shipdate &lt;= DATE '1998-09-02'</span></span>
<span id="cb32-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">  AND o_orderstatus='O'</span></span>
<span id="cb32-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">GROUP BY l_returnflag,</span></span>
<span id="cb32-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">         l_linestatus</span></span>
<span id="cb32-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'''</span>).to_df())</span>
<span id="cb32-16"></span>
<span id="cb32-17"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> duckdb_grouped_aggregate_filter_join_pq_1t():</span>
<span id="cb32-18">  parquet_con.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PRAGMA threads=1'</span>)</span>
<span id="cb32-19">  duckdb_grouped_aggregate_filter_join_pq(parquet_con)</span>
<span id="cb32-20"></span>
<span id="cb32-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> duckdb_grouped_aggregate_filter_join_pq_2t():</span>
<span id="cb32-22">  parquet_con.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'PRAGMA threads=2'</span>)</span>
<span id="cb32-23">  duckdb_grouped_aggregate_filter_join_pq(parquet_con)</span>
<span id="cb32-24"></span>
<span id="cb32-25"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> pandas_grouped_aggregate_filter_join_pq():</span>
<span id="cb32-26">  lineitem_pandas_parquet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_parquet(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lineitemsf1.snappy.parquet'</span>)</span>
<span id="cb32-27">  orders_pandas_parquet <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_parquet(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'orders.parquet'</span>)</span>
<span id="cb32-28">  merged <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lineitem_pandas_parquet.merge(orders, left_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_orderkey'</span>, right_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o_orderkey'</span>)</span>
<span id="cb32-29">  filtered_a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged[merged[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_shipdate'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1998-09-02"</span>]</span>
<span id="cb32-30">  filtered_b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> filtered_a[filtered_a[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o_orderstatus'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'O'</span>]</span>
<span id="cb32-31">  result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> filtered_b.groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_returnflag'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_linestatus'</span>]).agg(Sum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum'</span>), Min<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min'</span>), Max<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max'</span>), Avg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean'</span>))</span>
<span id="cb32-32">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(result)</span>
<span id="cb32-33"></span>
<span id="cb32-34"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> pandas_grouped_aggregate_filter_join_manual_pushdown_pq():</span>
<span id="cb32-35">  lineitem_projected <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_parquet(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'lineitemsf1.snappy.parquet'</span>, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_shipdate'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_orderkey'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_linestatus'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_returnflag'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>])</span>
<span id="cb32-36">  orders_projected <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_parquet(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'orders.parquet'</span>, columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o_orderkey'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o_orderstatus'</span>])</span>
<span id="cb32-37">  lineitem_filtered <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lineitem_projected[lineitem_projected[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_shipdate'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1998-09-02"</span>]</span>
<span id="cb32-38">  orders_filtered <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> orders_projected[orders_projected[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o_orderstatus'</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'O'</span>]</span>
<span id="cb32-39">  merged <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> lineitem_filtered.merge(orders_filtered, left_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_orderkey'</span>, right_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o_orderkey'</span>)</span>
<span id="cb32-40">  result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> merged.groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_returnflag'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_linestatus'</span>]).agg(Sum<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'sum'</span>), Min<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'min'</span>), Max<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'max'</span>), Avg<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'l_extendedprice'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'mean'</span>))</span>
<span id="cb32-41">  <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(result)</span>
<span id="cb32-42"></span>
<span id="cb32-43">results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb32-44">results.append(timeit(duckdb_grouped_aggregate_filter_join_pq_1t, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DuckDB (1T)'</span>))</span>
<span id="cb32-45">results.append(timeit(duckdb_grouped_aggregate_filter_join_pq_2t, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'DuckDB (2T)'</span>))</span>
<span id="cb32-46">results.append(timeit(pandas_grouped_aggregate_filter_join_pq, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pandas'</span>))</span>
<span id="cb32-47">results.append(timeit(pandas_grouped_aggregate_filter_join_manual_pushdown_pq, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Pandas (manual pushdown)'</span>))</span>
<span id="cb32-48">plot_results(results, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Grouped Aggregate Join (Parquet)'</span>)</span>
<span id="cb32-49"></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>  l_returnflag l_linestatus  sum(l_extendedprice)  min(l_extendedprice)  \
0            N            O          1.081147e+11                 901.0   

   max(l_extendedprice)  avg(l_extendedprice)  
0              104749.5          38250.450307  
  l_returnflag l_linestatus  sum(l_extendedprice)  min(l_extendedprice)  \
0            N            O          1.081147e+11                 901.0   

   max(l_extendedprice)  avg(l_extendedprice)  
0              104749.5          38250.450307  
                                    Sum    Min       Max           Avg
l_returnflag l_linestatus                                             
N            O             1.080448e+11  901.0  104749.5  38250.662806
                                    Sum    Min       Max           Avg
l_returnflag l_linestatus                                             
N            O             1.080448e+11  901.0  104749.5  38250.662806
Grouped Aggregate Join (Parquet)
                       name       time
0               DuckDB (1T)   0.828549
1               DuckDB (2T)   0.508537
2                    Pandas  13.954761
3  Pandas (manual pushdown)   2.337109</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Part II - Transform Pandas to DuckDB Query</span></span>
<span id="cb34-2"></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Part III - Create the DuckDB DataSet</span></span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Part IV - Create the DuckDB Transformer</span></span></code></pre></div>
</div>


</section>

 ]]></description>
  <category>python</category>
  <guid>https://noklam.github.io/blog/posts/kedro_duckdb/kedro-duckdb.html</guid>
  <pubDate>Tue, 15 Nov 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Understanding the Kedro codebase - A quick dirty meta-analysis - (Part I)</title>
  <link>https://noklam.github.io/blog/posts/pandas_expert/kedro-meta-analysis.html</link>
  <description><![CDATA[ 




<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/pjq3QOxl9Ok" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<p>Inspired by this talk</p>
<section id="how-many-lines-of-code-in-kedro" class="level1">
<h1>How many lines of code in Kedro?</h1>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Counter</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">REPO_PATH <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/Users/Nok_Lam_Chan/GitHub/kedro"</span>)</span>
<span id="cb2-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(REPO_PATH.iterdir())</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>[PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/test_requirements.txt'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/CODE_OF_CONDUCT.md'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/LICENSE.md'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tools'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro_technical_charter.pdf'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/.DS_Store'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/test'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/.pytest_cache'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/derby.log'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro.egg-info'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/.pre-commit-config.yaml'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/.coverage'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/Makefile'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/CITATION.cff'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/CODEOWNERS'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris-demo'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/pyproject.toml'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/trufflehog-ignore.txt'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/dependency'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/MANIFEST.in'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/docs'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/.readthedocs.yml'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/dep_tree.log'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/README.md'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/RELEASE.md'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/setup.py'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/demo-project'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/logs'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/.mypy_cache'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/.gitignore'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/static'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/CONTRIBUTING.md'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/behave.ini'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/.github'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/.gitpod.yml'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/info.log'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/coverage.xml'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/errors.log'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/.git'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/htmlcov'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/.vscode'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/data'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/conf'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/.circleci'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/import.log'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/notebooks'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/.run'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/.idea'),
 PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/src')]</code></pre>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> count_effective_line(counter, fn):</span>
<span id="cb4-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span> (fn) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:</span>
<span id="cb4-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> f:</span>
<span id="cb4-4">            counter[fn] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">lines_count <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Counter()</span>
<span id="cb5-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> fn <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> REPO_PATH.rglob(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"*/*.py"</span>):</span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#     print(fn)</span></span>
<span id="cb5-4">    count_effective_line(lines_count, fn)</span>
<span id="cb5-5"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(lines_count)</span>
<span id="cb5-6">            </span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Counter({PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/spark/test_spark_dataset.py'): 984, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/pipeline/test_pipeline.py'): 940, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/pipeline.py'): 926, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/session/test_session.py'): 891, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/cli/micropkg.py'): 854, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/cli/micropkg/test_micropkg_pull.py'): 846, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/core.py'): 748, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/cli/test_cli.py'): 730, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/io/test_data_catalog.py'): 685, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/cli/test_starters.py'): 639, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/cli_steps.py'): 623, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/node.py'): 612, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/docs/conf.py'): 598, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py'): 594, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/docs/build/conf.py'): 587, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/cli/micropkg/test_micropkg_package.py'): 581, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/session/test_session_extension_hooks.py'): 576, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/io/test_partitioned_dataset.py'): 565, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/cli/starters.py'): 552, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/partitioned_dataset.py'): 551, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/cli/pipeline/test_pipeline.py'): 522, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/io/test_incremental_dataset.py'): 503, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/context/test_context.py'): 485, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/config/test_templated_config.py'): 482, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/cli/test_project.py'): 479, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/cli/test_jupyter.py'): 470, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/cli/utils.py'): 469, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/runner.py'): 456, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/tensorflow/test_tensorflow_model_dataset.py'): 441, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/pandas/sql_dataset.py'): 438, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/matplotlib/test_matplotlib_writer.py'): 436, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/pipeline/test_node.py'): 434, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/session/session.py'): 423, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/spark/spark_dataset.py'): 422, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/pipeline/test_modular_pipeline.py'): 418, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/runner/test_parallel_runner.py'): 401, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/cli/project.py'): 392, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/pipeline/test_pipeline_with_transcoding.py'): 391, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/pandas/test_generic_dataset.py'): 383, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/session/conftest.py'): 381, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/pandas/test_sql_dataset.py'): 374, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/project/__init__.py'): 369, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/config/test_config.py'): 354, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/parallel_runner.py'): 353, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/context/context.py'): 345, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/pandas/test_parquet_dataset.py'): 344, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/cli/pipeline.py'): 336, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/pandas/test_gbq_dataset.py'): 315, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/spark/test_spark_hive_dataset.py'): 314, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/pandas/gbq_dataset.py'): 314, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/cli/test_catalog.py'): 305, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/ipython/test_ipython.py'): 304, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/pandas/test_csv_dataset.py'): 300, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/hooks/specs.py'): 296, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/modular_pipeline.py'): 290, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/cli/jupyter.py'): 282, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/pandas/test_excel_dataset.py'): 281, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/config/templated_config.py'): 281, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro/src/build/lib/resume_kedro/dagascii.py'): 275, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/runner/test_sequential_runner.py'): 273, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/pickle/test_pickle_dataset.py'): 269, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/cli/micropkg/test_micropkg_requirements.py'): 266, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/project/test_pipeline_discovery.py'): 260, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/pandas/excel_dataset.py'): 254, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/test_startup.py'): 250, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/config/common.py'): 248, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/pandas/generic_dataset.py'): 246, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/pandas/test_hdf_dataset.py'): 245, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/matplotlib/matplotlib_writer.py'): 243, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/pickle/pickle_dataset.py'): 243, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/pandas/test_xml_dataset.py'): 241, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/pandas/test_json_dataset.py'): 241, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/geojson/test_geojson_dataset.py'): 232, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/pillow/test_image_dataset.py'): 231, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/pandas/parquet_dataset.py'): 230, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/pipeline/test_pipeline_from_missing.py'): 227, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/io/test_memory_dataset.py'): 226, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/networkx/test_json_dataset.py'): 226, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/email/test_message_dataset.py'): 226, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris/docs/source/conf.py'): 225, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris-demo/docs/source/conf.py'): 225, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro/docs/source/conf.py'): 225, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/test/docs/source/conf.py'): 224, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/templates/project/{{ cookiecutter.repo_name }}/docs/source/conf.py'): 224, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/test_starter/{{ cookiecutter.repo_name }}/docs/source/conf.py'): 222, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/holoviews/test_holoviews_writer.py'): 220, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/pandas/test_feather_dataset.py'): 220, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/spark/spark_hive_dataset.py'): 220, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/runner/test_thread_runner.py'): 213, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/cli/cli.py'): 211, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/yaml/test_yaml_dataset.py'): 210, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/pandas/hdf_dataset.py'): 204, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/json/test_json_dataset.py'): 200, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/io/test_lambda_dataset.py'): 194, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/tracking/test_metrics_dataset.py'): 194, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/pandas/csv_dataset.py'): 194, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/pandas/feather_dataset.py'): 191, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/redis/redis_dataset.py'): 189, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/networkx/test_gml_dataset.py'): 188, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/networkx/test_graphml_dataset.py'): 188, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/tensorflow/tensorflow_model_dataset.py'): 188, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/email/message_dataset.py'): 188, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/text/test_text_dataset.py'): 187, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/pandas/json_dataset.py'): 187, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/tracking/test_json_dataset.py'): 185, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/cli/catalog.py'): 176, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/spark/spark_jdbc_dataset.py'): 175, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/pandas/xml_dataset.py'): 171, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/api/test_api_dataset.py'): 170, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/runner/conftest.py'): 168, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/redis/test_redis_dataset.py'): 165, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/ipython/__init__.py'): 164, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/dask/test_parquet_dataset.py'): 162, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/json/json_dataset.py'): 160, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/cli/conftest.py'): 159, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/geopandas/geojson_dataset.py'): 157, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/startup.py'): 156, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/thread_runner.py'): 156, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/yaml/yaml_dataset.py'): 155, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/tools/test_cli.py'): 154, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/plotly/json_dataset.py'): 154, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/networkx/json_dataset.py'): 150, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/networkx/gml_dataset.py'): 145, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/networkx/graphml_dataset.py'): 143, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/io/test_cached_dataset.py'): 142, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/pillow/image_dataset.py'): 142, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/api/api_dataset.py'): 142, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/pipeline/test_node_run.py'): 141, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/biosequence/biosequence_dataset.py'): 137, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/holoviews/holoviews_writer.py'): 137, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/dask/parquet_dataset.py'): 136, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/config/config.py'): 134, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/memory_dataset.py'): 132, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/text/text_dataset.py'): 131, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/environment.py'): 128, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/cli/test_cli_hooks.py'): 128, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/session/test_session_hook_manager.py'): 126, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/spark/test_spark_jdbc_dataset.py'): 121, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/plotly/plotly_dataset.py'): 117, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/cached_dataset.py'): 113, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/lambda_dataset.py'): 113, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/plotly/test_plotly_dataset.py'): 108, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/spark/deltatable_dataset.py'): 108, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/bioinformatics/test_biosequence_dataset.py'): 107, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/hooks/manager.py'): 106, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/sh_run.py'): 105, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/project/test_settings.py'): 102, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/plotly/test_json_dataset.py'): 101, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/io/test_core.py'): 96, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/logging/color_logger.py'): 95, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/conftest.py'): 89, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/session/test_store.py'): 89, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/spark/test_deltatable_dataset.py'): 89, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/cli/test_registry.py'): 88, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/sequential_runner.py'): 87, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/util.py'): 84, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/pipeline/test_pipeline_integration.py'): 84, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/cli/pipeline/conftest.py'): 84, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/test_starter/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/pipelines/data_science/nodes.py'): 80, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/project/test_pipeline_registry.py'): 79, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/cli/micropkg/conftest.py'): 79, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/hooks/test_manager.py'): 75, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris/src/iris/nodes.py'): 74, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris-demo/src/iris_demo/nodes.py'): 74, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro/src/resume_kedro/nodes.py'): 74, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro/src/build/lib/resume_kedro/nodes.py'): 74, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/tracking/metrics_dataset.py'): 68, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/spark/test_memory_dataset.py'): 67, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tools/cli.py'): 62, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris-demo/src/iris_demo/settings.py'): 62, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/project/test_logging.py'): 58, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro/src/build/lib/resume_kedro/settings.py'): 56, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/test_starter/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/pipelines/data_engineering/nodes.py'): 51, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/cli/registry.py'): 50, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/cli/hooks/manager.py'): 49, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/test/src/test/__main__.py'): 47, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris/src/iris/__main__.py'): 47, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris-demo/src/iris_demo/__main__.py'): 47, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/test_starter/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/__main__.py'): 47, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro/src/resume_kedro/__main__.py'): 47, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro/src/build/lib/resume_kedro/__main__.py'): 47, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/templates/project/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/__main__.py'): 47, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/tracking/json_dataset.py'): 47, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/cli/hooks/specs.py'): 46, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/session/shelvestore.py'): 43, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/test/src/tests/test_run.py'): 41, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/spark/conftest.py'): 41, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/templates/project/{{ cookiecutter.repo_name }}/src/tests/test_run.py'): 41, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/test_starter/{{ cookiecutter.repo_name }}/src/tests/test_run.py'): 40, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/test/src/setup.py'): 39, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris/src/tests/test_run.py'): 39, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris-demo/src/setup.py'): 39, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris-demo/src/tests/test_run.py'): 39, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/test_starter/{{ cookiecutter.repo_name }}/src/setup.py'): 39, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/test_starter/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/settings.py'): 39, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro/src/tests/test_run.py'): 39, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro/src/resume_kedro/pipeline.py'): 39, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/config/abstract_config.py'): 39, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/session/store.py'): 39, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/templates/project/{{ cookiecutter.repo_name }}/src/setup.py'): 39, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/templates/project/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/settings.py'): 39, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/pandas/__init__.py'): 39, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro/src/build/lib/resume_kedro/pipeline.py'): 38, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/test/src/test/settings.py'): 37, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris/src/setup.py'): 37, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris/src/iris/settings.py'): 37, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro/src/setup.py'): 37, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/datasets/conftest.py'): 35, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris/src/iris/pipeline.py'): 33, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris-demo/src/iris_demo/pipeline.py'): 33, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/__init__.py'): 33, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/test_utils.py'): 30, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/utils.py'): 28, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/test_plugin/plugin.py'): 27, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/test_starter/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/pipelines/data_science/pipeline.py'): 27, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tools/circleci/github_scripts/kedro_version.py'): 26, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/test_starter/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/pipelines/data_engineering/pipeline.py'): 26, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris/src/settings.py'): 24, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/framework/cli/hooks/test_manager.py'): 22, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/extensions/ipython.py'): 22, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/test_starter/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/pipeline_registry.py'): 19, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/config/__init__.py'): 19, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris/src/iris/pipeline_registry.py'): 18, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris-demo/src/iris_demo/pipeline_registry.py'): 18, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro/src/resume_kedro/pipeline_registry.py'): 18, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro/src/build/lib/resume_kedro/pipeline_registry.py'): 18, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/tests/extras/logging/test_color_logger.py'): 16, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/__init__.py'): 16, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/templates/project/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/pipeline_registry.py'): 16, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/logging/__init__.py'): 15, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/networkx/__init__.py'): 15, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/spark/__init__.py'): 14, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/test/src/test/pipeline_registry.py'): 13, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/test_plugin/setup.py'): 12, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/__init__.py'): 11, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/hooks/markers.py'): 11, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/plotly/__init__.py'): 11, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/api/__init__.py'): 11, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/tracking/__init__.py'): 11, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/__main__.py'): 10, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/cli/hooks/markers.py'): 10, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/templates/pipeline/{{ cookiecutter.pipeline_name }}/__init__.py'): 10, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/templates/pipeline/{{ cookiecutter.pipeline_name }}/pipeline.py'): 10, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris/src/tests/test_pipeline.py'): 9, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris-demo/src/tests/test_pipeline.py'): 9, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro/src/tests/test_pipeline.py'): 9, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/__init__.py'): 9, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/templates/pipeline/{{ cookiecutter.pipeline_name }}/tests/test_pipeline.py'): 9, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/dask/__init__.py'): 8, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/redis/__init__.py'): 8, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/geopandas/__init__.py'): 8, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/pillow/__init__.py'): 8, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/json/__init__.py'): 8, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/biosequence/__init__.py'): 8, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/tensorflow/__init__.py'): 8, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/matplotlib/__init__.py'): 8, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/yaml/__init__.py'): 8, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/pickle/__init__.py'): 8, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/text/__init__.py'): 8, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/holoviews/__init__.py'): 8, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/email/__init__.py'): 8, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/test_starter/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/pipelines/data_science/__init__.py'): 7, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/test_starter/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/pipelines/data_engineering/__init__.py'): 7, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/context/__init__.py'): 7, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/cli/__init__.py'): 7, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/session/__init__.py'): 6, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/hooks/__init__.py'): 5, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/cli/hooks/__init__.py'): 5, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/test/src/test/__init__.py'): 4, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris/src/iris/__init__.py'): 4, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/iris-demo/src/iris_demo/__init__.py'): 4, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/features/steps/test_starter/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/__init__.py'): 4, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro/src/resume_kedro/__init__.py'): 4, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro/src/build/lib/resume_kedro/__init__.py'): 4, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/templates/pipeline/{{ cookiecutter.pipeline_name }}/nodes.py'): 4, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/templates/project/{{ cookiecutter.repo_name }}/src/{{ cookiecutter.python_package }}/__init__.py'): 4, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/resume-kedro/src/resume_kedro/settings.py'): 3, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/datasets/__init__.py'): 3, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/extensions/__init__.py'): 3, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/extras/__init__.py'): 2, PosixPath('/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/__init__.py'): 1})</code></pre>
</div>
</div>
</section>
<section id="clean-up-the-dictionary-a-little-bit" class="level1">
<h1>Clean up the dictionary a little bit</h1>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">line_counts_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(lines_count.items(), columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fullpath"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"line_of_code"</span>])</span>
<span id="cb7-2">line_counts_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fullpath"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> line_counts_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fullpath"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>)</span>
<span id="cb7-3">line_counts_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fullpath"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  line_counts_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fullpath"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.replace(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/Users/Nok_Lam_Chan/GitHub/kedro/"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb7-4">line_counts_df.head(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">fullpath</th>
<th data-quarto-table-cell-role="th">line_of_code</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>tools/cli.py</td>
<td>62</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>features/environment.py</td>
<td>128</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">line_counts_df[[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"toplevel"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"module"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"submodule"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"filename"</span>]] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> line_counts_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fullpath"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.split(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span>,expand<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>)</span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">line_counts_df</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">fullpath</th>
<th data-quarto-table-cell-role="th">line_of_code</th>
<th data-quarto-table-cell-role="th">toplevel</th>
<th data-quarto-table-cell-role="th">module</th>
<th data-quarto-table-cell-role="th">submodule</th>
<th data-quarto-table-cell-role="th">filename</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>tools/cli.py</td>
<td>62</td>
<td>tools</td>
<td>cli.py</td>
<td>None</td>
<td>None</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>features/environment.py</td>
<td>128</td>
<td>features</td>
<td>environment.py</td>
<td>None</td>
<td>None</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>tests/test_utils.py</td>
<td>30</td>
<td>tests</td>
<td>test_utils.py</td>
<td>None</td>
<td>None</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>tests/conftest.py</td>
<td>89</td>
<td>tests</td>
<td>conftest.py</td>
<td>None</td>
<td>None</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>docs/conf.py</td>
<td>598</td>
<td>docs</td>
<td>conf.py</td>
<td>None</td>
<td>None</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">276</td>
<td>kedro/extras/datasets/pandas/feather_dataset.py</td>
<td>191</td>
<td>kedro</td>
<td>extras</td>
<td>datasets</td>
<td>pandas/feather_dataset.py</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">277</td>
<td>kedro/extras/datasets/pandas/hdf_dataset.py</td>
<td>204</td>
<td>kedro</td>
<td>extras</td>
<td>datasets</td>
<td>pandas/hdf_dataset.py</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">278</td>
<td>kedro/extras/datasets/pandas/csv_dataset.py</td>
<td>194</td>
<td>kedro</td>
<td>extras</td>
<td>datasets</td>
<td>pandas/csv_dataset.py</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">279</td>
<td>kedro/extras/datasets/pandas/excel_dataset.py</td>
<td>254</td>
<td>kedro</td>
<td>extras</td>
<td>datasets</td>
<td>pandas/excel_dataset.py</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">280</td>
<td>kedro/extras/datasets/pandas/gbq_dataset.py</td>
<td>314</td>
<td>kedro</td>
<td>extras</td>
<td>datasets</td>
<td>pandas/gbq_dataset.py</td>
</tr>
</tbody>
</table>

<p>281 rows √ó 6 columns</p>
</div>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Sort by Top level module</span></span>
<span id="cb10-2">line_counts_df.groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"toplevel"</span>]).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().sort_values(ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, by <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"line_of_code"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">line_of_code</th>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">toplevel</th>
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">tests</td>
<td>25341</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">kedro</td>
<td>18683</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">features</td>
<td>1587</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">docs</td>
<td>1185</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">resume-kedro</td>
<td>1007</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">iris-demo</td>
<td>550</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">iris</td>
<td>547</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">test</td>
<td>405</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">tools</td>
<td>88</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Interstingly we have roughly a 1:1 ratio between <code>tests</code> and <code>kedro</code></p>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">line_counts_df.groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"module"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"submodule"</span>]).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().sort_values(ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, by <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"line_of_code"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">line_of_code</th>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">module</th>
<th data-quarto-table-cell-role="th">submodule</th>
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">extras</td>
<td data-quarto-table-cell-role="th">datasets</td>
<td>15775</td>
</tr>
<tr class="even">
<td rowspan="2" data-quarto-table-cell-role="th" data-valign="top">framework</td>
<td data-quarto-table-cell-role="th">cli</td>
<td>8837</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">session</td>
<td>2574</td>
</tr>
<tr class="even">
<td rowspan="2" data-quarto-table-cell-role="th" data-valign="top">pipeline</td>
<td data-quarto-table-cell-role="th">test_pipeline.py</td>
<td>940</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">pipeline.py</td>
<td>926</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">...</td>
<td data-quarto-table-cell-role="th">...</td>
<td>...</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">config</td>
<td data-quarto-table-cell-role="th">__init__.py</td>
<td>19</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">runner</td>
<td data-quarto-table-cell-role="th">__init__.py</td>
<td>16</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">pipeline</td>
<td data-quarto-table-cell-role="th">__init__.py</td>
<td>9</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">extras</td>
<td data-quarto-table-cell-role="th">__init__.py</td>
<td>2</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">framework</td>
<td data-quarto-table-cell-role="th">__init__.py</td>
<td>1</td>
</tr>
</tbody>
</table>

<p>74 rows √ó 1 columns</p>
</div>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Sort by Sub-module</span></span>
<span id="cb12-2">kedro_line_counts_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> line_counts_df[line_counts_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"toplevel"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"kedro"</span>]</span>
<span id="cb12-3">tmp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kedro_line_counts_df.groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"module"</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().rename(mapper<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"line_of_code"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"module_line_of_code"</span>},axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> )</span>
<span id="cb12-4">kedro_line_counts_df_group <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> kedro_line_counts_df.groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"module"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"submodule"</span>]).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().reset_index().merge(tmp, left_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"module"</span>, right_on<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"module"</span>)</span>
<span id="cb12-5"></span>
<span id="cb12-6"></span>
<span id="cb12-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># .sort_values(ascending=False, by ="line_of_code")</span></span></code></pre></div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">kedro_line_counts_df.groupby([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"module"</span>]).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>().sort_values(ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, by <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"line_of_code"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">line_of_code</th>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">module</th>
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">extras</td>
<td>6871</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">framework</td>
<td>5246</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">io</td>
<td>2284</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">pipeline</td>
<td>1837</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">runner</td>
<td>1068</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">config</td>
<td>721</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">templates</td>
<td>443</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">ipython</td>
<td>164</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">utils.py</td>
<td>28</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">__init__.py</td>
<td>11</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">__main__.py</td>
<td>10</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Sort by file </span></span>
<span id="cb14-2">kedro_line_counts_df_group.sort_values(ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, by <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"module_line_of_code"</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"line_of_code"</span>])</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">module</th>
<th data-quarto-table-cell-role="th">submodule</th>
<th data-quarto-table-cell-role="th">line_of_code</th>
<th data-quarto-table-cell-role="th">module_line_of_code</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">6</td>
<td>extras</td>
<td>datasets</td>
<td>6734</td>
<td>6871</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">8</td>
<td>extras</td>
<td>logging</td>
<td>110</td>
<td>6871</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">7</td>
<td>extras</td>
<td>extensions</td>
<td>25</td>
<td>6871</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">5</td>
<td>extras</td>
<td>__init__.py</td>
<td>2</td>
<td>6871</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">10</td>
<td>framework</td>
<td>cli</td>
<td>3439</td>
<td>5246</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">14</td>
<td>framework</td>
<td>session</td>
<td>511</td>
<td>5246</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">12</td>
<td>framework</td>
<td>hooks</td>
<td>418</td>
<td>5246</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">13</td>
<td>framework</td>
<td>project</td>
<td>369</td>
<td>5246</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">11</td>
<td>framework</td>
<td>context</td>
<td>352</td>
<td>5246</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">15</td>
<td>framework</td>
<td>startup.py</td>
<td>156</td>
<td>5246</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">9</td>
<td>framework</td>
<td>__init__.py</td>
<td>1</td>
<td>5246</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">18</td>
<td>io</td>
<td>core.py</td>
<td>748</td>
<td>2284</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">19</td>
<td>io</td>
<td>data_catalog.py</td>
<td>594</td>
<td>2284</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">22</td>
<td>io</td>
<td>partitioned_dataset.py</td>
<td>551</td>
<td>2284</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">21</td>
<td>io</td>
<td>memory_dataset.py</td>
<td>132</td>
<td>2284</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">17</td>
<td>io</td>
<td>cached_dataset.py</td>
<td>113</td>
<td>2284</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">20</td>
<td>io</td>
<td>lambda_dataset.py</td>
<td>113</td>
<td>2284</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">16</td>
<td>io</td>
<td>__init__.py</td>
<td>33</td>
<td>2284</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">27</td>
<td>pipeline</td>
<td>pipeline.py</td>
<td>926</td>
<td>1837</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">26</td>
<td>pipeline</td>
<td>node.py</td>
<td>612</td>
<td>1837</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">25</td>
<td>pipeline</td>
<td>modular_pipeline.py</td>
<td>290</td>
<td>1837</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">24</td>
<td>pipeline</td>
<td>__init__.py</td>
<td>9</td>
<td>1837</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">30</td>
<td>runner</td>
<td>runner.py</td>
<td>456</td>
<td>1068</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">29</td>
<td>runner</td>
<td>parallel_runner.py</td>
<td>353</td>
<td>1068</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">32</td>
<td>runner</td>
<td>thread_runner.py</td>
<td>156</td>
<td>1068</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">31</td>
<td>runner</td>
<td>sequential_runner.py</td>
<td>87</td>
<td>1068</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">28</td>
<td>runner</td>
<td>__init__.py</td>
<td>16</td>
<td>1068</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">4</td>
<td>config</td>
<td>templated_config.py</td>
<td>281</td>
<td>721</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>config</td>
<td>common.py</td>
<td>248</td>
<td>721</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>config</td>
<td>config.py</td>
<td>134</td>
<td>721</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">1</td>
<td>config</td>
<td>abstract_config.py</td>
<td>39</td>
<td>721</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">0</td>
<td>config</td>
<td>__init__.py</td>
<td>19</td>
<td>721</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">34</td>
<td>templates</td>
<td>project</td>
<td>410</td>
<td>443</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">33</td>
<td>templates</td>
<td>pipeline</td>
<td>33</td>
<td>443</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">23</td>
<td>ipython</td>
<td>__init__.py</td>
<td>164</td>
<td>164</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<div class="cell" data-vscode="{&quot;languageId&quot;:&quot;python&quot;}">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Total number of LOC</span></span>
<span id="cb15-2">kedro_line_counts_df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"line_of_code"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>18683</code></pre>
</div>
</div>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p>The kedro codebase is not huge, roughly 20000 line of code, compare to pandas which has &gt; 250000 of code, 10x smaller. The <code>datasets</code> and <code>framework</code> code is the largest module which isn‚Äôt surprise to me. The more surprising is how small <code>config</code> actually is, but it creates huge complexity in terms of a kedro project. The <code>cli</code> is also relatively huge as it takes ~3000 lines of code which I didn‚Äôt expected.</p>


</section>

 ]]></description>
  <category>kedro</category>
  <guid>https://noklam.github.io/blog/posts/pandas_expert/kedro-meta-analysis.html</guid>
  <pubDate>Sun, 13 Nov 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Being Python Expert</title>
  <link>https://noklam.github.io/blog/posts/python_expert/python-expert-decorator-generator-contextmanager.html</link>
  <description><![CDATA[ 




<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/cKPlPJyQrt4" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<p>This presentation introduce three concepts, <code>decorator</code>, <code>generator</code> and <code>contextmanager</code>. The presenter explains that Python is a Protocol oriented langauge brilliantly and put these three concepts together to illustrate a story. Ultimately, being a Python expert doesn‚Äôt mean that you write advance syntax, but using these pattern wisely with simple code. These three concepts both serves its own puprose and are orthogonal to each other, yet working nicely when they are composed together.</p>
<section id="meet-the-python-data-model" class="level2">
<h2 class="anchored" data-anchor-id="meet-the-python-data-model">Meet the Python Data Model</h2>
<p>With python, there are almost always a lower level <code>__</code> method corresponds to a higher-level function/syntax. It‚Äôs useful to change these behavior and understand how the Python Data Model work. You can find all the dunder <code>__</code> method here. https://docs.python.org/3/reference/datamodel.html</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> y   <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__add__</span></span>
<span id="cb1-2"> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">repr</span>(s) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__repr__</span></span>
<span id="cb1-3"> x()     <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--&gt;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__call__</span></span></code></pre></div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">## Metaclasses</span></span>
<span id="cb2-2">`metaclass` exists to allow library code works nicely <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> user code. For example, how can a library author ensure that its user will follow its protocol <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> using it wrongly? Again you can dive into `__new__` <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ensuring that. In practice, the code <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> already written <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> `abc` <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> people use `<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">@</span>abstractmethod` `abc.ABCMeta`</span></code></pre></div>
</div>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Meet the `__builtins__` library</span></span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> builtins</span>
<span id="cb3-3">__build_class__</span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Nok:</span>
<span id="cb3-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">pass</span></span>
<span id="cb3-7"></span>
<span id="cb3-8">Nok() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This is possible because class is a Python keyword</span></span>
<span id="cb3-9"></span>
<span id="cb3-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># You can actually construct a class with a function.</span></span>
<span id="cb3-11">builtins.__build_class__(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Nok"</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>TypeError: __build_class__: not enough arguments</code></pre>
</div>
</div>
</section>
<section id="generator" class="level2">
<h2 class="anchored" data-anchor-id="generator">Generator</h2>
<ul>
<li>Eager vs Lazy</li>
<li>Process when data comes - memory efficient and no wait.</li>
<li><code>yield</code> control - interleaving. Idea of executing some code, then passing the output back to user, do something and continue.</li>
</ul>
<div class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> temptable(cur):</span>
<span id="cb5-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Create Table"</span>)</span>
<span id="cb5-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">yield</span></span>
<span id="cb5-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Drop Table"</span>)</span>
<span id="cb5-5"></span>
<span id="cb5-6"></span>
<span id="cb5-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> T:</span>
<span id="cb5-8">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__enter__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb5-9">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> temptable(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"123"</span>)</span>
<span id="cb5-10">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gen)</span>
<span id="cb5-11">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span></span>
<span id="cb5-12"></span>
<span id="cb5-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__exit__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>args):</span>
<span id="cb5-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.gen, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb5-15"></span>
<span id="cb5-16"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> T():</span>
<span id="cb5-17">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Finish"</span>)</span>
<span id="cb5-18"></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Create Table
Finish
Drop Table</code></pre>
</div>
</div>


</section>

 ]]></description>
  <category>python</category>
  <guid>https://noklam.github.io/blog/posts/python_expert/python-expert-decorator-generator-contextmanager.html</guid>
  <pubDate>Thu, 10 Nov 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Demo of debugging Kedro pipeline with noetebook</title>
  <link>https://noklam.github.io/blog/posts/2022-11-08-kedro-debugging.html</link>
  <description><![CDATA[ 




<section id="steps-to-debug-kedro-pipeline-in-a-notebook" class="level1">
<h1>Steps to debug Kedro pipeline in a notebook</h1>
<ol type="1">
<li>Read from stack trace - find out the line of code that produce the error</li>
<li>Find which node this function belongs to</li>
<li>Trying to rerun the pipeline just before this node</li>
<li>If it‚Äôs not a persisted dataset, you need to change it in <code>catalog.yml</code>, and re-run the pipeline, error is thrown again</li>
<li><code>session</code> has already been used once, so if you call session again it will throw error. (so he had a wrapper function that recreate <code>session</code> and do something similar to <code>session.run</code></li>
<li>Create a new session or <code>%reload_kedro</code>?</li>
<li>Now <code>catalog.load</code> that persisted dataset, i.e.&nbsp;<code>func(catalog.load("some_data"))</code></li>
<li>Copy the source code of <code>func</code> to notebook, it would work if the function itself is the node function, but if it is some function buried deep down, that‚Äôs a lot more copy-pasting and change of import maybe.</li>
<li>Change the source code and make it work in the notebook</li>
<li>Rerun the pipeline to ensure everything works</li>
</ol>
</section>
<section id="running-session-as-usual" class="level1">
<h1>Running Session as Usual</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>reload_kedro</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">[11/08/22 16:44:22] </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Resolved project path as:                                              <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/ipython/__init__.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">__init__.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/ipython/__init__.py#132" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">132</span></a>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>         <span style="color: #800080; text-decoration-color: #800080">/Users/Nok_Lam_Chan/dev/kedro_gallery/</span><span style="color: #ff00ff; text-decoration-color: #ff00ff">jupyter-debug-demo.</span>              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">               </span>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>         To set a different path, run <span style="color: #008000; text-decoration-color: #008000">'%reload_kedro &lt;project_root&gt;'</span>            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">               </span>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">[11/08/22 16:44:24] </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Kedro project jupyter_debug_demo                                       <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/ipython/__init__.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">__init__.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/ipython/__init__.py#101" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">101</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Defined global variable <span style="color: #008000; text-decoration-color: #008000">'context'</span>, <span style="color: #008000; text-decoration-color: #008000">'session'</span>, <span style="color: #008000; text-decoration-color: #008000">'catalog'</span> and            <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/ipython/__init__.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">__init__.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/ipython/__init__.py#102" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">102</span></a>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>         <span style="color: #008000; text-decoration-color: #008000">'pipelines'</span>                                                            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">               </span>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Registered line magic <span style="color: #008000; text-decoration-color: #008000">'run_viz'</span>                                        <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/ipython/__init__.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">__init__.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/ipython/__init__.py#108" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">108</span></a>
</pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">session</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold">&lt;</span><span style="color: #ff00ff; text-decoration-color: #ff00ff; font-weight: bold">kedro.framework.session.session.KedroSession</span><span style="color: #000000; text-decoration-color: #000000"> object at </span><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0x7fc47a1a0be0</span><span style="font-weight: bold">&gt;</span>
</pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">pipelines</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold">{</span><span style="color: #008000; text-decoration-color: #008000">'__default__'</span>: <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">Pipeline</span><span style="font-weight: bold">([</span>
<span style="color: #800080; text-decoration-color: #800080; font-weight: bold">Node</span><span style="font-weight: bold">(</span>split_data, <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'example_iris_data'</span>, <span style="color: #008000; text-decoration-color: #008000">'parameters'</span><span style="font-weight: bold">]</span>, <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'X_train'</span>, <span style="color: #008000; text-decoration-color: #008000">'X_test'</span>, <span style="color: #008000; text-decoration-color: #008000">'y_train'</span>, <span style="color: #008000; text-decoration-color: #008000">'y_test'</span><span style="font-weight: bold">]</span>, <span style="color: #008000; text-decoration-color: #008000">'split'</span><span style="font-weight: bold">)</span>,
<span style="color: #800080; text-decoration-color: #800080; font-weight: bold">Node</span><span style="font-weight: bold">(</span>make_predictions, <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'X_train'</span>, <span style="color: #008000; text-decoration-color: #008000">'X_test'</span>, <span style="color: #008000; text-decoration-color: #008000">'y_train'</span><span style="font-weight: bold">]</span>, <span style="color: #008000; text-decoration-color: #008000">'y_pred'</span>, <span style="color: #008000; text-decoration-color: #008000">'make_predictions'</span><span style="font-weight: bold">)</span>,
<span style="color: #800080; text-decoration-color: #800080; font-weight: bold">Node</span><span style="font-weight: bold">(</span>report_accuracy, <span style="font-weight: bold">[</span><span style="color: #008000; text-decoration-color: #008000">'y_pred'</span>, <span style="color: #008000; text-decoration-color: #008000">'y_test'</span><span style="font-weight: bold">]</span>, <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>, <span style="color: #008000; text-decoration-color: #008000">'report_accuracy'</span><span style="font-weight: bold">)</span>
<span style="font-weight: bold">])}</span>
</pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">session.run()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Kedro project jupyter-debug-demo                                        <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/session/session.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">session.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/session/session.py#340" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">340</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">[11/08/22 16:44:25] </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Loading data from <span style="color: #008000; text-decoration-color: #008000">'example_iris_data'</span> <span style="font-weight: bold">(</span>CSVDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>              <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#343" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">343</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Loading data from <span style="color: #008000; text-decoration-color: #008000">'parameters'</span> <span style="font-weight: bold">(</span>MemoryDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                  <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#343" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">343</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Running node: split: <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">split_data</span><span style="font-weight: bold">([</span>example_iris_data,parameters<span style="font-weight: bold">])</span> -&gt;         <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/node.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">node.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/node.py#327" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">327</span></a>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>         <span style="font-weight: bold">[</span>X_train,X_test,y_train,y_test<span style="font-weight: bold">]</span>                                            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">           </span>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Saving data to <span style="color: #008000; text-decoration-color: #008000">'X_train'</span> <span style="font-weight: bold">(</span>MemoryDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                        <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#382" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">382</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Saving data to <span style="color: #008000; text-decoration-color: #008000">'X_test'</span> <span style="font-weight: bold">(</span>MemoryDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                         <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#382" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">382</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Saving data to <span style="color: #008000; text-decoration-color: #008000">'y_train'</span> <span style="font-weight: bold">(</span>MemoryDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                        <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#382" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">382</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Saving data to <span style="color: #008000; text-decoration-color: #008000">'y_test'</span> <span style="font-weight: bold">(</span>PickleDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                         <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#382" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">382</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Completed <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span> out of <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">3</span> tasks                                     <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/sequential_runner.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">sequential_runner.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/sequential_runner.py#85" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">85</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Loading data from <span style="color: #008000; text-decoration-color: #008000">'X_train'</span> <span style="font-weight: bold">(</span>MemoryDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                     <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#343" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">343</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Loading data from <span style="color: #008000; text-decoration-color: #008000">'X_test'</span> <span style="font-weight: bold">(</span>MemoryDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                      <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#343" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">343</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Loading data from <span style="color: #008000; text-decoration-color: #008000">'y_train'</span> <span style="font-weight: bold">(</span>MemoryDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                     <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#343" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">343</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Running node: make_predictions: <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">make_predictions</span><span style="font-weight: bold">([</span>X_train,X_test,y_train<span style="font-weight: bold">])</span> <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/node.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">node.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/node.py#327" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">327</span></a>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>         -&gt; <span style="font-weight: bold">[</span>y_pred<span style="font-weight: bold">]</span>                                                                <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">           </span>
</pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>1</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Saving data to <span style="color: #008000; text-decoration-color: #008000">'y_pred'</span> <span style="font-weight: bold">(</span>PickleDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                         <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#382" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">382</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Completed <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2</span> out of <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">3</span> tasks                                     <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/sequential_runner.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">sequential_runner.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/sequential_runner.py#85" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">85</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Loading data from <span style="color: #008000; text-decoration-color: #008000">'y_pred'</span> <span style="font-weight: bold">(</span>PickleDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                      <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#343" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">343</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Loading data from <span style="color: #008000; text-decoration-color: #008000">'y_test'</span> <span style="font-weight: bold">(</span>PickleDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                      <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#343" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">343</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Running node: report_accuracy: <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">report_accuracy</span><span style="font-weight: bold">([</span>y_pred,y_test<span style="font-weight: bold">])</span> -&gt; <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>    <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/node.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">node.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/node.py#327" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">327</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">ERROR   </span> Node <span style="color: #008000; text-decoration-color: #008000">'report_accuracy: report_accuracy([y_pred,y_test]) -&gt; None'</span> failed    <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/node.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">node.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/node.py#352" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">352</span></a>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>         with error:                                                                <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">           </span>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>         Simulate some bug here                                                     <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">           </span>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #800000; text-decoration-color: #800000">WARNING </span> There are <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span> nodes that have not run.                                     <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/runner.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">runner.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/runner.py#202" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">202</span></a>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>         You can resume the pipeline run from the nearest nodes with persisted    <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">             </span>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>         inputs by adding the following argument to your previous command:        <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">             </span>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>           --from-nodes <span style="color: #008000; text-decoration-color: #008000">"report_accuracy"</span>                                         <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">             </span>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #800000; text-decoration-color: #800000">‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">Traceback </span><span style="color: #bf7f7f; text-decoration-color: #bf7f7f; font-weight: bold">(most recent call last)</span><span style="color: #800000; text-decoration-color: #800000"> ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/var/folders/dv/bz0yz1dn71d2hygq110k3xhw0000gp/T/ipykernel_7863/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">833844929.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">1</span> in <span style="color: #00ff00; text-decoration-color: #00ff00">&lt;cell line: 1&gt;</span> <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #800000; text-decoration-color: #800000; font-style: italic">[Errno 2] No such file or directory: </span>                                                            <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #800000; text-decoration-color: #800000; font-style: italic">'/var/folders/dv/bz0yz1dn71d2hygq110k3xhw0000gp/T/ipykernel_7863/833844929.py'</span>                   <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/session/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">session.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">404</span> in <span style="color: #00ff00; text-decoration-color: #00ff00">run</span>                   <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">401 ‚îÇ   ‚îÇ   </span>)                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">402 ‚îÇ   ‚îÇ   </span>                                                                                   <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">403 ‚îÇ   ‚îÇ   </span><span style="color: #0000ff; text-decoration-color: #0000ff">try</span>:                                                                               <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #800000; text-decoration-color: #800000">‚ù± </span>404 <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">‚îÇ   ‚îÇ   ‚îÇ   </span>run_result = runner.run(                                                       <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">405 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span>filtered_pipeline, catalog, hook_manager, session_id                       <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">406 ‚îÇ   ‚îÇ   ‚îÇ   </span>)                                                                              <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">407 ‚îÇ   ‚îÇ   ‚îÇ   </span><span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._run_called = <span style="color: #0000ff; text-decoration-color: #0000ff">True</span>                                                        <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">runner.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">88</span> in <span style="color: #00ff00; text-decoration-color: #00ff00">run</span>                                <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f"> 85 ‚îÇ   ‚îÇ   ‚îÇ   </span><span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._logger.info(                                                             <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f"> 86 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span><span style="color: #808000; text-decoration-color: #808000">"Asynchronous mode is enabled for loading and saving data"</span>                 <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f"> 87 ‚îÇ   ‚îÇ   ‚îÇ   </span>)                                                                              <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #800000; text-decoration-color: #800000">‚ù± </span> 88 <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">‚îÇ   ‚îÇ   </span><span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._run(pipeline, catalog, hook_manager, session_id)                             <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f"> 89 ‚îÇ   ‚îÇ   </span>                                                                                   <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f"> 90 ‚îÇ   ‚îÇ   </span><span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._logger.info(<span style="color: #808000; text-decoration-color: #808000">"Pipeline execution completed successfully."</span>)                    <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f"> 91 </span>                                                                                           <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">sequential_runner.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">70</span> in <span style="color: #00ff00; text-decoration-color: #00ff00">_run</span>                    <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">67 ‚îÇ   ‚îÇ   </span>                                                                                    <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">68 ‚îÇ   ‚îÇ   </span><span style="color: #0000ff; text-decoration-color: #0000ff">for</span> exec_index, node <span style="color: #ff00ff; text-decoration-color: #ff00ff">in</span> <span style="color: #00ffff; text-decoration-color: #00ffff">enumerate</span>(nodes):                                           <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">69 ‚îÇ   ‚îÇ   ‚îÇ   </span><span style="color: #0000ff; text-decoration-color: #0000ff">try</span>:                                                                            <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #800000; text-decoration-color: #800000">‚ù± </span>70 <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span>run_node(node, catalog, hook_manager, <span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._is_async, session_id)           <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">71 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span>done_nodes.add(node)                                                        <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">72 ‚îÇ   ‚îÇ   ‚îÇ   </span><span style="color: #0000ff; text-decoration-color: #0000ff">except</span> <span style="color: #00ffff; text-decoration-color: #00ffff">Exception</span>:                                                               <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">73 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span><span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._suggest_resume_scenario(pipeline, done_nodes, catalog)                <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">runner.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">304</span> in <span style="color: #00ff00; text-decoration-color: #00ff00">run_node</span>                          <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">301 ‚îÇ   </span><span style="color: #0000ff; text-decoration-color: #0000ff">if</span> is_async:                                                                           <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">302 ‚îÇ   ‚îÇ   </span>node = _run_node_async(node, catalog, hook_manager, session_id)                    <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">303 ‚îÇ   </span><span style="color: #0000ff; text-decoration-color: #0000ff">else</span>:                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #800000; text-decoration-color: #800000">‚ù± </span>304 <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">‚îÇ   ‚îÇ   </span>node = _run_node_sequential(node, catalog, hook_manager, session_id)               <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">305 ‚îÇ   </span>                                                                                       <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">306 ‚îÇ   </span><span style="color: #0000ff; text-decoration-color: #0000ff">for</span> name <span style="color: #ff00ff; text-decoration-color: #ff00ff">in</span> node.confirms:                                                             <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">307 ‚îÇ   ‚îÇ   </span>catalog.confirm(name)                                                              <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">runner.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">398</span> in <span style="color: #00ff00; text-decoration-color: #00ff00">_run_node_sequential</span>              <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">395 ‚îÇ   </span>)                                                                                      <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">396 ‚îÇ   </span>inputs.update(additional_inputs)                                                       <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">397 ‚îÇ   </span>                                                                                       <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #800000; text-decoration-color: #800000">‚ù± </span>398 <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">‚îÇ   </span>outputs = _call_node_run(                                                              <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">399 ‚îÇ   ‚îÇ   </span>node, catalog, inputs, is_async, hook_manager, session_id=session_id               <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">400 ‚îÇ   </span>)                                                                                      <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">401 </span>                                                                                           <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">runner.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">366</span> in <span style="color: #00ff00; text-decoration-color: #00ff00">_call_node_run</span>                    <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">363 ‚îÇ   ‚îÇ   ‚îÇ   </span>is_async=is_async,                                                             <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">364 ‚îÇ   ‚îÇ   ‚îÇ   </span>session_id=session_id,                                                         <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">365 ‚îÇ   ‚îÇ   </span>)                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #800000; text-decoration-color: #800000">‚ù± </span>366 <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">‚îÇ   ‚îÇ   </span><span style="color: #0000ff; text-decoration-color: #0000ff">raise</span> exc                                                                          <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">367 ‚îÇ   </span>hook_manager.hook.after_node_run(                                                      <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">368 ‚îÇ   ‚îÇ   </span>node=node,                                                                         <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">369 ‚îÇ   ‚îÇ   </span>catalog=catalog,                                                                   <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">runner.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">356</span> in <span style="color: #00ff00; text-decoration-color: #00ff00">_call_node_run</span>                    <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">353 </span>) -&gt; Dict[<span style="color: #00ffff; text-decoration-color: #00ffff">str</span>, Any]:                                                                       <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">354 ‚îÇ   # pylint: disable=too-many-arguments</span>                                                   <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">355 ‚îÇ   </span><span style="color: #0000ff; text-decoration-color: #0000ff">try</span>:                                                                                   <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #800000; text-decoration-color: #800000">‚ù± </span>356 <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">‚îÇ   ‚îÇ   </span>outputs = node.run(inputs)                                                         <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">357 ‚îÇ   </span><span style="color: #0000ff; text-decoration-color: #0000ff">except</span> <span style="color: #00ffff; text-decoration-color: #00ffff">Exception</span> <span style="color: #0000ff; text-decoration-color: #0000ff">as</span> exc:                                                               <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">358 ‚îÇ   ‚îÇ   </span>hook_manager.hook.on_node_error(                                                   <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">359 ‚îÇ   ‚îÇ   ‚îÇ   </span>error=exc,                                                                     <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">node.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">353</span> in <span style="color: #00ff00; text-decoration-color: #00ff00">run</span>                               <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">350 ‚îÇ   ‚îÇ   # purposely catch all exceptions</span>                                                   <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">351 ‚îÇ   ‚îÇ   </span><span style="color: #0000ff; text-decoration-color: #0000ff">except</span> <span style="color: #00ffff; text-decoration-color: #00ffff">Exception</span> <span style="color: #0000ff; text-decoration-color: #0000ff">as</span> exc:                                                           <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">352 ‚îÇ   ‚îÇ   ‚îÇ   </span><span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._logger.error(<span style="color: #808000; text-decoration-color: #808000">"Node '%s' failed with error: \n%s"</span>, <span style="color: #00ffff; text-decoration-color: #00ffff">str</span>(<span style="color: #00ffff; text-decoration-color: #00ffff">self</span>), <span style="color: #00ffff; text-decoration-color: #00ffff">str</span>(exc))   <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #800000; text-decoration-color: #800000">‚ù± </span>353 <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">‚îÇ   ‚îÇ   ‚îÇ   </span><span style="color: #0000ff; text-decoration-color: #0000ff">raise</span> exc                                                                      <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">354 ‚îÇ   </span>                                                                                       <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">355 ‚îÇ   </span><span style="color: #0000ff; text-decoration-color: #0000ff">def</span> <span style="color: #00ff00; text-decoration-color: #00ff00">_run_with_no_inputs</span>(<span style="color: #00ffff; text-decoration-color: #00ffff">self</span>, inputs: Dict[<span style="color: #00ffff; text-decoration-color: #00ffff">str</span>, Any]):                                 <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">356 ‚îÇ   ‚îÇ   </span><span style="color: #0000ff; text-decoration-color: #0000ff">if</span> inputs:                                                                         <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">node.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">344</span> in <span style="color: #00ff00; text-decoration-color: #00ff00">run</span>                               <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">341 ‚îÇ   ‚îÇ   ‚îÇ   </span><span style="color: #0000ff; text-decoration-color: #0000ff">elif</span> <span style="color: #00ffff; text-decoration-color: #00ffff">isinstance</span>(<span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._inputs, <span style="color: #00ffff; text-decoration-color: #00ffff">str</span>):                                            <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">342 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span>outputs = <span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._run_with_one_input(inputs, <span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._inputs)                   <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">343 ‚îÇ   ‚îÇ   ‚îÇ   </span><span style="color: #0000ff; text-decoration-color: #0000ff">elif</span> <span style="color: #00ffff; text-decoration-color: #00ffff">isinstance</span>(<span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._inputs, <span style="color: #00ffff; text-decoration-color: #00ffff">list</span>):                                           <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #800000; text-decoration-color: #800000">‚ù± </span>344 <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span>outputs = <span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._run_with_list(inputs, <span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._inputs)                        <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">345 ‚îÇ   ‚îÇ   ‚îÇ   </span><span style="color: #0000ff; text-decoration-color: #0000ff">elif</span> <span style="color: #00ffff; text-decoration-color: #00ffff">isinstance</span>(<span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._inputs, <span style="color: #00ffff; text-decoration-color: #00ffff">dict</span>):                                           <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">346 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span>outputs = <span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._run_with_dict(inputs, <span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._inputs)                        <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">347 </span>                                                                                           <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">node.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">384</span> in <span style="color: #00ff00; text-decoration-color: #00ff00">_run_with_list</span>                    <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">381 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span><span style="color: #808000; text-decoration-color: #808000">f"{</span><span style="color: #00ffff; text-decoration-color: #00ffff">sorted</span>(inputs.keys())<span style="color: #808000; text-decoration-color: #808000">}."</span>                                                <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">382 ‚îÇ   ‚îÇ   ‚îÇ   </span>)                                                                              <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">383 ‚îÇ   ‚îÇ   # Ensure the function gets the inputs in the correct order</span>                         <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #800000; text-decoration-color: #800000">‚ù± </span>384 <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">‚îÇ   ‚îÇ   </span><span style="color: #0000ff; text-decoration-color: #0000ff">return</span> <span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._func(*(inputs[item] <span style="color: #0000ff; text-decoration-color: #0000ff">for</span> item <span style="color: #ff00ff; text-decoration-color: #ff00ff">in</span> node_inputs))                         <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">385 ‚îÇ   </span>                                                                                       <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">386 ‚îÇ   </span><span style="color: #0000ff; text-decoration-color: #0000ff">def</span> <span style="color: #00ff00; text-decoration-color: #00ff00">_run_with_dict</span>(<span style="color: #00ffff; text-decoration-color: #00ffff">self</span>, inputs: Dict[<span style="color: #00ffff; text-decoration-color: #00ffff">str</span>, Any], node_inputs: Dict[<span style="color: #00ffff; text-decoration-color: #00ffff">str</span>, <span style="color: #00ffff; text-decoration-color: #00ffff">str</span>]):         <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">387 ‚îÇ   ‚îÇ   # Node inputs and provided run inputs should completely overlap</span>                    <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/Users/Nok_Lam_Chan/dev/kedro_gallery/jupyter-debug-demo/src/jupyter_debug_demo/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">nodes.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">74</span> in   <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #00ff00; text-decoration-color: #00ff00">report_accuracy</span>                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">71 </span><span style="color: #bfbf7f; text-decoration-color: #bfbf7f">‚îÇ   ‚îÇ   </span><span style="color: #808000; text-decoration-color: #808000">y_pred: Predicted target.</span>                                                           <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">72 </span><span style="color: #bfbf7f; text-decoration-color: #bfbf7f">‚îÇ   ‚îÇ   </span><span style="color: #808000; text-decoration-color: #808000">y_test: True target.</span>                                                                <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">73 </span><span style="color: #bfbf7f; text-decoration-color: #bfbf7f">‚îÇ   </span><span style="color: #808000; text-decoration-color: #808000">"""</span>                                                                                     <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #800000; text-decoration-color: #800000">‚ù± </span>74 <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">‚îÇ   </span><span style="color: #0000ff; text-decoration-color: #0000ff">raise</span> <span style="color: #00ffff; text-decoration-color: #00ffff">ValueError</span>(<span style="color: #808000; text-decoration-color: #808000">"Simulate some bug here"</span>)                                              <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">75 ‚îÇ   </span>accuracy = (y_pred == y_test).sum() / <span style="color: #00ffff; text-decoration-color: #00ffff">len</span>(y_test)                                       <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">76 ‚îÇ   </span>logger = logging.getLogger(<span style="color: #ff0000; text-decoration-color: #ff0000">__name__</span>)                                                    <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">77 ‚îÇ   </span>logger.info(<span style="color: #808000; text-decoration-color: #808000">"Model has accuracy of %.3f on test data."</span>, accuracy)                       <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ</span>
<span style="color: #ff0000; text-decoration-color: #ff0000; font-weight: bold">ValueError: </span>Simulate some bug here
</pre>
</div>
</div>
<ol type="1">
<li><p>Read from stack trace - find out the line of code that produce the error</p></li>
<li><p>Find which node this function belongs to</p></li>
<li><p>Trying to rerun the pipeline just before this node</p></li>
<li><p>If it‚Äôs not a persisted dataset, you need to change it in <code>catalog.yml</code>, and re-run the pipeline, error is thrown again</p></li>
<li><p><code>session</code> has already been used once, so if you call session again it will throw error. (so he had a wrapper function that recreate <code>session</code> and do something similar to <code>session.run</code></p></li>
<li><p>Create a new session or <code>%reload_kedro</code> and re-run?</p></li>
</ol>
<p>This is not efficient because in interactive workflow, these intermdiate variables is likely store in the catalog already.</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>reload_kedro</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">[11/08/22 16:46:49] </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Resolved project path as:                                              <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/ipython/__init__.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">__init__.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/ipython/__init__.py#132" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">132</span></a>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>         <span style="color: #800080; text-decoration-color: #800080">/Users/Nok_Lam_Chan/dev/kedro_gallery/</span><span style="color: #ff00ff; text-decoration-color: #ff00ff">jupyter-debug-demo.</span>              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">               </span>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>         To set a different path, run <span style="color: #008000; text-decoration-color: #008000">'%reload_kedro &lt;project_root&gt;'</span>            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">               </span>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">[11/08/22 16:46:50] </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Kedro project jupyter_debug_demo                                       <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/ipython/__init__.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">__init__.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/ipython/__init__.py#101" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">101</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Defined global variable <span style="color: #008000; text-decoration-color: #008000">'context'</span>, <span style="color: #008000; text-decoration-color: #008000">'session'</span>, <span style="color: #008000; text-decoration-color: #008000">'catalog'</span> and            <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/ipython/__init__.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">__init__.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/ipython/__init__.py#102" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">102</span></a>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>         <span style="color: #008000; text-decoration-color: #008000">'pipelines'</span>                                                            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">               </span>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Registered line magic <span style="color: #008000; text-decoration-color: #008000">'run_viz'</span>                                        <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/ipython/__init__.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">__init__.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/ipython/__init__.py#108" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">108</span></a>
</pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">session.run()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">[11/08/22 16:46:53] </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Kedro project jupyter-debug-demo                                        <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/session/session.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">session.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/session/session.py#340" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">340</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">[11/08/22 16:46:54] </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Loading data from <span style="color: #008000; text-decoration-color: #008000">'example_iris_data'</span> <span style="font-weight: bold">(</span>CSVDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>              <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#343" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">343</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Loading data from <span style="color: #008000; text-decoration-color: #008000">'parameters'</span> <span style="font-weight: bold">(</span>MemoryDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                  <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#343" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">343</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Running node: split: <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">split_data</span><span style="font-weight: bold">([</span>example_iris_data,parameters<span style="font-weight: bold">])</span> -&gt;         <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/node.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">node.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/node.py#327" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">327</span></a>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>         <span style="font-weight: bold">[</span>X_train,X_test,y_train,y_test<span style="font-weight: bold">]</span>                                            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">           </span>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Saving data to <span style="color: #008000; text-decoration-color: #008000">'X_train'</span> <span style="font-weight: bold">(</span>MemoryDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                        <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#382" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">382</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Saving data to <span style="color: #008000; text-decoration-color: #008000">'X_test'</span> <span style="font-weight: bold">(</span>MemoryDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                         <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#382" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">382</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Saving data to <span style="color: #008000; text-decoration-color: #008000">'y_train'</span> <span style="font-weight: bold">(</span>MemoryDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                        <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#382" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">382</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Saving data to <span style="color: #008000; text-decoration-color: #008000">'y_test'</span> <span style="font-weight: bold">(</span>PickleDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                         <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#382" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">382</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Completed <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span> out of <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">3</span> tasks                                     <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/sequential_runner.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">sequential_runner.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/sequential_runner.py#85" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">85</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Loading data from <span style="color: #008000; text-decoration-color: #008000">'X_train'</span> <span style="font-weight: bold">(</span>MemoryDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                     <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#343" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">343</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Loading data from <span style="color: #008000; text-decoration-color: #008000">'X_test'</span> <span style="font-weight: bold">(</span>MemoryDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                      <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#343" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">343</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Loading data from <span style="color: #008000; text-decoration-color: #008000">'y_train'</span> <span style="font-weight: bold">(</span>MemoryDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                     <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#343" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">343</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Running node: make_predictions: <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">make_predictions</span><span style="font-weight: bold">([</span>X_train,X_test,y_train<span style="font-weight: bold">])</span> <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/node.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">node.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/node.py#327" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">327</span></a>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>         -&gt; <span style="font-weight: bold">[</span>y_pred<span style="font-weight: bold">]</span>                                                                <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">           </span>
</pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>1</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Saving data to <span style="color: #008000; text-decoration-color: #008000">'y_pred'</span> <span style="font-weight: bold">(</span>PickleDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                         <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#382" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">382</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Completed <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2</span> out of <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">3</span> tasks                                     <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/sequential_runner.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">sequential_runner.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/sequential_runner.py#85" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">85</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Loading data from <span style="color: #008000; text-decoration-color: #008000">'y_pred'</span> <span style="font-weight: bold">(</span>PickleDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                      <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#343" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">343</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Loading data from <span style="color: #008000; text-decoration-color: #008000">'y_test'</span> <span style="font-weight: bold">(</span>PickleDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                      <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#343" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">343</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Running node: report_accuracy: <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">report_accuracy</span><span style="font-weight: bold">([</span>y_pred,y_test<span style="font-weight: bold">])</span> -&gt; <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>    <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/node.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">node.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/node.py#327" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">327</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">ERROR   </span> Node <span style="color: #008000; text-decoration-color: #008000">'report_accuracy: report_accuracy([y_pred,y_test]) -&gt; None'</span> failed    <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/node.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">node.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/node.py#352" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">352</span></a>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>         with error:                                                                <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">           </span>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>         Simulate some bug here                                                     <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">           </span>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #800000; text-decoration-color: #800000">WARNING </span> There are <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span> nodes that have not run.                                     <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/runner.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">runner.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/runner.py#202" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">202</span></a>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>         You can resume the pipeline run from the nearest nodes with persisted    <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">             </span>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>         inputs by adding the following argument to your previous command:        <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">             </span>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>           --from-nodes <span style="color: #008000; text-decoration-color: #008000">"report_accuracy"</span>                                         <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">             </span>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #800000; text-decoration-color: #800000">‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">Traceback </span><span style="color: #bf7f7f; text-decoration-color: #bf7f7f; font-weight: bold">(most recent call last)</span><span style="color: #800000; text-decoration-color: #800000"> ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/var/folders/dv/bz0yz1dn71d2hygq110k3xhw0000gp/T/ipykernel_7863/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">833844929.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">1</span> in <span style="color: #00ff00; text-decoration-color: #00ff00">&lt;cell line: 1&gt;</span> <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #800000; text-decoration-color: #800000; font-style: italic">[Errno 2] No such file or directory: </span>                                                            <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #800000; text-decoration-color: #800000; font-style: italic">'/var/folders/dv/bz0yz1dn71d2hygq110k3xhw0000gp/T/ipykernel_7863/833844929.py'</span>                   <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/session/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">session.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">404</span> in <span style="color: #00ff00; text-decoration-color: #00ff00">run</span>                   <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">401 ‚îÇ   ‚îÇ   </span>)                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">402 ‚îÇ   ‚îÇ   </span>                                                                                   <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">403 ‚îÇ   ‚îÇ   </span><span style="color: #0000ff; text-decoration-color: #0000ff">try</span>:                                                                               <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #800000; text-decoration-color: #800000">‚ù± </span>404 <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">‚îÇ   ‚îÇ   ‚îÇ   </span>run_result = runner.run(                                                       <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">405 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span>filtered_pipeline, catalog, hook_manager, session_id                       <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">406 ‚îÇ   ‚îÇ   ‚îÇ   </span>)                                                                              <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">407 ‚îÇ   ‚îÇ   ‚îÇ   </span><span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._run_called = <span style="color: #0000ff; text-decoration-color: #0000ff">True</span>                                                        <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">runner.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">88</span> in <span style="color: #00ff00; text-decoration-color: #00ff00">run</span>                                <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f"> 85 ‚îÇ   ‚îÇ   ‚îÇ   </span><span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._logger.info(                                                             <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f"> 86 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span><span style="color: #808000; text-decoration-color: #808000">"Asynchronous mode is enabled for loading and saving data"</span>                 <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f"> 87 ‚îÇ   ‚îÇ   ‚îÇ   </span>)                                                                              <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #800000; text-decoration-color: #800000">‚ù± </span> 88 <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">‚îÇ   ‚îÇ   </span><span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._run(pipeline, catalog, hook_manager, session_id)                             <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f"> 89 ‚îÇ   ‚îÇ   </span>                                                                                   <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f"> 90 ‚îÇ   ‚îÇ   </span><span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._logger.info(<span style="color: #808000; text-decoration-color: #808000">"Pipeline execution completed successfully."</span>)                    <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f"> 91 </span>                                                                                           <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">sequential_runner.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">70</span> in <span style="color: #00ff00; text-decoration-color: #00ff00">_run</span>                    <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">67 ‚îÇ   ‚îÇ   </span>                                                                                    <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">68 ‚îÇ   ‚îÇ   </span><span style="color: #0000ff; text-decoration-color: #0000ff">for</span> exec_index, node <span style="color: #ff00ff; text-decoration-color: #ff00ff">in</span> <span style="color: #00ffff; text-decoration-color: #00ffff">enumerate</span>(nodes):                                           <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">69 ‚îÇ   ‚îÇ   ‚îÇ   </span><span style="color: #0000ff; text-decoration-color: #0000ff">try</span>:                                                                            <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #800000; text-decoration-color: #800000">‚ù± </span>70 <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span>run_node(node, catalog, hook_manager, <span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._is_async, session_id)           <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">71 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span>done_nodes.add(node)                                                        <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">72 ‚îÇ   ‚îÇ   ‚îÇ   </span><span style="color: #0000ff; text-decoration-color: #0000ff">except</span> <span style="color: #00ffff; text-decoration-color: #00ffff">Exception</span>:                                                               <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">73 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span><span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._suggest_resume_scenario(pipeline, done_nodes, catalog)                <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">runner.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">304</span> in <span style="color: #00ff00; text-decoration-color: #00ff00">run_node</span>                          <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">301 ‚îÇ   </span><span style="color: #0000ff; text-decoration-color: #0000ff">if</span> is_async:                                                                           <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">302 ‚îÇ   ‚îÇ   </span>node = _run_node_async(node, catalog, hook_manager, session_id)                    <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">303 ‚îÇ   </span><span style="color: #0000ff; text-decoration-color: #0000ff">else</span>:                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #800000; text-decoration-color: #800000">‚ù± </span>304 <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">‚îÇ   ‚îÇ   </span>node = _run_node_sequential(node, catalog, hook_manager, session_id)               <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">305 ‚îÇ   </span>                                                                                       <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">306 ‚îÇ   </span><span style="color: #0000ff; text-decoration-color: #0000ff">for</span> name <span style="color: #ff00ff; text-decoration-color: #ff00ff">in</span> node.confirms:                                                             <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">307 ‚îÇ   ‚îÇ   </span>catalog.confirm(name)                                                              <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">runner.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">398</span> in <span style="color: #00ff00; text-decoration-color: #00ff00">_run_node_sequential</span>              <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">395 ‚îÇ   </span>)                                                                                      <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">396 ‚îÇ   </span>inputs.update(additional_inputs)                                                       <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">397 ‚îÇ   </span>                                                                                       <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #800000; text-decoration-color: #800000">‚ù± </span>398 <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">‚îÇ   </span>outputs = _call_node_run(                                                              <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">399 ‚îÇ   ‚îÇ   </span>node, catalog, inputs, is_async, hook_manager, session_id=session_id               <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">400 ‚îÇ   </span>)                                                                                      <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">401 </span>                                                                                           <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">runner.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">366</span> in <span style="color: #00ff00; text-decoration-color: #00ff00">_call_node_run</span>                    <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">363 ‚îÇ   ‚îÇ   ‚îÇ   </span>is_async=is_async,                                                             <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">364 ‚îÇ   ‚îÇ   ‚îÇ   </span>session_id=session_id,                                                         <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">365 ‚îÇ   ‚îÇ   </span>)                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #800000; text-decoration-color: #800000">‚ù± </span>366 <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">‚îÇ   ‚îÇ   </span><span style="color: #0000ff; text-decoration-color: #0000ff">raise</span> exc                                                                          <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">367 ‚îÇ   </span>hook_manager.hook.after_node_run(                                                      <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">368 ‚îÇ   ‚îÇ   </span>node=node,                                                                         <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">369 ‚îÇ   ‚îÇ   </span>catalog=catalog,                                                                   <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">runner.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">356</span> in <span style="color: #00ff00; text-decoration-color: #00ff00">_call_node_run</span>                    <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">353 </span>) -&gt; Dict[<span style="color: #00ffff; text-decoration-color: #00ffff">str</span>, Any]:                                                                       <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">354 ‚îÇ   # pylint: disable=too-many-arguments</span>                                                   <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">355 ‚îÇ   </span><span style="color: #0000ff; text-decoration-color: #0000ff">try</span>:                                                                                   <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #800000; text-decoration-color: #800000">‚ù± </span>356 <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">‚îÇ   ‚îÇ   </span>outputs = node.run(inputs)                                                         <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">357 ‚îÇ   </span><span style="color: #0000ff; text-decoration-color: #0000ff">except</span> <span style="color: #00ffff; text-decoration-color: #00ffff">Exception</span> <span style="color: #0000ff; text-decoration-color: #0000ff">as</span> exc:                                                               <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">358 ‚îÇ   ‚îÇ   </span>hook_manager.hook.on_node_error(                                                   <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">359 ‚îÇ   ‚îÇ   ‚îÇ   </span>error=exc,                                                                     <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">node.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">353</span> in <span style="color: #00ff00; text-decoration-color: #00ff00">run</span>                               <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">350 ‚îÇ   ‚îÇ   # purposely catch all exceptions</span>                                                   <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">351 ‚îÇ   ‚îÇ   </span><span style="color: #0000ff; text-decoration-color: #0000ff">except</span> <span style="color: #00ffff; text-decoration-color: #00ffff">Exception</span> <span style="color: #0000ff; text-decoration-color: #0000ff">as</span> exc:                                                           <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">352 ‚îÇ   ‚îÇ   ‚îÇ   </span><span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._logger.error(<span style="color: #808000; text-decoration-color: #808000">"Node '%s' failed with error: \n%s"</span>, <span style="color: #00ffff; text-decoration-color: #00ffff">str</span>(<span style="color: #00ffff; text-decoration-color: #00ffff">self</span>), <span style="color: #00ffff; text-decoration-color: #00ffff">str</span>(exc))   <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #800000; text-decoration-color: #800000">‚ù± </span>353 <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">‚îÇ   ‚îÇ   ‚îÇ   </span><span style="color: #0000ff; text-decoration-color: #0000ff">raise</span> exc                                                                      <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">354 ‚îÇ   </span>                                                                                       <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">355 ‚îÇ   </span><span style="color: #0000ff; text-decoration-color: #0000ff">def</span> <span style="color: #00ff00; text-decoration-color: #00ff00">_run_with_no_inputs</span>(<span style="color: #00ffff; text-decoration-color: #00ffff">self</span>, inputs: Dict[<span style="color: #00ffff; text-decoration-color: #00ffff">str</span>, Any]):                                 <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">356 ‚îÇ   ‚îÇ   </span><span style="color: #0000ff; text-decoration-color: #0000ff">if</span> inputs:                                                                         <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">node.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">344</span> in <span style="color: #00ff00; text-decoration-color: #00ff00">run</span>                               <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">341 ‚îÇ   ‚îÇ   ‚îÇ   </span><span style="color: #0000ff; text-decoration-color: #0000ff">elif</span> <span style="color: #00ffff; text-decoration-color: #00ffff">isinstance</span>(<span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._inputs, <span style="color: #00ffff; text-decoration-color: #00ffff">str</span>):                                            <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">342 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span>outputs = <span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._run_with_one_input(inputs, <span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._inputs)                   <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">343 ‚îÇ   ‚îÇ   ‚îÇ   </span><span style="color: #0000ff; text-decoration-color: #0000ff">elif</span> <span style="color: #00ffff; text-decoration-color: #00ffff">isinstance</span>(<span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._inputs, <span style="color: #00ffff; text-decoration-color: #00ffff">list</span>):                                           <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #800000; text-decoration-color: #800000">‚ù± </span>344 <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span>outputs = <span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._run_with_list(inputs, <span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._inputs)                        <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">345 ‚îÇ   ‚îÇ   ‚îÇ   </span><span style="color: #0000ff; text-decoration-color: #0000ff">elif</span> <span style="color: #00ffff; text-decoration-color: #00ffff">isinstance</span>(<span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._inputs, <span style="color: #00ffff; text-decoration-color: #00ffff">dict</span>):                                           <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">346 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span>outputs = <span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._run_with_dict(inputs, <span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._inputs)                        <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">347 </span>                                                                                           <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">node.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">384</span> in <span style="color: #00ff00; text-decoration-color: #00ff00">_run_with_list</span>                    <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">381 ‚îÇ   ‚îÇ   ‚îÇ   ‚îÇ   </span><span style="color: #808000; text-decoration-color: #808000">f"{</span><span style="color: #00ffff; text-decoration-color: #00ffff">sorted</span>(inputs.keys())<span style="color: #808000; text-decoration-color: #808000">}."</span>                                                <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">382 ‚îÇ   ‚îÇ   ‚îÇ   </span>)                                                                              <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">383 ‚îÇ   ‚îÇ   # Ensure the function gets the inputs in the correct order</span>                         <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #800000; text-decoration-color: #800000">‚ù± </span>384 <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">‚îÇ   ‚îÇ   </span><span style="color: #0000ff; text-decoration-color: #0000ff">return</span> <span style="color: #00ffff; text-decoration-color: #00ffff">self</span>._func(*(inputs[item] <span style="color: #0000ff; text-decoration-color: #0000ff">for</span> item <span style="color: #ff00ff; text-decoration-color: #ff00ff">in</span> node_inputs))                         <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">385 ‚îÇ   </span>                                                                                       <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">386 ‚îÇ   </span><span style="color: #0000ff; text-decoration-color: #0000ff">def</span> <span style="color: #00ff00; text-decoration-color: #00ff00">_run_with_dict</span>(<span style="color: #00ffff; text-decoration-color: #00ffff">self</span>, inputs: Dict[<span style="color: #00ffff; text-decoration-color: #00ffff">str</span>, Any], node_inputs: Dict[<span style="color: #00ffff; text-decoration-color: #00ffff">str</span>, <span style="color: #00ffff; text-decoration-color: #00ffff">str</span>]):         <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">387 ‚îÇ   ‚îÇ   # Node inputs and provided run inputs should completely overlap</span>                    <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/Users/Nok_Lam_Chan/dev/kedro_gallery/jupyter-debug-demo/src/jupyter_debug_demo/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">nodes.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">74</span> in   <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #00ff00; text-decoration-color: #00ff00">report_accuracy</span>                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">71 </span><span style="color: #bfbf7f; text-decoration-color: #bfbf7f">‚îÇ   ‚îÇ   </span><span style="color: #808000; text-decoration-color: #808000">y_pred: Predicted target.</span>                                                           <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">72 </span><span style="color: #bfbf7f; text-decoration-color: #bfbf7f">‚îÇ   ‚îÇ   </span><span style="color: #808000; text-decoration-color: #808000">y_test: True target.</span>                                                                <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">73 </span><span style="color: #bfbf7f; text-decoration-color: #bfbf7f">‚îÇ   </span><span style="color: #808000; text-decoration-color: #808000">"""</span>                                                                                     <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #800000; text-decoration-color: #800000">‚ù± </span>74 <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">‚îÇ   </span><span style="color: #0000ff; text-decoration-color: #0000ff">raise</span> <span style="color: #00ffff; text-decoration-color: #00ffff">ValueError</span>(<span style="color: #808000; text-decoration-color: #808000">"Simulate some bug here"</span>)                                              <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">75 ‚îÇ   </span>accuracy = (y_pred == y_test).sum() / <span style="color: #00ffff; text-decoration-color: #00ffff">len</span>(y_test)                                       <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">76 ‚îÇ   </span>logger = logging.getLogger(<span style="color: #ff0000; text-decoration-color: #ff0000">__name__</span>)                                                    <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>   <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">77 ‚îÇ   </span>logger.info(<span style="color: #808000; text-decoration-color: #808000">"Model has accuracy of %.3f on test data."</span>, accuracy)                       <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ</span>
<span style="color: #ff0000; text-decoration-color: #ff0000; font-weight: bold">ValueError: </span>Simulate some bug here
</pre>
</div>
</div>
<ol start="7" type="1">
<li>Now <code>catalog.load</code> that persisted dataset, i.e.&nbsp;<code>func(catalog.load("some_data"))</code></li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> catalog.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y_pred"</span>)</span>
<span id="cb9-2">y_test <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> catalog.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y_test"</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">[11/08/22 16:47:19] </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Loading data from <span style="color: #008000; text-decoration-color: #008000">'y_pred'</span> <span style="font-weight: bold">(</span>PickleDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                      <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#343" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">343</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Loading data from <span style="color: #008000; text-decoration-color: #008000">'y_test'</span> <span style="font-weight: bold">(</span>PickleDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                      <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#343" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">343</span></a>
</pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">catalog.datasets.y_pred.load().head()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This is the alternative way to use auto-discovery which can be improved</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0</span>     setosa
<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2</span>     setosa
<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">7</span>     setosa
<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">20</span>    setosa
<span style="color: #008080; text-decoration-color: #008080; font-weight: bold">21</span>    setosa
Name: species, dtype: object
</pre>
</div>
</div>
<ol start="8" type="1">
<li>Copy the source code of <code>func</code> to notebook, it would work if the function itself is the node function, but if it is some function buried deep down, that‚Äôs a lot more copy-pasting and change of import maybe.</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> report_accuracy(y_pred: pd.Series, y_test: pd.Series):</span>
<span id="cb11-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Calculates and logs the accuracy.</span></span>
<span id="cb11-3"></span>
<span id="cb11-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Args:</span></span>
<span id="cb11-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        y_pred: Predicted target.</span></span>
<span id="cb11-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        y_test: True target.</span></span>
<span id="cb11-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb11-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Simulate some bug here"</span>)</span>
<span id="cb11-9">    accuracy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> y_test).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(y_test)</span>
<span id="cb11-10">    logger <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logging.getLogger(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span>)</span>
<span id="cb11-11">    logger.info(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Model has accuracy of </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.3f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> on test data."</span>, accuracy)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #800000; text-decoration-color: #800000">‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">Traceback </span><span style="color: #bf7f7f; text-decoration-color: #bf7f7f; font-weight: bold">(most recent call last)</span><span style="color: #800000; text-decoration-color: #800000"> ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/var/folders/dv/bz0yz1dn71d2hygq110k3xhw0000gp/T/ipykernel_7863/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">1415042900.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">1</span> in <span style="color: #00ff00; text-decoration-color: #00ff00">&lt;cell line: </span>  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #00ff00; text-decoration-color: #00ff00">1&gt;</span>                                                                                               <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #800000; text-decoration-color: #800000; font-style: italic">[Errno 2] No such file or directory: </span>                                                            <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #800000; text-decoration-color: #800000; font-style: italic">'/var/folders/dv/bz0yz1dn71d2hygq110k3xhw0000gp/T/ipykernel_7863/1415042900.py'</span>                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ</span>
<span style="color: #ff0000; text-decoration-color: #ff0000; font-weight: bold">NameError: </span>name <span style="color: #008000; text-decoration-color: #008000">'pd'</span> is not defined
</pre>
</div>
</div>
<p>This won‚Äôt work immediately work, a couple of copy&amp;paste is needed</p>
<ul>
<li>manual copy the imports</li>
<li>Remove the function now - copy the source code as a cell instead</li>
</ul>
<div class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb12-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> logging</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Simulate some bug here"</span>)</span>
<span id="cb13-2">accuracy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> y_test).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(y_test)</span>
<span id="cb13-3">logger <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logging.getLogger(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span>)</span>
<span id="cb13-4">logger.info(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Model has accuracy of </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.3f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> on test data."</span>, accuracy)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #800000; text-decoration-color: #800000">‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ </span><span style="color: #800000; text-decoration-color: #800000; font-weight: bold">Traceback </span><span style="color: #bf7f7f; text-decoration-color: #bf7f7f; font-weight: bold">(most recent call last)</span><span style="color: #800000; text-decoration-color: #800000"> ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #bfbf7f; text-decoration-color: #bfbf7f">/var/folders/dv/bz0yz1dn71d2hygq110k3xhw0000gp/T/ipykernel_7863/</span><span style="color: #808000; text-decoration-color: #808000; font-weight: bold">2816569123.py</span>:<span style="color: #0000ff; text-decoration-color: #0000ff">1</span> in <span style="color: #00ff00; text-decoration-color: #00ff00">&lt;cell line: </span>  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #00ff00; text-decoration-color: #00ff00">1&gt;</span>                                                                                               <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>                                                                                                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #800000; text-decoration-color: #800000; font-style: italic">[Errno 2] No such file or directory: </span>                                                            <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚îÇ</span> <span style="color: #800000; text-decoration-color: #800000; font-style: italic">'/var/folders/dv/bz0yz1dn71d2hygq110k3xhw0000gp/T/ipykernel_7863/2816569123.py'</span>                  <span style="color: #800000; text-decoration-color: #800000">‚îÇ</span>
<span style="color: #800000; text-decoration-color: #800000">‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ</span>
<span style="color: #ff0000; text-decoration-color: #ff0000; font-weight: bold">ValueError: </span>Simulate some bug here
</pre>
</div>
</div>
<p>Assume we know that the first line is buggy, let‚Äôs remove it</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># raise ValueError("Simulate some bug here")</span></span>
<span id="cb14-2">accuracy <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (y_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> y_test).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(y_test)</span>
<span id="cb14-3">logger <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> logging.getLogger(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span>)</span>
<span id="cb14-4">logger.info(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Model has accuracy of </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%.3f</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> on test data."</span>, accuracy)</span>
<span id="cb14-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># It now works - lets copy this block back into the function and rerun</span></span></code></pre></div>
</div>
<ol start="9" type="1">
<li>Change the source code and make it work in the notebook</li>
<li>Rerun the pipeline to ensure everything works</li>
</ol>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>reload_kedro</span>
<span id="cb15-2">session.run()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">[11/08/22 16:50:48] </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Resolved project path as:                                              <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/ipython/__init__.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">__init__.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/ipython/__init__.py#132" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">132</span></a>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>         <span style="color: #800080; text-decoration-color: #800080">/Users/Nok_Lam_Chan/dev/kedro_gallery/</span><span style="color: #ff00ff; text-decoration-color: #ff00ff">jupyter-debug-demo.</span>              <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">               </span>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>         To set a different path, run <span style="color: #008000; text-decoration-color: #008000">'%reload_kedro &lt;project_root&gt;'</span>            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">               </span>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">[11/08/22 16:50:49] </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Kedro project jupyter_debug_demo                                       <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/ipython/__init__.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">__init__.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/ipython/__init__.py#101" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">101</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Defined global variable <span style="color: #008000; text-decoration-color: #008000">'context'</span>, <span style="color: #008000; text-decoration-color: #008000">'session'</span>, <span style="color: #008000; text-decoration-color: #008000">'catalog'</span> and            <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/ipython/__init__.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">__init__.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/ipython/__init__.py#102" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">102</span></a>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>         <span style="color: #008000; text-decoration-color: #008000">'pipelines'</span>                                                            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">               </span>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Registered line magic <span style="color: #008000; text-decoration-color: #008000">'run_viz'</span>                                        <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/ipython/__init__.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">__init__.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/ipython/__init__.py#108" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">108</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Kedro project jupyter-debug-demo                                        <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/session/session.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">session.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/framework/session/session.py#340" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">340</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">[11/08/22 16:50:50] </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Loading data from <span style="color: #008000; text-decoration-color: #008000">'example_iris_data'</span> <span style="font-weight: bold">(</span>CSVDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>              <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#343" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">343</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Loading data from <span style="color: #008000; text-decoration-color: #008000">'parameters'</span> <span style="font-weight: bold">(</span>MemoryDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                  <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#343" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">343</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Running node: split: <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">split_data</span><span style="font-weight: bold">([</span>example_iris_data,parameters<span style="font-weight: bold">])</span> -&gt;         <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/node.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">node.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/node.py#327" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">327</span></a>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>         <span style="font-weight: bold">[</span>X_train,X_test,y_train,y_test<span style="font-weight: bold">]</span>                                            <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">           </span>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Saving data to <span style="color: #008000; text-decoration-color: #008000">'X_train'</span> <span style="font-weight: bold">(</span>MemoryDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                        <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#382" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">382</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Saving data to <span style="color: #008000; text-decoration-color: #008000">'X_test'</span> <span style="font-weight: bold">(</span>MemoryDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                         <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#382" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">382</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Saving data to <span style="color: #008000; text-decoration-color: #008000">'y_train'</span> <span style="font-weight: bold">(</span>MemoryDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                        <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#382" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">382</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Saving data to <span style="color: #008000; text-decoration-color: #008000">'y_test'</span> <span style="font-weight: bold">(</span>PickleDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                         <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#382" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">382</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Completed <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">1</span> out of <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">3</span> tasks                                     <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/sequential_runner.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">sequential_runner.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/sequential_runner.py#85" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">85</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Loading data from <span style="color: #008000; text-decoration-color: #008000">'X_train'</span> <span style="font-weight: bold">(</span>MemoryDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                     <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#343" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">343</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Loading data from <span style="color: #008000; text-decoration-color: #008000">'X_test'</span> <span style="font-weight: bold">(</span>MemoryDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                      <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#343" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">343</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Loading data from <span style="color: #008000; text-decoration-color: #008000">'y_train'</span> <span style="font-weight: bold">(</span>MemoryDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                     <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#343" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">343</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Running node: make_predictions: <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">make_predictions</span><span style="font-weight: bold">([</span>X_train,X_test,y_train<span style="font-weight: bold">])</span> <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/node.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">node.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/node.py#327" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">327</span></a>
<span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span>         -&gt; <span style="font-weight: bold">[</span>y_pred<span style="font-weight: bold">]</span>                                                                <span style="color: #7f7f7f; text-decoration-color: #7f7f7f">           </span>
</pre>
</div>
<div class="cell-output cell-output-stdout">
<pre><code>1</code></pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Saving data to <span style="color: #008000; text-decoration-color: #008000">'y_pred'</span> <span style="font-weight: bold">(</span>PickleDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                         <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#382" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">382</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Completed <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">2</span> out of <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">3</span> tasks                                     <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/sequential_runner.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">sequential_runner.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/sequential_runner.py#85" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">85</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Loading data from <span style="color: #008000; text-decoration-color: #008000">'y_pred'</span> <span style="font-weight: bold">(</span>PickleDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                      <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#343" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">343</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Loading data from <span style="color: #008000; text-decoration-color: #008000">'y_test'</span> <span style="font-weight: bold">(</span>PickleDataSet<span style="font-weight: bold">)</span><span style="color: #808000; text-decoration-color: #808000">...</span>                      <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">data_catalog.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/io/data_catalog.py#343" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">343</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Running node: report_accuracy: <span style="color: #800080; text-decoration-color: #800080; font-weight: bold">report_accuracy</span><span style="font-weight: bold">([</span>y_pred,y_test<span style="font-weight: bold">])</span> -&gt; <span style="color: #800080; text-decoration-color: #800080; font-style: italic">None</span>    <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/node.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">node.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/pipeline/node.py#327" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">327</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Model has accuracy of <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">0.933</span> on test data.                                  <a href="file:///Users/Nok_Lam_Chan/dev/kedro_gallery/jupyter-debug-demo/src/jupyter_debug_demo/nodes.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">nodes.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/dev/kedro_gallery/jupyter-debug-demo/src/jupyter_debug_demo/nodes.py#77" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">77</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Completed <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">3</span> out of <span style="color: #008080; text-decoration-color: #008080; font-weight: bold">3</span> tasks                                     <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/sequential_runner.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">sequential_runner.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/sequential_runner.py#85" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">85</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="color: #7fbfbf; text-decoration-color: #7fbfbf">                    </span><span style="color: #000080; text-decoration-color: #000080">INFO    </span> Pipeline execution completed successfully.                                <a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/runner.py" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">runner.py</span></a><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">:</span><a href="file:///Users/Nok_Lam_Chan/GitHub/kedro/kedro/runner/runner.py#90" target="_blank"><span style="color: #7f7f7f; text-decoration-color: #7f7f7f">90</span></a>
</pre>
</div>
<div class="cell-output cell-output-display">
<pre style="white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace"><span style="font-weight: bold">{}</span>
</pre>
</div>
</div>
<p>It works now!</p>
<p>Debugging with interactive session is not uncommon - compare to IDE/breakpoint. * You can make plots and see the data * You can intercept the variable and continue with the program - espeically useful when it is computation intensive.</p>
<p>See <a href="https://github.com/kedro-org/kedro/issues/1832#issuecomment-1242499748">more comments from Antony</a></p>
<p>More to optimize 1st PoC * <code>%load_node</code> - populate all neccessary data where the node throws error * When pipeline fail - raise something like <code>%load_node debug=True</code> - the traceback should have information about which node the error is coming from. * Is there anything we can use viz? Sometimes I get question from people can kedro-viz help with debugging too.</p>
<p>More to optimize: * What if the error is not in the node function but somewhere deeper in the call stack? * Handle case when the inputs are not in catalog - how to recompute the necessary inputs? Potentially we can use the backtracking to do it in a more efficient way.</p>


</section>

 ]]></description>
  <category>python</category>
  <category>kedro</category>
  <guid>https://noklam.github.io/blog/posts/2022-11-08-kedro-debugging.html</guid>
  <pubDate>Tue, 08 Nov 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Quick implementation of Kedro DebugRunner</title>
  <link>https://noklam.github.io/blog/posts/kedro-debug-runner.html</link>
  <description><![CDATA[ 




<section id="core" class="level1">
<h1>core</h1>
<blockquote class="blockquote">
<p>Fill in a module description here</p>
</blockquote>
<p>::: {.cell 0=‚Äòh‚Äô 1=‚Äòi‚Äô 2=‚Äòd‚Äô 3=‚Äòe‚Äô}</p>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>load_ext autoreload</span>
<span id="cb1-2"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>autoreload <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> nbdev.showdoc <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span></span></code></pre></div>
<p>:::</p>
<p>::: {.cell 0=‚Äòe‚Äô 1=‚Äòx‚Äô 2=‚Äòp‚Äô 3=‚Äòo‚Äô 4=‚Äòr‚Äô 5=‚Äòt‚Äô}</p>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Counter</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> itertools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> chain</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Any, Dict, Iterable, List, Set</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> kedro.framework.hooks.manager <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> _NullPluginManager</span>
<span id="cb2-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> kedro.io <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AbstractDataSet, DataCatalog, MemoryDataSet</span>
<span id="cb2-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> kedro.pipeline <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Pipeline</span>
<span id="cb2-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> kedro.pipeline.node <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Node</span>
<span id="cb2-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> kedro.runner <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SequentialRunner</span>
<span id="cb2-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> kedro.runner.runner <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AbstractRunner, run_node</span>
<span id="cb2-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pluggy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PluginManager</span>
<span id="cb2-12"></span>
<span id="cb2-13"></span>
<span id="cb2-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> DebugRunner(SequentialRunner):</span>
<span id="cb2-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run(</span>
<span id="cb2-16">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,</span>
<span id="cb2-17">        pipeline: Pipeline,</span>
<span id="cb2-18">        catalog: DataCatalog,</span>
<span id="cb2-19">        dataset_names: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb2-20">        hook_manager: PluginManager <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb2-21">        session_id: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb2-22">    ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, Any]:</span>
<span id="cb2-23">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Run the ``Pipeline`` using the datasets provided by ``catalog``</span></span>
<span id="cb2-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        and save results back to the same objects.</span></span>
<span id="cb2-25"></span>
<span id="cb2-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb2-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            pipeline: The ``Pipeline`` to run.</span></span>
<span id="cb2-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            catalog: The ``DataCatalog`` from which to fetch data.</span></span>
<span id="cb2-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            hook_manager: The ``PluginManager`` to activate hooks.</span></span>
<span id="cb2-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            session_id: The id of the session.</span></span>
<span id="cb2-31"></span>
<span id="cb2-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Raises:</span></span>
<span id="cb2-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            ValueError: Raised when ``Pipeline`` inputs cannot be satisfied.</span></span>
<span id="cb2-34"></span>
<span id="cb2-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb2-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            Any node outputs that cannot be processed by the ``DataCatalog``.</span></span>
<span id="cb2-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            These are returned in a dictionary, where the keys are defined</span></span>
<span id="cb2-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            by the node outputs.</span></span>
<span id="cb2-39"></span>
<span id="cb2-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb2-41">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> dataset_names:</span>
<span id="cb2-42">            dataset_names <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb2-43">        hook_manager <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hook_manager <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> _NullPluginManager()</span>
<span id="cb2-44">        catalog <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> catalog.shallow_copy()</span>
<span id="cb2-45"></span>
<span id="cb2-46">        unsatisfied <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline.inputs() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(catalog.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>())</span>
<span id="cb2-47">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> unsatisfied:</span>
<span id="cb2-48">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(</span>
<span id="cb2-49">                <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Pipeline input(s) </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>unsatisfied<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> not found in the DataCatalog"</span></span>
<span id="cb2-50">            )</span>
<span id="cb2-51"></span>
<span id="cb2-52">        free_outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (</span>
<span id="cb2-53">            pipeline.outputs()</span>
<span id="cb2-54">        )  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return everything regardless if it it's in catalog</span></span>
<span id="cb2-55">        unregistered_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline.data_sets() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(catalog.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>())</span>
<span id="cb2-56">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ds_name <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> unregistered_ds:</span>
<span id="cb2-57">            catalog.add(ds_name, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.create_default_data_set(ds_name))</span>
<span id="cb2-58"></span>
<span id="cb2-59">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._is_async:</span>
<span id="cb2-60">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._logger.info(</span>
<span id="cb2-61">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Asynchronous mode is enabled for loading and saving data"</span></span>
<span id="cb2-62">            )</span>
<span id="cb2-63">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._run(pipeline, catalog, dataset_names, hook_manager, session_id)</span>
<span id="cb2-64"></span>
<span id="cb2-65">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._logger.info(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pipeline execution completed successfully."</span>)</span>
<span id="cb2-66">        </span>
<span id="cb2-67">        free_outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> free_outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(dataset_names)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Union</span></span>
<span id="cb2-68"></span>
<span id="cb2-69">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {ds_name: catalog.load(ds_name) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ds_name <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> free_outputs}</span>
<span id="cb2-70"></span>
<span id="cb2-71">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> _run(</span>
<span id="cb2-72">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,</span>
<span id="cb2-73">        pipeline: Pipeline,</span>
<span id="cb2-74">        catalog: DataCatalog,</span>
<span id="cb2-75">        dataset_names: List[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>],</span>
<span id="cb2-76">        hook_manager: PluginManager,</span>
<span id="cb2-77">        session_id: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb2-78">    ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb2-79">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""The method implementing sequential pipeline running.</span></span>
<span id="cb2-80"></span>
<span id="cb2-81"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb2-82"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            pipeline: The ``Pipeline`` to run.</span></span>
<span id="cb2-83"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            catalog: The ``DataCatalog`` from which to fetch data.</span></span>
<span id="cb2-84"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            hook_manager: The ``PluginManager`` to activate hooks.</span></span>
<span id="cb2-85"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            session_id: The id of the session.</span></span>
<span id="cb2-86"></span>
<span id="cb2-87"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Raises:</span></span>
<span id="cb2-88"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            Exception: in case of any downstream node failure.</span></span>
<span id="cb2-89"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb2-90">        nodes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline.nodes</span>
<span id="cb2-91">        done_nodes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>()</span>
<span id="cb2-92"></span>
<span id="cb2-93">        load_counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Counter(chain.from_iterable(n.inputs <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> nodes))</span>
<span id="cb2-94"></span>
<span id="cb2-95">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> exec_index, node <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(nodes):</span>
<span id="cb2-96">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">try</span>:</span>
<span id="cb2-97">                run_node(node, catalog, hook_manager, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._is_async, session_id)</span>
<span id="cb2-98">                done_nodes.add(node)</span>
<span id="cb2-99">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">except</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>:</span>
<span id="cb2-100">                <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._suggest_resume_scenario(pipeline, done_nodes, catalog)</span>
<span id="cb2-101">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span></span>
<span id="cb2-102"></span>
<span id="cb2-103">            <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># decrement load counts and release any data sets we've finished with</span></span>
<span id="cb2-104">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> data_set <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> node.inputs:</span>
<span id="cb2-105">                load_counts[data_set] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-106">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> load_counts[data_set] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> data_set <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> pipeline.inputs():</span>
<span id="cb2-107">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> data_set <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dataset_names:</span>
<span id="cb2-108">                        catalog.release(data_set)</span>
<span id="cb2-109">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> data_set <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> node.outputs:</span>
<span id="cb2-110">                <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> load_counts[data_set] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> data_set <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> pipeline.outputs():</span>
<span id="cb2-111">                    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> data_set <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> dataset_names:</span>
<span id="cb2-112">                        catalog.release(data_set)</span>
<span id="cb2-113"></span>
<span id="cb2-114">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._logger.info(</span>
<span id="cb2-115">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Completed </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> out of </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%d</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;"> tasks"</span>, exec_index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(nodes)</span>
<span id="cb2-116">            )</span></code></pre></div>
<p>:::</p>
<div class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># `DebugRunner` has to be used in a different way since `session.run` don't support additional argument, so we are going to use a lower level approach and construct `Runner` and `Pipeline` and `DataCatalog` ourselves.</span></span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Testing Kedro Project: https://github.com/noklam/kedro_gallery/tree/master/kedro-debug-runner-demo</span></span>
<span id="cb3-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>load_ext kedro.ipython</span>
<span id="cb3-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>reload_kedro <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~/</span>dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>kedro_gallery<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>kedro<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>debug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>runner<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>demo</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The kedro.ipython extension is already loaded. To reload it, use:
  %reload_ext kedro.ipython
[10/06/22 14:45:20] INFO     Updated path to Kedro project:       __init__.py:54
                             /Users/Nok_Lam_Chan/dev/kedro_galler               
                             y/kedro-debug-runner-demo                          
[10/06/22 14:45:22] INFO     Kedro project                        __init__.py:77
                             kedro_debug_runner_demo                            
                    INFO     Defined global variable 'context',   __init__.py:78
                             'session', 'catalog' and 'pipelines'               </code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>reload_kedro <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">~/</span>dev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>kedro_gallery<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span>kedro<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>debug<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>runner<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>demo</span>
<span id="cb5-2">runner <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DebugRunner()</span>
<span id="cb5-3">default_pipeline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipelines[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__default__"</span>]</span>
<span id="cb5-4">run_1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> runner.run(default_pipeline, catalog)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>                    INFO     Updated path to Kedro project:       __init__.py:54
                             /Users/Nok_Lam_Chan/dev/kedro_galler               
                             y/kedro-debug-runner-demo                          
[10/06/22 14:45:24] INFO     Kedro project                        __init__.py:77
                             kedro_debug_runner_demo                            
                    INFO     Defined global variable 'context',   __init__.py:78
                             'session', 'catalog' and 'pipelines'               
                    INFO     Loading data from               data_catalog.py:343
                             'example_iris_data'                                
                             (CSVDataSet)...                                    
                    INFO     Loading data from 'parameters'  data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Running node: split:                    node.py:327
                             split_data([example_iris_data,parameter            
                             s]) -&gt; [X_train,X_test,y_train,y_test]             
                    INFO     Saving data to 'X_train'        data_catalog.py:382
                             (MemoryDataSet)...                                 
                    INFO     Saving data to 'X_test'         data_catalog.py:382
                             (MemoryDataSet)...                                 
                    INFO     Saving data to 'y_train'        data_catalog.py:382
                             (MemoryDataSet)...                                 
                    INFO     Saving data to 'y_test'         data_catalog.py:382
                             (MemoryDataSet)...                                 
                    INFO     Loading data from 'X_train'     data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Loading data from 'X_test'      data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Loading data from 'y_train'     data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Running node: make_predictions:         node.py:327
                             make_predictions([X_train,X_test,y_trai            
                             n]) -&gt; [y_pred]                                    
                    INFO     Saving data to 'y_pred'         data_catalog.py:382
                             (MemoryDataSet)...                                 
                    INFO     Loading data from 'y_pred'      data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Loading data from 'y_test'      data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Running node: report_accuracy:          node.py:327
                             report_accuracy([y_pred,y_test]) -&gt;                
                             None                                               
                    INFO     Model has accuracy of 0.933 on test     nodes.py:74
                             data.                                              </code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">runner <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DebugRunner()</span>
<span id="cb7-2">default_pipeline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipelines[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__default__"</span>]</span>
<span id="cb7-3">run_2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> runner.run(default_pipeline, catalog, dataset_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"example_iris_data"</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[10/06/22 14:45:27] INFO     Loading data from               data_catalog.py:343
                             'example_iris_data'                                
                             (CSVDataSet)...                                    
                    INFO     Loading data from 'parameters'  data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Running node: split:                    node.py:327
                             split_data([example_iris_data,parameter            
                             s]) -&gt; [X_train,X_test,y_train,y_test]             
                    INFO     Saving data to 'X_train'        data_catalog.py:382
                             (MemoryDataSet)...                                 
                    INFO     Saving data to 'X_test'         data_catalog.py:382
                             (MemoryDataSet)...                                 
                    INFO     Saving data to 'y_train'        data_catalog.py:382
                             (MemoryDataSet)...                                 
                    INFO     Saving data to 'y_test'         data_catalog.py:382
                             (MemoryDataSet)...                                 
                    INFO     Loading data from 'X_train'     data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Loading data from 'X_test'      data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Loading data from 'y_train'     data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Running node: make_predictions:         node.py:327
                             make_predictions([X_train,X_test,y_trai            
                             n]) -&gt; [y_pred]                                    
                    INFO     Saving data to 'y_pred'         data_catalog.py:382
                             (MemoryDataSet)...                                 
                    INFO     Loading data from 'y_pred'      data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Loading data from 'y_test'      data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Running node: report_accuracy:          node.py:327
                             report_accuracy([y_pred,y_test]) -&gt;                
                             None                                               
                    INFO     Model has accuracy of 0.933 on test     nodes.py:74
                             data.                                              
                    INFO     Loading data from               data_catalog.py:343
                             'example_iris_data'                                
                             (CSVDataSet)...                                    </code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">runner <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DebugRunner()</span>
<span id="cb9-2">default_pipeline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipelines[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__default__"</span>]</span>
<span id="cb9-3">run_3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> runner.run(default_pipeline, catalog, dataset_names<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"X_train"</span>]) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Input datasets</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>[10/06/22 14:46:01] INFO     Loading data from               data_catalog.py:343
                             'example_iris_data'                                
                             (CSVDataSet)...                                    
                    INFO     Loading data from 'parameters'  data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Running node: split:                    node.py:327
                             split_data([example_iris_data,parameter            
                             s]) -&gt; [X_train,X_test,y_train,y_test]             
                    INFO     Saving data to 'X_train'        data_catalog.py:382
                             (MemoryDataSet)...                                 
                    INFO     Saving data to 'X_test'         data_catalog.py:382
                             (MemoryDataSet)...                                 
                    INFO     Saving data to 'y_train'        data_catalog.py:382
                             (MemoryDataSet)...                                 
                    INFO     Saving data to 'y_test'         data_catalog.py:382
                             (MemoryDataSet)...                                 
                    INFO     Loading data from 'X_train'     data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Loading data from 'X_test'      data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Loading data from 'y_train'     data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Running node: make_predictions:         node.py:327
                             make_predictions([X_train,X_test,y_trai            
                             n]) -&gt; [y_pred]                                    
                    INFO     Saving data to 'y_pred'         data_catalog.py:382
                             (MemoryDataSet)...                                 
                    INFO     Loading data from 'y_pred'      data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Loading data from 'y_test'      data_catalog.py:343
                             (MemoryDataSet)...                                 
                    INFO     Running node: report_accuracy:          node.py:327
                             report_accuracy([y_pred,y_test]) -&gt;                
                             None                                               
                    INFO     Model has accuracy of 0.933 on test     nodes.py:74
                             data.                                              
                    INFO     Loading data from 'X_train'     data_catalog.py:343
                             (MemoryDataSet)...                                 </code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">run_1</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>{}</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">run_2</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>{'example_iris_data':      sepal_length  sepal_width  petal_length  petal_width    species
 0             5.1          3.5           1.4          0.2     setosa
 1             4.9          3.0           1.4          0.2     setosa
 2             4.7          3.2           1.3          0.2     setosa
 3             4.6          3.1           1.5          0.2     setosa
 4             5.0          3.6           1.4          0.2     setosa
 ..            ...          ...           ...          ...        ...
 145           6.7          3.0           5.2          2.3  virginica
 146           6.3          2.5           5.0          1.9  virginica
 147           6.5          3.0           5.2          2.0  virginica
 148           6.2          3.4           5.4          2.3  virginica
 149           5.9          3.0           5.1          1.8  virginica
 
 [150 rows x 5 columns]}</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">run_3</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>{'X_train':      sepal_length  sepal_width  petal_length  petal_width
 47            4.6          3.2           1.4          0.2
 3             4.6          3.1           1.5          0.2
 31            5.4          3.4           1.5          0.4
 25            5.0          3.0           1.6          0.2
 15            5.7          4.4           1.5          0.4
 ..            ...          ...           ...          ...
 28            5.2          3.4           1.4          0.2
 78            6.0          2.9           4.5          1.5
 146           6.3          2.5           5.0          1.9
 49            5.0          3.3           1.4          0.2
 94            5.6          2.7           4.2          1.3
 
 [120 rows x 4 columns]}</code></pre>
</div>
</div>
<p>::: {.cell 0=‚Äòe‚Äô 1=‚Äòx‚Äô 2=‚Äòp‚Äô 3=‚Äòo‚Äô 4=‚Äòr‚Äô 5=‚Äòt‚Äô}</p>
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> GreedySequentialRunner(SequentialRunner):</span>
<span id="cb17-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> run(</span>
<span id="cb17-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>,</span>
<span id="cb17-4">        pipeline: Pipeline,</span>
<span id="cb17-5">        catalog: DataCatalog,</span>
<span id="cb17-6">        hook_manager: PluginManager <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb17-7">        session_id: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb17-8">    ) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Dict[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, Any]:</span>
<span id="cb17-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Run the ``Pipeline`` using the datasets provided by ``catalog``</span></span>
<span id="cb17-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        and save results back to the same objects.</span></span>
<span id="cb17-11"></span>
<span id="cb17-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Args:</span></span>
<span id="cb17-13"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            pipeline: The ``Pipeline`` to run.</span></span>
<span id="cb17-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            catalog: The ``DataCatalog`` from which to fetch data.</span></span>
<span id="cb17-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            hook_manager: The ``PluginManager`` to activate hooks.</span></span>
<span id="cb17-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            session_id: The id of the session.</span></span>
<span id="cb17-17"></span>
<span id="cb17-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Raises:</span></span>
<span id="cb17-19"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            ValueError: Raised when ``Pipeline`` inputs cannot be satisfied.</span></span>
<span id="cb17-20"></span>
<span id="cb17-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Returns:</span></span>
<span id="cb17-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            Any node outputs that cannot be processed by the ``DataCatalog``.</span></span>
<span id="cb17-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            These are returned in a dictionary, where the keys are defined</span></span>
<span id="cb17-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">            by the node outputs.</span></span>
<span id="cb17-25"></span>
<span id="cb17-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        """</span></span>
<span id="cb17-27"></span>
<span id="cb17-28">        hook_manager <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> hook_manager <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">or</span> _NullPluginManager()</span>
<span id="cb17-29">        catalog <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> catalog.shallow_copy()</span>
<span id="cb17-30"></span>
<span id="cb17-31">        unsatisfied <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline.inputs() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(catalog.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>())</span>
<span id="cb17-32">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> unsatisfied:</span>
<span id="cb17-33">            <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> <span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">ValueError</span>(</span>
<span id="cb17-34">                <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Pipeline input(s) </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>unsatisfied<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;"> not found in the DataCatalog"</span></span>
<span id="cb17-35">            )</span>
<span id="cb17-36"></span>
<span id="cb17-37">        free_outputs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline.outputs() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Return everything regardless if it it's in catalog</span></span>
<span id="cb17-38">        unregistered_ds <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline.data_sets() <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(catalog.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>())</span>
<span id="cb17-39">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ds_name <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> unregistered_ds:</span>
<span id="cb17-40">            catalog.add(ds_name, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.create_default_data_set(ds_name))</span>
<span id="cb17-41"></span>
<span id="cb17-42">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._is_async:</span>
<span id="cb17-43">            <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._logger.info(</span>
<span id="cb17-44">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Asynchronous mode is enabled for loading and saving data"</span></span>
<span id="cb17-45">            )</span>
<span id="cb17-46">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._run(pipeline, catalog, hook_manager, session_id)</span>
<span id="cb17-47"></span>
<span id="cb17-48">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>._logger.info(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pipeline execution completed successfully."</span>)</span>
<span id="cb17-49"></span>
<span id="cb17-50">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {ds_name: catalog.load(ds_name) <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> ds_name <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> free_outputs}</span></code></pre></div>
<p>:::</p>
<p>::: {.cell 0=‚Äòh‚Äô 1=‚Äòi‚Äô 2=‚Äòd‚Äô 3=‚Äòe‚Äô}</p>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> nbdev<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> nbdev.nbdev_export()</span></code></pre></div>
<p>:::</p>


</section>

 ]]></description>
  <category>europython</category>
  <guid>https://noklam.github.io/blog/posts/kedro-debug-runner.html</guid>
  <pubDate>Tue, 01 Nov 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>EuroPython 2022 - Conference Notes &amp; Summary</title>
  <link>https://noklam.github.io/blog/posts/2022-07-11-europython2022-summary.html</link>
  <description><![CDATA[ 




<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://noklam.github.io/blog/posts/images/europython_welcome.jpg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">EuroPython2022</figcaption>
</figure>
</div>
<p>Schedule: https://ep2022.europython.eu/schedule/</p>
<p>Session that I attended: #europython</p>
<ul>
<li>Properties testing with Hypothesis</li>
<li>TDD Development with Pytest</li>
<li>Python Object under the hood</li>
<li>Norvig‚Äôs lispy - beautiful and illuminating Python code</li>
<li>Introduction to Apache TVM</li>
<li>From pip to poetry - Python ways of packagin and publishing</li>
<li>Czech Drourght monitoring system - from manual work to global drought monitoring and mahcine learning with Python Protocol in Python</li>
<li>Dance with shadows - stub mock and patch</li>
<li>What Happen when you import a library in Python</li>
<li>Music and code - good presentation</li>
<li>Dodging AI Dystopia</li>
<li>Make CPython Faster - Mark Shannon</li>
<li>Use animated charts to present &amp; share your findings with ipyvizzu</li>
<li>DOCUMENTATION AS SECRET WEAPON</li>
<li>JWST - James Webb Telescope</li>
<li>Jupyter Under the hood architecture</li>
<li>Python thread safety parallelism without GIL</li>
<li>CPython Internals - implementation with a pipe operator</li>
<li>Hydra configuration with experiment</li>
</ul>
<section id="bulletproof-python-property-based-testing-with-hypothesis" class="level2">
<h2 class="anchored" data-anchor-id="bulletproof-python-property-based-testing-with-hypothesis">Bulletproof Python ‚Äì Property-Based Testing with Hypothesis</h2>
<p>The term <strong>property based testing</strong> isn‚Äôt too important. In a nutshell <code>hypothesis</code> is a python library that help you to write (better) tests by modifying your workflow.</p>
<ol type="1">
<li><del>Prepare mock data</del> Provide a specification of data, let <code>hypothesis</code> do the work</li>
<li>Perform some operation</li>
<li>Assert the result with expected value</li>
</ol>
<p>The rationale behind this is</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>** People write code don‚Äôt come up with good test. **</p>
</div>
</div>
<p>For example, you can generate integers with <code>hypotesis.strategies.integers</code>, it does something smart under the hood so it‚Äôs not just random number but more meaningful test. For example, you usually want to test for zero, negative number, positive number, large number. <code>hypoethsis</code> try to maximize the variety of tests and you just need to give it a specification.</p>
<p>You can also generate more sophisticated data, for example, a tuple of two integers, where the second integer has to be larger than the first one.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@st.composite</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> list_and_index(draw, elements<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>st.integers()):</span>
<span id="cb1-4">&nbsp; &nbsp; first <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw(elements)</span>
<span id="cb1-5">&nbsp; &nbsp; second <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> draw(st.integers(min_value<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>first <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb1-6">&nbsp; &nbsp; <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> (first, second)</span></code></pre></div>
<p>Think of it as your virtual QA buddy.</p>
</section>
<section id="tdd-development-with-pytest" class="level2">
<h2 class="anchored" data-anchor-id="tdd-development-with-pytest">TDD Development with pytest</h2>
<p>Workflow for TDD 1. Pick one bug/missing feature 2. Write a test that fails 3. Minimal amount of code that pass - (even hard coded!) 4. Refactor</p>
<p>There are good questions asked * In case of you don‚Äôt know what‚Äôs the expected answer, how do you write test that fails meaningfully?</p>
<p>I jump out of the session because of a call, so not too many comments about this session. In general I like the idea of TDD but struggle to apply the textbook version of TDD as examples are often much simpler than the real application.</p>
<p>Few key points * Tests as specification about your program (What it does and what not) * Understand why you test fail and pass. * Tests are also good source of documentation.</p>
<p>Thinking about test first also force you to think more about the design, you almost start from pseudocode (you function doesn‚Äôt even exist!).</p>
</section>
<section id="python-objects-under-the-hood" class="level1">
<h1>Python objects Under the hood</h1>
<p>Covers a lot about Python‚Äôs magic method * <code>__init__</code> add <code>__new__</code> * <code>__add__</code> and <code>__radd__</code> * <code>super()</code> * <code>__str__</code> and <code>__repr__</code> * <code>__next__</code> and <code>__iter__</code> * Why <code>__new__</code> is needed? * We need to create immutable object * Object creation start with <code>__new__</code> which create an instance -&gt; <code>__init__</code> to customize the attributes * We need <code>__new__</code> to create a new immutable object * But how‚Äôs python actually achieve immutable tuple? Unanswered</p>
<p><a href="https://mail.python.org/pipermail/tutor/2008-April/061426.html">[Tutor] When to use <strong>new</strong> vs.&nbsp;<strong>init</strong> ?</a> &gt; <strong>new</strong> is the first step of instance creation. It‚Äôs called first, and is responsible for returning a new instance of your class. In contrast, <strong>init</strong> doesn‚Äôt return anything; it‚Äôs only responsible for initializing the instance after it‚Äôs been created.</p>
</section>
<section id="norvigs-lispy-beautiful-and-illuminating-python-code" class="level1">
<h1>Norvig‚Äôs lispy: beautiful and illuminating Python code</h1>
<p>This is an interesting exercise to implement an <code>Lisp</code> interpreter in <code>Python</code>. I am not from CS background so this is brand new to me, and uncover some of the details that how programming language actually works. It involves parsing text into <code>tokens</code> and evaluate them with some grammar which can be represented as AST.</p>
<p>This is the AST for the example <code>(define double (lambda (n) (* n 2)))</code> drawn as a tree <a href="https://github.com/fluentpython/lispy/tree/main/workshops/europython2022">reference</a>:</p>
<pre><code>                              '*'  'n'   2  
                        'n'    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îò  
                         ‚îÇ          ‚îÇ  
           'lambda'     [ ]        [ ]  
               ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  
                         ‚îÇ  
'define'   'double'     [ ]  
    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò  
              ‚îÇ  
             [ ]  </code></pre>
<p>The speaker also introduce <code>ChainMap</code>, which I am not aware of before.</p>
<div class="cell" data-execution_count="128">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ChainMap</span>
<span id="cb3-2">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>}</span>
<span id="cb3-3">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>}</span>
<span id="cb3-4">c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span>
<span id="cb3-5"></span>
<span id="cb3-6">}</span>
<span id="cb3-7"></span>
<span id="cb3-8">chainmap <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ChainMap(a,b,c)</span></code></pre></div>
</div>
<p>A <code>ChainMap</code> stores multiple dictionaries, instead of merging them they are all stored in the object. Take a guess which `chainmap[‚Äòa‚Äô], chainmap[‚Äòb‚Äô] are?</p>
<div class="cell" data-execution_count="129">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">chainmap[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'a'</span>], chainmap[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'b'</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="129">
<pre><code>(1, 2)</code></pre>
</div>
</div>
<p>It pretty much behaves like a normal Python dictionary, except that when the same key exists in more than one of the dictionary, the one that is in the front of the argument list has higher priority.</p>
<section id="introduction-to-apache-tvm" class="level2">
<h2 class="anchored" data-anchor-id="introduction-to-apache-tvm">Introduction to Apache TVM</h2>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://noklam.github.io/blog/posts/europython/tvm.svg" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Apache TVM</figcaption>
</figure>
</div>
<ul>
<li>Apache TVM is a framework that try to squeeze extra performance from specialized hardware.</li>
</ul>
<p>In practice, the workflow roughly go like this 1. Trained a model with your favored libraries (PyTorch/Tensorflow etc) 2. Use TVM to compile and tune -&gt; After this you get a compiled module as output 3. Use TVM python API for inference</p>
<p>The performance gains are mainly from hardware architecture that can give better performance, TVM did some architecture search and try to find the optimal one.</p>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>Maybe one side benefit of this is it does not need the deep learning pipeline dependecenies since you just need the TVM Python API and the model file for inference.</p>
</div>
</div>
</section>
</section>
<section id="typing.protocol-in-python-available-in-python-3.8" class="level1">
<h1><code>typing.Protocol</code> in Python (Available in Python 3.8+)</h1>
<p>Since the introduction of type hints, it has been a popular python feature and a lot more static analysis tools is added into the Python ecosystem. The most popular static analysis tool in Python is <code>mypy</code>.</p>
<p><code>Protocol</code> is a way of strcutural subtyping, it‚Äôs best to understand it with an Example.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Dog:</span>
<span id="cb6-2">    ...</span>
<span id="cb6-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Cat:</span>
<span id="cb6-4">    ...</span>
<span id="cb6-5">    </span>
<span id="cb6-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> eat_bread(Union[Dog, Cat]):</span>
<span id="cb6-7">    do_somthing()</span></code></pre></div>
<p>Imagine if you are importing the <code>eat_bread</code> function and you want to extend it with a new animal type. There are no way you can do it unless you go into the source code of the library and change the argument.</p>
<p><code>Protocol</code> solve this problem in a way that I think it‚Äôs quite similar to <code>traits</code>, which is quite common in languages like <code>Scala</code>.</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> EatsBread(Protocol):</span>
<span id="cb7-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> eat_bread(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb7-3">        ...</span>
<span id="cb7-4"></span>
<span id="cb7-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> feed_bread(animal: EatsBread):</span>
<span id="cb7-6">    animal.eat_bread()</span>
<span id="cb7-7"></span>
<span id="cb7-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> Duck:</span>
<span id="cb7-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> eat_bread(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb7-10">        ...</span>
<span id="cb7-11"></span>
<span id="cb7-12">feed_bread(Duck())  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># &lt;-- OK</span></span></code></pre></div>
<p>Python is a dynamic typing language, which is flexible with duck typing. In essence, if something can <code>swim</code> and <code>quack</code>, it‚Äôs close enough to be consider as a duck. We only care about what the <code>class</code> can do, not the type of the class. So in this case, <code>Duck</code> has a method of <code>eat_bread</code>, and it maches the <code>Protocol</code> method and the static analysis tool will not have problem with it. As a result, we don‚Äôt need to extend the <code>class</code> or add a new class to <code>Union</code> everytime we extend a new class.</p>
</section>
<section id="what-happened-when-you-import-a-python-library" class="level1">
<h1>What Happened when you import a Python Library?</h1>
<p>This is an interesting talk as I recently had a bug that related to this exactly. It was a bug that due to different mechanism of <code>multiprocess</code>, In Windows and some versions of Mac, it used a <code>spawn process</code>, in Linux it is <code>fork process</code>. The main difference is that <code>spawn process</code> will re-import all the Python modules in the new process and cause some issues. In short, it‚Äôs not a good idea to have side-effect when importing a library, always put that into a <code>__name__ == __main__</code> block.</p>
<ul>
<li><code>modules</code> are python object -&gt; you can do something like <code>import random; type(random)</code></li>
<li>Whenever you import a module, a module object is created with a name, optionally you can alias it with <code>import module as xyz</code></li>
<li>sys.modules is the Python VM that keep track of the imported library as a <code>dict</code>
<ul>
<li>Since it is a dict, where the key is the name of the module and value as the module object</li>
<li>If the module is imported more than 1 time, the <code>sys.modules</code> is smart enough to skip the import since the key already exist. It will just use the <code>module</code> object instead.</li>
</ul></li>
</ul>
<section id="how-many-modules-imported-in-python-by-default" class="level2">
<h2 class="anchored" data-anchor-id="how-many-modules-imported-in-python-by-default">How many modules imported in Python by default?</h2>
<ul>
<li>Python Shell - 79</li>
<li>IPython - 646!</li>
<li>Jupyter - 1020!!!</li>
</ul>
<p>It‚Äôs quite surprising how many libraries are imported by default, and this explains why it takes some time whenever you do <code>ipython</code> on a shell, as the Python Interpreter is busy reading all the files and evalute it.</p>
<p>Some other interesting notes: * Python use a <code>Finder</code> and <code>Loader</code> to import modules * <code>sys.path</code> is the order that Python Interpreter search for modules, and the first match wins (This is important if you have duplicate namespace or if you do namespace package) * Don‚Äôt do <code>sys.path.append</code> although you will find this very common if you do a Stackoverflow search, use environment variable <code>PYTHONPATH=some_path</code> instead</p>
</section>
</section>
<section id="make-cpython-faster" class="level1">
<h1>Make CPython Faster</h1>
<p>The talk was delivered by Mark Shannon. The pace of the talk is quite fast and I couldn‚Äôt understand the details, but I think it is a good source of food for thought. Some keypoints * Memory access is slow * Dependent memory read is slower - 2 read is 2x slower because it has to be executed in sequence How to make Python 3.11 faster? * Lazy debugging info creation * (Almost) Zero Cost exceptions * In the try-block - push address to stack of the exception handler * with the expense of more memory - performance is improved in general case, but more expensive when exeception is raised</p>
</section>
<section id="jupyter-under-the-hood" class="level1">
<h1>Jupyter Under the hood</h1>
<ul>
<li>ZMQ as the network Protocol</li>
<li>Dealer socker &amp; router Socket</li>
<li>3 types of channels
<ul>
<li>shell</li>
<li>IO pub</li>
<li>STDIN</li>
</ul></li>
</ul>
</section>
<section id="hydra-configuration-for-experiments" class="level1">
<h1>Hydra configuration for experiments</h1>
<div class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">`hydra` <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">is</span> a Python Library that support configuration <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> many advance features, which built on top of `OmegaConf`.</span>
<span id="cb8-2">Features include:</span>
<span id="cb8-3"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> `instantiate` <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> dependency injection <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> configuration <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> example you can do a partial instantiate</span>
<span id="cb8-4"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> Type checking</span>
<span id="cb8-5"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> Tab completion <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">for</span> configuration</span>
<span id="cb8-6"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> Multi<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>run</span>
<span id="cb8-7"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> Supports plugins</span>
<span id="cb8-8"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> Split configurations <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> multiple YAML files</span>
<span id="cb8-9">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> The structure of files largely resemble how a Python modules works. i.e. module.sub_module.xxx</span>
<span id="cb8-10"></span>
<span id="cb8-11"></span>
<span id="cb8-12">Some downsides:</span>
<span id="cb8-13"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> It use Singleton <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">and</span> cause some problem</span></code></pre></div>
</div>


</section>

 ]]></description>
  <category>europython</category>
  <guid>https://noklam.github.io/blog/posts/2022-07-11-europython2022-summary.html</guid>
  <pubDate>Sun, 10 Jul 2022 23:00:00 GMT</pubDate>
  <media:content url="https://noklam.github.io/blog/posts/europython.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Testing with Mocking</title>
  <dc:creator>noklam </dc:creator>
  <link>https://noklam.github.io/blog/posts/2022-05-30-mocking-with-pytest-patch.html</link>
  <description><![CDATA[ 




<section id="what-is-mocking" class="level1">
<h1>What is Mocking?</h1>
</section>
<section id="pytest-mock" class="level1">
<h1>pytest-mock</h1>
<p>One of the mainstream mocking library is the standard one from <code>unittest</code>, there are also pytest plugin <code>pytest-mock</code> which wraps on <code>unittest</code>.</p>
<div class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>load_ext ipython_pytest</span></code></pre></div>
</div>
<div class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>pytest</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> test_sum():</span>
<span id="cb2-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>============================= test session starts =============================
platform win32 -- Python 3.8.5, pytest-6.2.5, py-1.11.0, pluggy-1.0.0
rootdir: C:\Users\lrcno\AppData\Local\Temp\tmpiih077gv
plugins: anyio-3.5.0, cov-3.0.0, mock-1.13.0
collected 1 item

_ipytesttmp.py .                                                         [100%]

============================== 1 passed in 0.06s ==============================</code></pre>
</div>
</div>
<p>Mocking is important for a few reasons. * You want to have fast unittest (within second) * You don‚Äôt want to put loading or have any side-effect to your actual servers/database (e.g.&nbsp;mock writing to a database)</p>
</section>
<section id="mock-and-magicmock" class="level1">
<h1><code>Mock</code> and <code>MagicMock</code></h1>
<p>There are two main mock object you can used with the standard <code>unittest</code> library from <code>unittest.mock</code>.</p>
<div class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> unittest.mock <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Mock, MagicMock, patch</span></code></pre></div>
</div>
<section id="mock" class="level2">
<h2 class="anchored" data-anchor-id="mock">Mock</h2>
<div class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">mock <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mock()</span></code></pre></div>
</div>
<p>With the <code>Mock</code> object, you can treat it like a magic object that have any attributes or methods.</p>
<div class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">mock.super_method(), mock.attribute_that_does_not_exist_at_all</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="20">
<pre><code>(&lt;Mock name='mock.super_method()' id='1587554283232'&gt;,
 &lt;Mock name='mock.attribute_that_does_not_exist_at_all' id='1587554282512'&gt;)</code></pre>
</div>
</div>
<div class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>(mock)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>"&lt;Mock id='1587554282848'&gt;"</code></pre>
</div>
</div>
</section>
<section id="magicmock" class="level2">
<h2 class="anchored" data-anchor-id="magicmock">MagicMock</h2>
<p>The ‚Äúmagic‚Äù comes from the magic methods of python object, for example, when you add two object together, it is calling the <code>__add__</code> magic method under the hook.</p>
<div class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">mock <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> mock</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>TypeError: unsupported operand type(s) for +: 'Mock' and 'Mock'</code></pre>
</div>
</div>
<div class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">magic_mock <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MagicMock()</span></code></pre></div>
</div>
<div class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">magic_mock <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> magic_mock</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="32">
<pre><code>&lt;MagicMock name='mock.__add__()' id='1587563722784'&gt;</code></pre>
</div>
</div>
<p>With <code>MagicMock</code>, you get these magic methods for free, this is why adding two mock will not throw an error but adding two <code>Mock</code> will result in a <code>TypeError</code></p>
<p>Let say we want to mock the <code>pandas.read_csv</code> function, because we don‚Äôt actually want it to read a data, but just return some mock data whenever it is called. It‚Äôs easier to explain with an example.</p>
</section>
</section>
<section id="mocking-with-real-library" class="level1">
<h1>Mocking with real library</h1>
<div class="cell" data-execution_count="42">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>pytest</span>
<span id="cb15-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb15-3"></span>
<span id="cb15-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> test_read_csv(mocker):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mocker is a special pytest fixture, so even though we haven't define it here but pytest understands it.</span></span>
<span id="cb15-5">    mocker.patch(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pandas.read_csv"</span>, return_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fake_data"</span>)</span>
<span id="cb15-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"some_data"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fake_data"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>============================= test session starts =============================
platform win32 -- Python 3.8.5, pytest-6.2.5, py-1.11.0, pluggy-1.0.0
rootdir: C:\Users\lrcno\AppData\Local\Temp\tmpka9zv6ev
plugins: anyio-3.5.0, cov-3.0.0, mock-1.13.0
collected 1 item

_ipytesttmp.py .                                                         [100%]

============================== 1 passed in 0.09s ==============================</code></pre>
</div>
</div>
<p>In reality, you should get a <code>Dataframe</code> object, but here we mock the return value to return a <code>str</code>, and you can see the test actually pass.</p>
<section id="mocker.patch-with-createtrue" class="level2">
<h2 class="anchored" data-anchor-id="mocker.patch-with-createtrue"><code>mocker.patch</code> with <code>create=True</code></h2>
<div class="cell" data-execution_count="46">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>pytest</span>
<span id="cb17-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb17-3"></span>
<span id="cb17-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> test_read_csv(mocker):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mocker is a special pytest fixture, so even though we haven't define it here but pytest understands it.</span></span>
<span id="cb17-5">    mocker.patch(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pandas.read_special_csv"</span>, return_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fake_data"</span>, create<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb17-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> pd.read_special_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"some_data"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fake_data"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>============================= test session starts =============================
platform win32 -- Python 3.8.5, pytest-6.2.5, py-1.11.0, pluggy-1.0.0
rootdir: C:\Users\lrcno\AppData\Local\Temp\tmpzbddlxxg
plugins: anyio-3.5.0, cov-3.0.0, mock-1.13.0
collected 1 item

_ipytesttmp.py F                                                         [100%]

================================== FAILURES ===================================
________________________________ test_read_csv ________________________________

mocker = &lt;pytest_mock.plugin.MockFixture object at 0x00000171B28B1820&gt;

    def test_read_csv(mocker):  # mocker is a special pytest fixture, so even though we haven't define it here but pytest understands it.
&gt;       mocker.patch("pandas.read_special_csv", return_value = "fake_data", create=False)

_ipytesttmp.py:4: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
..\..\..\..\miniconda3\lib\site-packages\pytest_mock\plugin.py:193: in __call__
    return self._start_patch(self.mock_module.patch, *args, **kwargs)
..\..\..\..\miniconda3\lib\site-packages\pytest_mock\plugin.py:157: in _start_patch
    mocked = p.start()
..\..\..\..\miniconda3\lib\unittest\mock.py:1529: in start
    result = self.__enter__()
..\..\..\..\miniconda3\lib\unittest\mock.py:1393: in __enter__
    original, local = self.get_original()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;unittest.mock._patch object at 0x00000171B28B10D0&gt;

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
&gt;           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: &lt;module 'pandas' from 'c:\\users\\lrcno\\miniconda3\\lib\\site-packages\\pandas\\__init__.py'&gt; does not have the attribute 'read_special_csv'

..\..\..\..\miniconda3\lib\unittest\mock.py:1366: AttributeError
=========================== short test summary info ===========================
FAILED _ipytesttmp.py::test_read_csv - AttributeError: &lt;module 'pandas' from ...
============================== 1 failed in 0.43s ==============================</code></pre>
</div>
</div>
<p>Now we fail the test because <code>pandas.read_special_csv</code> does not exist. However, with <code>create=True</code> you can make the test pass again. Normally you won‚Äôt want to do this, but it is an option that available.</p>
<div class="cell" data-execution_count="48">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>pytest</span>
<span id="cb19-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb19-3"></span>
<span id="cb19-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> test_read_csv(mocker):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mocker is a special pytest fixture, so even though we haven't define it here but pytest understands it.</span></span>
<span id="cb19-5">    mocker.patch(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pandas.read_special_csv"</span>, return_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fake_data"</span>, create<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb19-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">assert</span> pd.read_special_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"some_data"</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fake_data"</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>============================= test session starts =============================
platform win32 -- Python 3.8.5, pytest-6.2.5, py-1.11.0, pluggy-1.0.0
rootdir: C:\Users\lrcno\AppData\Local\Temp\tmphqbckliw
plugins: anyio-3.5.0, cov-3.0.0, mock-1.13.0
collected 1 item

_ipytesttmp.py .                                                         [100%]

============================== 1 passed in 0.10s ==============================</code></pre>
</div>
</div>
<p>More often, you would want your mock resemble your real object, which means it has the same attributes and method, but it should fails when the method being called isn‚Äôt valid. You may specify the <code>return_value</code> with the mock type</p>
<div class="cell" data-execution_count="76">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>pytest <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>vvv</span>
<span id="cb21-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb21-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> unittest.mock <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Mock</span>
<span id="cb21-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pytest</span>
<span id="cb21-5"></span>
<span id="cb21-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> test_read_csv_valid_method(mocker):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mocker is a special pytest fixture, so even though we haven't define it here but pytest understands it.</span></span>
<span id="cb21-7">    mocker.patch(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pandas.read_csv"</span>, return_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mock(pd.DataFrame))</span>
<span id="cb21-8">    df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"some_data"</span>)</span>
<span id="cb21-9">    df.mean()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A DataFrame method</span></span>
<span id="cb21-10"></span>
<span id="cb21-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> test_read_csv_invalid_method(mocker):  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># mocker is a special pytest fixture, so even though we haven't define it here but pytest understands it.</span></span>
<span id="cb21-12">    mocker.patch(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pandas.read_csv"</span>, return_value <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Mock(pd.DataFrame))</span>
<span id="cb21-13">    df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>  pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"some_data"</span>)</span>
<span id="cb21-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> pytest.raises(<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">Exception</span>):</span>
<span id="cb21-15">        df.not_a_dataframe_method()</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>============================= test session starts =============================
platform win32 -- Python 3.8.5, pytest-6.2.5, py-1.11.0, pluggy-1.0.0 -- c:\users\lrcno\miniconda3\python.exe
cachedir: .pytest_cache
rootdir: C:\Users\lrcno\AppData\Local\Temp\tmpyfiqtkoy
plugins: anyio-3.5.0, cov-3.0.0, mock-1.13.0
collecting ... collected 2 items

_ipytesttmp.py::test_read_csv_valid_method PASSED                        [ 50%]
_ipytesttmp.py::test_read_csv_invalid_method PASSED                      [100%]

============================== 2 passed in 0.16s ==============================</code></pre>
</div>
</div>


</section>
</section>

 ]]></description>
  <category>python</category>
  <guid>https://noklam.github.io/blog/posts/2022-05-30-mocking-with-pytest-patch.html</guid>
  <pubDate>Sun, 29 May 2022 23:00:00 GMT</pubDate>
</item>
<item>
  <title>How to achieve Partial Immutability with Python? dataclasses or attrs?</title>
  <dc:creator>noklam </dc:creator>
  <link>https://noklam.github.io/blog/posts/2022-04-22-python-dataclass-partial-immutable.html</link>
  <description><![CDATA[ 




<section id="tldr" class="level1">
<h1>TL;DR</h1>
<p>This blog goes into detail with examples of using <code>dataclasses</code> and <code>attrs</code>, why and when you should consider to use it. This assume you already understand why dataclass and its variants are useful, so I am not trying to convince you that you should use dataclass, but WHICH libraries you may want to choose.</p>
<p>If you are looking for a quick summary:</p>
<table class="table">
<thead>
<tr class="header">
<th style="text-align: left;">Item</th>
<th style="text-align: center;">dataclasses</th>
<th style="text-align: right;">attrs</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">Immutable Instance</td>
<td style="text-align: center;">‚úÖ <span class="citation" data-cites="dataclass">@dataclass</span>(frozen=True)</td>
<td style="text-align: right;"><span class="citation" data-cites="define">@define</span>(frozen=True)</td>
</tr>
<tr class="even">
<td style="text-align: left;">Immutable Field</td>
<td style="text-align: center;">Limited</td>
<td style="text-align: right;">Flexible</td>
</tr>
<tr class="odd">
<td style="text-align: left;">post init</td>
<td style="text-align: center;">‚úÖ</td>
<td style="text-align: right;">‚úÖ</td>
</tr>
<tr class="even">
<td style="text-align: left;">Dependencies</td>
<td style="text-align: center;">‚úÖ standard library</td>
<td style="text-align: right;">‚úÖ almost <a href="https://github.com/python-attrs/attrs/blob/a1053048f133608297b44c08360a8d295e1a2b94/pyproject.toml#L29">zero dependency</a></td>
</tr>
</tbody>
</table>
<section id="immutable-instance" class="level2">
<h2 class="anchored" data-anchor-id="immutable-instance">Immutable Instance</h2>
<p>With <code>dataclasses</code>, you can set <code>frozen=True</code> to ensure immutablilty. It throws an <code>FrozenInstanceError</code> when someone is trying to update an immutable object.</p>
<div class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dataclasses <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> dataclass</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@dataclass</span>(frozen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> FrozenDataClass:</span>
<span id="cb1-5">    a: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span></span>
<span id="cb1-6">    b: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span></span>
<span id="cb1-7"></span>
<span id="cb1-8">frozen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FrozenDataClass(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb1-9">frozen.c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>FrozenInstanceError: cannot assign to field 'c'</code></pre>
</div>
</div>
<p>With <code>attrs</code>, it‚Äôs mostly identical except that you use <code>@define(frozen=True)</code>.</p>
<div class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> attrs <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> define</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@define</span>(frozen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb3-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> FrozenAttrs:</span>
<span id="cb3-5">    b: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span></span>
<span id="cb3-6"></span>
<span id="cb3-7">frozen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FrozenAttrs(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb3-8">frozen.c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>FrozenInstanceError: </code></pre>
</div>
</div>
</section>
<section id="post_init-assignment-and-derived-attributes" class="level2">
<h2 class="anchored" data-anchor-id="post_init-assignment-and-derived-attributes"><strong>post_init</strong> assignment and Derived Attributes</h2>
</section>
<section id="derived-attributes" class="level2">
<h2 class="anchored" data-anchor-id="derived-attributes">Derived Attributes</h2>
<p>Sometimes attribute are not defined during initialisation, but derived from other attribtues.</p>
<div class="cell" data-execution_count="40">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@dataclass</span></span>
<span id="cb5-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> DataClass:</span>
<span id="cb5-3">    a: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span></span>
<span id="cb5-4">    b: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span></span>
<span id="cb5-5"></span>
<span id="cb5-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> __post_init__(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb5-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.b</span>
<span id="cb5-8">frozen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataClass(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb5-9"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(frozen.c)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>3</code></pre>
</div>
</div>
<p>Similarly, with <code>attrs</code>:</p>
<div class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> attrs <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> define, field</span>
<span id="cb7-2"></span>
<span id="cb7-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@define</span></span>
<span id="cb7-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> AttrsDataClass:</span>
<span id="cb7-5">    a: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span></span>
<span id="cb7-6">    b: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span></span>
<span id="cb7-7">    c: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> field(init<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># derived</span></span>
<span id="cb7-8"></span>
<span id="cb7-9">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> __attrs_post_init__(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb7-10">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.b</span>
<span id="cb7-11"></span>
<span id="cb7-12">attrs_dc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AttrsDataClass(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb7-13"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(attrs_dc.c)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>3</code></pre>
</div>
</div>
</section>
<section id="partial-immutable-data-class-at-field-level" class="level2">
<h2 class="anchored" data-anchor-id="partial-immutable-data-class-at-field-level">Partial Immutable Data Class at field level</h2>
<p><code>dataclasses</code> does not have this flexibility. Here is an example with <code>attrs</code>:</p>
<div class="cell" data-execution_count="46">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> attrs <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> define, field</span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> attrs <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> setters</span>
<span id="cb9-3"></span>
<span id="cb9-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@define</span></span>
<span id="cb9-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> AttrsDataClass:</span>
<span id="cb9-6">    a: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span></span>
<span id="cb9-7">    b: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> field(on_setattr<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>setters.frozen)</span>
<span id="cb9-8">    c: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> field(init<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># derived</span></span>
<span id="cb9-9"></span>
<span id="cb9-10">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> __attrs_post_init__(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb9-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.b</span>
<span id="cb9-12"></span>
<span id="cb9-13">attrs_dc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> AttrsDataClass(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
</div>
<div class="cell" data-execution_count="47">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">attrs_dc.a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># OK</span></span>
<span id="cb10-2">attrs_dc.c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># OK</span></span>
<span id="cb10-3">attrs_dc.b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Not OK</span></span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>FrozenAttributeError: </code></pre>
</div>
</div>
<p>Now you get a new <code>FrozenAttributeError</code> error. What if you want to set attributes on a frozen class?</p>
</section>
<section id="dataclass-post_init-assignment-in-a-frozen-dataclass" class="level2">
<h2 class="anchored" data-anchor-id="dataclass-post_init-assignment-in-a-frozen-dataclass">dataclass <code>post_init</code> assignment in a frozen dataclass ‚úæ</h2>
<p>For those of you thinking about using derived attribute with <code>dataclass</code>, it doesn‚Äôt work.</p>
<div class="cell" data-execution_count="56">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@dataclass</span>(frozen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb12-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> FrozenDataClass:</span>
<span id="cb12-3">    a: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span></span>
<span id="cb12-4">    b: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span></span>
<span id="cb12-5"></span>
<span id="cb12-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> __post_init__(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb12-7">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.c <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.b</span>
<span id="cb12-8">frozen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FrozenDataClass(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>FrozenInstanceError: cannot assign to field 'c'</code></pre>
</div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">It doesn‚Äôt work<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span> Because the frozen flag will block <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">any</span> assignment even <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> the `__post_init__` method assignment too.</span></code></pre></div>
</div>
<div class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">### The `object.__setattr__` trick</span></span>
<span id="cb15-2"></span>
<span id="cb15-3">All Python objects are just regular objects, thus they aren<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'t truely "immutable". Most of the time, the libraries achieve the immutability via implementing the `__setattr__` method.</span></span></code></pre></div>
</div>
</section>
</section>
<section id="appendeix---the-obj.__setattr__-trick" class="level1">
<h1>Appendeix - the <code>obj.__setattr__</code> trick</h1>
<p>All Python objects are just regular objects, thus they aren‚Äôt truely ‚Äúimmutable‚Äù. Most of the time, the libraries achieve the immutability via implementing the <code>__setattr__</code> method.</p>
<div class="cell" data-execution_count="59">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@define</span>(frozen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb16-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> FrozenAttrs:</span>
<span id="cb16-3">  a: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span></span>
<span id="cb16-4"></span>
<span id="cb16-5">frozen_class <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FrozenAttrs(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span>
<span id="cb16-6">frozen_class.a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span></code></pre></div>
<div class="cell-output cell-output-error">
<pre><code>FrozenInstanceError: </code></pre>
</div>
</div>
<p>It may seems like it is indeed immutable, but if you try hard enough you can always crack it.</p>
<div class="cell" data-execution_count="61">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">object</span>.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__setattr__</span>(frozen_class, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb18-2">frozen_class.a</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="61">
<pre><code>100</code></pre>
</div>
</div>
<p>The <code>object</code> class is almost like the parent of all class. So that even though <code>frozen_class.__setattr__</code> works fine, you can still by pass this via this trick. In theory, you could also use this trick to achieve partial immutability with <code>dataclasses</code>.</p>
<div class="cell" data-execution_count="62">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@dataclass</span>(frozen<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb20-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> FrozenDataClass:</span>
<span id="cb20-3">    a: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span></span>
<span id="cb20-4">    b: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span></span>
<span id="cb20-5"></span>
<span id="cb20-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> __post_init__(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb20-7">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">object</span>.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__setattr__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'c'</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.b)</span>
<span id="cb20-8"></span>
<span id="cb20-9">frozen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FrozenDataClass(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb20-10">frozen.a, frozen.b, frozen.c</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="62">
<pre><code>(1, 2, 3)</code></pre>
</div>
</div>
</section>
<section id="conclusion" class="level1">
<h1>Conclusion</h1>
<p><code>attrs</code> offers a lot more flexibility compare to <code>dataclasses</code>, from frozen class, frozen field, derived attributes and a combination of them (there are a lot more, you should check out <a href="https://www.attrs.org/en/stable/examples.html">attrs by Example</a>). You may be able to achieve similar thing by using the <code>obejct.__setattr__</code> trick, but I‚Äôd also argue if you are trying so hard to fight with the library, you probably shouldn‚Äôt use it.</p>


</section>

 ]]></description>
  <category>python</category>
  <category>dataclasses</category>
  <category>attrs</category>
  <guid>https://noklam.github.io/blog/posts/2022-04-22-python-dataclass-partial-immutable.html</guid>
  <pubDate>Thu, 21 Apr 2022 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Journey of understanding Python and programming language</title>
  <dc:creator>noklam </dc:creator>
  <link>https://noklam.github.io/blog/posts/2022-02-10-journey-of-understanding-python-and-programming-langauge.html</link>
  <description><![CDATA[ 




<p>To be written‚Ä¶ # What is Python Interpreter?</p>
<section id="what-is-bytecode" class="level1">
<h1>What is Bytecode?</h1>
</section>
<section id="python-virtual-machine" class="level1">
<h1>Python Virtual Machine</h1>
</section>
<section id="compiler" class="level1">
<h1>Compiler</h1>
</section>
<section id="ebnf-grammar" class="level1">
<h1>EBNF Grammar</h1>
</section>
<section id="llvm" class="level1">
<h1>LLVM</h1>


</section>

 ]]></description>
  <category>python</category>
  <guid>https://noklam.github.io/blog/posts/2022-02-10-journey-of-understanding-python-and-programming-langauge.html</guid>
  <pubDate>Thu, 10 Feb 2022 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
