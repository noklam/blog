---
badges: true
categories:
- kedro
date: '2023-09-26'
description: 'Learn how to use Kedro\'s Namespace Pipelines for efficient time series forecasting.'
hide: false
title: 'A Guide to Kedro Namespace Pipelines for Time Series Forecasting'
toc: true
---

# Understanding Kedro's Namespace Pipelines

Kedro's [Namespace Pipeline](https://docs.kedro.org/en/0.18.0/tutorial/namespace_pipelines.html) is a powerful feature that allows for flexible pipeline reuse, especially handy for tasks like time series forecasting.

## Getting Started

Consider a basic pipeline node for monthly predictions:

```python
def make_monthly_predictions(input_data):
    output_data = "dummy"
    return output_data
```

Now, let's create a simple pipeline using Kedro:

```python
from kedro.pipeline.modular_pipeline import pipeline
from kedro.pipeline import node

base_pipeline = pipeline(
    [
        node(
            func=make_monthly_predictions,
            inputs=["input_data"],
            outputs=["output_data"]
        )
    ]
)
```

## Utilizing Namespace for Efficiency

For time series forecasting, where predictions depend on previous results, we can efficiently handle this with Namespace Pipelines. Start by creating a Namespace Pipeline:

```python
namespace_pipeline = pipeline(
    [
        node(
            func=make_monthly_predictions,
            inputs=["input_data"],
            outputs=["output_data"]
        )
    ],
    namespace="namespace"
)
```

The `namespace` argument automatically adds a prefix to inputs and outputs. If you want to keep datasets without a namespace, you can specify it:

```python
namespace_pipeline = pipeline(
    [
        node(
            func=make_monthly_predictions,
            inputs=["input_data"],
            outputs=["output_data"]
        )
    ],
    inputs=["input_data"],
    namespace="namespace"
)
```

## Building the Time-Series Pipeline

Now, let's build a time-series pipeline by iterating through months and connecting pipelines:

```python
months = ["jan", "feb", "mar", "apr"]

def create_pipeline(months):
    pipelines = []
    for i in range(len(months) - 1):
        curr, next = months[i], months[i+1]
        pipelines.append(pipeline(base_pipeline,
            outputs={"output_data": f"{next}.input_data"},
            namespace=curr))
    return pipeline(pipelines)

final_pipeline = create_pipeline(months)
```

By visualizing the pipeline with `kedro viz`, you can observe the connections between each step.

For a complete example, refer to the [GitHub repository](https://github.com/noklam/kedro_gallery/tree/master/loop-pipeline).
